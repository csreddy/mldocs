<apidoc:module name="OfficeConvert" category="Document Conversion" lib="xdmp" xmlns:apidoc="http://marklogic.com/xdmp/apidoc"><apidoc:summary access="public">
  <p xmlns="http://www.w3.org/1999/xhtml">Includes the Microsoft Office convert functions using the AntennaHouse
  technology.</p>
</apidoc:summary><apidoc:function name="word-convert" type="builtin" lib="xdmp" category="Document Conversion">
    <apidoc:summary>
  Converts a Microsoft Word document to XHTML. Returns several nodes,
  including a parts node, the converted document xml node, and any
  other document parts (for example, css files and images).  The first
  node is the parts node, which contains a manefest of all of the parts
  generated as result of the conversion.  Does not convert Microsoft Office
  2007 and later documents.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="doc" type="node()" optional="false">
  Microsoft Word document to convert to HTML, as binary node().
  </apidoc:param>
      <apidoc:param name="filename" type="xs:string" optional="false">
    The root for the name of the converted files and directories. If the
    specified filename includes an extension, then the extension is appended
    to the root with an underscore. The directory for other parts of the
    conversion (images, for example) has the string "_parts" appended to the
    root. For example, if you specify a filename of "myFile.doc", the
    generated names will be "myFile_doc.xhtml" for the xml node and
    "myFile_doc_parts" for the directory containing the any other parts
    generated by the conversion (images, css files, and so on).
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">

    The options <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">node</span>
                <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">object</span>
    for this conversion. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The node for the options must
    be in the <code>xdmp:word-convert</code> namespace.</span>

    In addition to the options shown below, you can
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">specify <code>xdmp:tidy</code> options by entering the
    tidy option elements in the <code>xdmp:tidy</code> namespace.</span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">freely add <code>xdmp.tidy</code> options.</span>
    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt><p><span class="xquery">&lt;<code>tidy</code>&gt;</span>
    <span class="javascript"><code>tidy</code></span></p></dt>
    <dd>Specify <code>true</code> to run tidy on the document and
    <code>false</code> not to run tidy. If you run tidy, you can also
    specify any <a class="xquery" href="#xdmp:tidy">xdmp:tidy options</a>
    <a class="javascript" href="#xdmp.tidy">xdmp.tidy options</a>.
    <span class="xquery">Any tidy option elements must be in the
    <code>xdmp:tidy</code> namespace.</span></dd>
    <dt><p><span class="xquery">&lt;<code>compact</code>&gt;</span>
    <span class="javascript"><code>compact</code></span></p></dt>
    <dd>Specify <code>true</code> to produce
    "compact" HTML, that is, without style information. The default is
    <code>false</code>.</dd>
    <dt><p>Sample Options<span class="xquery"> Node</span>:</p></dt>
    <dd>The following is a sample options <span class="xquery">node</span>
    <span class="javascript">object</span>
    which specifies that tidy should be used to clean the generated html
    and specifies to use the tidy "clean" option for the conversion:
    <pre class="xquery">
&lt;options xmlns="xdmp:word-convert"
         xmlns:tidy="xdmp:tidy"&gt;
  &lt;tidy&gt;true&lt;/tidy&gt;
  &lt;tidy:clean&gt;yes&lt;/tidy:clean&gt;
&lt;/options&gt;
</pre>
<pre class="javascript">
{
  "tidy":true,
  // "clean" is a 'tidy' package option (which is passed through) and 
  // uses "yes"/"no"
  "clean":"yes" 
}
</pre>
</dd>
    </dl>
    </blockquote>
  </apidoc:param>
    </apidoc:params>
    <apidoc:return>node()*</apidoc:return>
    <apidoc:usage>
  The convert functions return several nodes.  The first node is a manifest
  containing the various parts of the conversion. Typically there will be
  an xml part, a css part, and some image parts.  Each part is returned as
  a separate node in the order shown in the manifest.
  <p xmlns="http://www.w3.org/1999/xhtml">Therefore, given the following manifest: </p>
  <pre xmlns="http://www.w3.org/1999/xhtml">
&lt;parts&gt;
  &lt;part&gt;myFile_doc.xhtml&lt;/part&gt;
  &lt;part&gt;myFile_doc_parts/conv.css&lt;/part&gt;
  &lt;part&gt;myFile_doc_parts/toc.xml&lt;/part&gt;
&lt;/parts&gt;
</pre>
  <p xmlns="http://www.w3.org/1999/xhtml">the first node of the returned query is the manifest, the second is the
  "myFile_doc.xhtml" node, the third is the "myFile_doc_parts/conv.css" node,
  and the fourth is the myFile_doc_parts/toc.xml node.</p>

</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $results := xdmp:word-convert(
                         xdmp:document-get("myFile.doc"),
                         "myFile.doc" ),
    $manifest := $results[1]
return
$results[2 to last()]

=&gt; all of the converted nodes
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var results = xdmp.wordConvert(
                xdmp.documentGet("/space/Hello.doc"),
                "Hello.doc");
var manifest= results.next().value;
var wordAsXHTML = results.next().value;
wordAsXHTML;

=&gt; The word document converted as xhtml.  The results variable
   is a ValueIterator, where the first item is the manifest, and the 
   remaining items are the converted nodes.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="excel-convert" type="builtin" lib="xdmp" category="Document Conversion">
    <apidoc:summary>
  Converts a Microsoft Excel document to XHTML. Returns several nodes,
  including a parts node, the converted document xml node, and any
  other document parts (for example, css files and images).  The first
  node is the parts node, which contains a manefest of all of the parts
  generated as result of the conversion.  Does not convert Microsoft Office
  2007 and later documents.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="doc" type="node()" optional="false">
    Microsoft Office Excel document to convert to HTML, as binary node().
  </apidoc:param>
      <apidoc:param name="filename" type="xs:string" optional="false">
    The root for the name of the converted files and directories. If the
    specified filename includes an extension, then the extension is appended
    to the root with an underscore. The directory for other parts of the
    conversion (images, for example) has the string "_parts" appended to the
    root. For example, if you specify a filename of "myFile.xls", the
    generated names will be "myFile_xls.xhtml" for the xml node and
    "myFile_xls_parts" for the directory containing the any other parts
    generated by the conversion (images, css files, and so on).
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">

    The options <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">element</span>
                <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">object</span>
    for this conversion. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The node for the options must
    be in the <code>xdmp:excel-convert</code> namespace.</span>

    The default value is <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">()</span>
    <span class="javascript">null</span></code>.

    In addition to the options shown below, you can
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">specify <code>xdmp:tidy</code> options by entering the
    tidy option elements in the <code>xdmp:tidy</code> namespace.</span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">freely add <code>xdmp.tidy</code> options.</span>

    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>

    <dt><p><span class="xquery">&lt;<code>tidy</code>&gt;</span>
    <span class="javascript"><code>tidy</code></span></p></dt>
    <dd>Specify <code>true</code> to run tidy on the document and
    <code>false</code> not to run tidy. If you run tidy, you can also
    <span class="xquery">specify an <a href="#xdmp:tidy">xdmp:tidy</a>
    options node.</span>
    <span class="javascript">freely add <a href="#xdmp.tidy">xdmp.tidy</a>
    options.</span>
    </dd>
    <dt><p><span class="xquery">&lt;<code>sheetID</code>&gt;</span>
    <span class="javascript"><code>sheetID</code></span></p></dt>
    <dd>An integer specifying which sheet of the input Excel document
    to convert. If this option is not set, all sheets are converted. </dd>

    <dt><p><span class="xquery">&lt;<code>compact</code>&gt;</span>
    <span class="javascript"><code>compact</code></span></p></dt>
    <dd>Specify <code>true</code> to produce
    "compact" HTML, that is, without style information. The default is
    <code>false</code>.</dd>
    <dt><p><span class="xquery">&lt;<code>print-area-only</code>&gt;</span>
    <span class="javascript"><code>printAreaOnly</code></span></p></dt>
    <dd>Specify <code>true</code>
    to convert only the print area of the sheet.</dd>
    <dt><p><span class="xquery">&lt;<code>sheet-by-sheet</code>&gt;</span>
    <span class="javascript"><code>sheetBySheet</code></span></p></dt>
    <dd>Specify <code>true</code> to produce
    one document for each sheet. The default is <code>false</code>.</dd>

    <dt><p>Sample Options<span class="xquery"> Node</span>:</p></dt>
    <dd>The following is a sample options <span class="xquery">node</span>
    <span class="javascript">object</span>
    which specifies that tidy should be used to clean the generated html,
    specifies to use the tidy "clean" option, and specifies to only
    convert sheet 2 of the document:
    <pre class="xquery">
&lt;options xmlns="xdmp:excel-convert"
         xmlns:tidy="xdmp:tidy"&gt;
  &lt;tidy&gt;true&lt;/tidy&gt;
  &lt;tidy:clean&gt;yes&lt;/tidy:clean&gt;
  &lt;sheetID&gt;2&lt;/sheetID&gt;
&lt;/options&gt;
</pre>
    <pre class="javascript">
{
  "tidy": true,
  "clean":"yes",
  "sheetID":2
}
</pre>
</dd>
    </dl>
    </blockquote>

  </apidoc:param>
    </apidoc:params>
    <apidoc:return>node()*</apidoc:return>
    <apidoc:usage>
  The convert functions return several nodes.  The first node is a manifest
  containing the various parts of the conversion. Typically there will be
  an xml part, a css part, and some image parts.  Each part is returned as
  a separate node in the order shown in the manifest.
  <p xmlns="http://www.w3.org/1999/xhtml">Therefore, given the following manifest: </p>
  <pre xmlns="http://www.w3.org/1999/xhtml">
&lt;parts&gt;
  &lt;part&gt;myFile_xls.xhtml&lt;/part&gt;
  &lt;part&gt;myFile_xls_parts/conv.css&lt;/part&gt;
  &lt;part&gt;myFile_xls_parts/toc.xml&lt;/part&gt;
&lt;/parts&gt;
</pre>
  <p xmlns="http://www.w3.org/1999/xhtml">the first node of the returned query is the manifest, the second is the
  "myFile_xls.xhtml" node, the third is the "myFile_xls_parts/conv.css" node,
  and the fourth is the myFile_xls_parts/toc.xml node.</p>

</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $results := xdmp:excel-convert(
                         xdmp:document-get("myFile.xls"),
                         "myFile.xls" ),
    $manifest := $results[1]
return
$results[2 to last()]

=&gt; all of the converted nodes
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var results = xdmp.excelConvert(
                xdmp.documentGet("/space/Hello.xls"),
                "Hello.xls");
var manifest= results.next().value;
var excelAsXHTML = results.next().value;
excelAsXHTML;

=&gt; The excel document converted as xhtml.  The results variable
   is a ValueIterator, where the first item is the manifest, and the 
   remaining items are the converted nodes.
</pre></apidoc:example>
  </apidoc:function><apidoc:function name="powerpoint-convert" type="builtin" lib="xdmp" category="Document Conversion">
    <apidoc:summary>
  Converts a Microsoft Powerpoint document to XHTML. Returns several nodes,
  including a parts node, the converted document xml node, and any
  other document parts (for example, css files and images).  The first
  node is the parts node, which contains a manefest of all of the parts
  generated as result of the conversion.  Does not convert Microsoft Office
  2007 and later documents.
</apidoc:summary>
    <apidoc:params>
      <apidoc:param name="doc" type="node()" optional="false">
    Microsoft Powerpoint document to convert to HTML, as binary node().
  </apidoc:param>
      <apidoc:param name="filename" type="xs:string" optional="false">
    The root for the name of the converted files and directories. If the
    specified filename includes an extension, then the extension is appended
    to the root with an underscore. The directory for other parts of the
    conversion (images, for example) has the string "_parts" appended to the
    root. For example, if you specify a filename of "myFile.ppt", the
    generated names will be "myFile_ppt.xhtml" for the xml node and
    "myFile_ppt_parts" for the directory containing the any other parts
    generated by the conversion (images, css files, and so on).
  </apidoc:param>
      <apidoc:param name="options" type="(element()|map:map)?" optional="true">
    The options <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">element</span>
                <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">object</span>
    for this conversion. <span class="xquery" xmlns="http://www.w3.org/1999/xhtml">The node for the options must
    be in the <code>xdmp:powerpoint-convert</code> namespace.</span>

    The default value is <code xmlns="http://www.w3.org/1999/xhtml"><span class="xquery">()</span>
    <span class="javascript">null</span></code>.

    In addition to the options shown below, you can specify
    <span class="xquery" xmlns="http://www.w3.org/1999/xhtml"><code>xdmp:tidy</code> options by entering the tidy option
    elements in the <code>xdmp:tidy</code> namespace</span>
    <span class="javascript" xmlns="http://www.w3.org/1999/xhtml">tidy options directly</span>.

    <p xmlns="http://www.w3.org/1999/xhtml">Options include:</p>
    <blockquote xmlns="http://www.w3.org/1999/xhtml"><dl>
    <dt><p><span class="xquery">&lt;<code>tidy</code>&gt;</span>
    <span class="javascript"><code>tidy</code></span></p></dt>
    <dd>Specify <code>true</code> to run tidy on the document and
    <code>false</code> not to run tidy. If you run tidy, you can also
    <span class="xquery">specify an <a href="#xdmp:tidy">xdmp:tidy options node</a>.</span>
    <span class="javascript">directly add <a href="#xdmp.tidy">xdmp.tidy</a> options.</span>
    </dd>
    <dt><p><span class="xquery">&lt;<code>compact</code>&gt;</span>
    <span class="javascript"><code>compact</code></span></p></dt><dd>Specify <code>true</code> to produce
    "compact" HTML, that is, without style information. The default is
    <code>false</code>.</dd>
    <dt><p><span class="xquery">&lt;<code>slideID</code>&gt;</span>
    <span class="javascript"><code>slideID</code></span></p></dt>
    <dd>An integer specifying which slide of the input Powerpoint document
    to convert. If this option is not set, all slides are converted. </dd>
    <dt><p><span class="xquery">&lt;<code>slide-by-slide</code>&gt;</span>
    <span class="javascript"><code>slideBySlide</code></span></p></dt><dd>Specify <code>true</code>
    to produce
    one document for each slide.  The default is <code>false</code>.</dd>
    <dt><p><span class="xquery">&lt;<code>speaker-notes</code>&gt;</span>
    <span class="javascript"><code>speakerNotes</code></span></p></dt><dd>Specify <code>true</code> to
    include speaker notes in the output. The default is <code>false</code>.</dd>
    <dt><p>Sample Options Node:</p></dt>
    <dd>The following is a sample options node which specifies that tidy is
    used to clean the generated html, specifies to use the tidy "clean"
    option, and specifies to only convert the second slide of the document:
    <pre class="xquery">
&lt;options xmlns="xdmp:powerpoint-convert"
         xmlns:tidy="xdmp:tidy"&gt;
  &lt;tidy&gt;true&lt;/tidy&gt;
  &lt;tidy:clean&gt;yes&lt;/tidy:clean&gt;
  &lt;slideID&gt;2&lt;/slideID&gt;
&lt;/options&gt;
</pre>
<pre class="javascript">
{
  "tidy": true,
  "clean": "yes",
  "slideID": 2
}
</pre>
</dd>
    </dl>
    </blockquote>

  </apidoc:param>
    </apidoc:params>
    <apidoc:return>node()*</apidoc:return>
    <apidoc:usage>
  The convert functions return several nodes.  The first node is a manifest
  containing the various parts of the conversion. Typically there will be
  an xml part, a css part, and some image parts.  Each part is returned as
  a separate node in the order shown in the manifest.
  <p xmlns="http://www.w3.org/1999/xhtml">Therefore, given the following manifest: </p>
  <pre xmlns="http://www.w3.org/1999/xhtml">
&lt;parts&gt;
  &lt;part&gt;myFile_ppt.xhtml&lt;/part&gt;
  &lt;part&gt;myFile_ppt_parts/conv.css&lt;/part&gt;
  &lt;part&gt;myFile_ppt_parts/toc.xml&lt;/part&gt;
&lt;/parts&gt;
</pre>
  <p xmlns="http://www.w3.org/1999/xhtml">the first node of the returned query is the manifest, the second is the
  "myFile_ppt.xhtml" node, the third is the "myFile_ppt_parts/conv.css" node,
  and the fourth is the myFile_ppt_parts/toc.xml node.</p>

</apidoc:usage>
    <apidoc:example class="xquery"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
let $results := xdmp:powerpoint-convert(
                         xdmp:document-get("myFile.ppt"),
                         "myFile.ppt" ),
    $manifest := $results[1]
return
$results[2 to last()]

=&gt; all of the converted nodes
</pre></apidoc:example>
    <apidoc:example class="javascript"><pre xml:space="preserve" xmlns="http://www.w3.org/1999/xhtml">
var results = xdmp.powerpointConvert(
                xdmp.documentGet("/space/Hello.ppt"),
                "Hello.ppt");
var manifest= results.next().value;
var pptAsXHTML = results.next().value;
pptAsXHTML;

=&gt; The powerpoint document converted as xhtml.  The results variable
   is a ValueIterator, where the first item is the manifest, and the 
   remaining items are the converted nodes.
</pre></apidoc:example>
  </apidoc:function></apidoc:module>