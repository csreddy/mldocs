<apidoc:module name="RESTclient" category="Client API" lib="rest-client"
               bucket="REST Resources API" 
               xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
	           xmlns="http://www.w3.org/1999/xhtml">

<apidoc:summary category="Client API" bucket="REST Resources API">
<p>
The Client REST API is a REST-based API for creating applications that 
with document manipulation and search capabilities. Use the web services 
provided by the API to create, read, update, delete, and search content 
in MarkLogic Server. For more information about the API, see 
<em>The REST Application Developer's Guide</em>.
</p><p>
NOTE: To use most of these interfaces, you must have a REST API instance.
To create an instance, use POST /v1/rest-apis on port 8002 or the GUI
available at <code>http://your-host:8000</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2312021'>Creating an Instance</a> in the <em>REST Application Developer's Guide</em>.
</p><p>
The examples in this section use the command line tool <code>curl</code> for 
sending HTTP requests. Though the examples rely on <code>curl</code>, you 
may use any tool capable of sending HTTP requests. If you do not have curl, 
you can download a copy from 
<a href="http://curl.haxx.se/download.html">http://curl.haxx.se/download.html</a>.
</p><p>
The following HTTP response codes apply to all requests to the API services.
Additional response codes are covered in the usage information for each
operation.
</p>
<table>
  <tr>
    <th>Code</th>
    <th>Description</th>
    <th>Cause</th>
  </tr>
  <tr>
    <td>200</td>
    <td>OK</td>
    <td>Success</td>
  </tr>
  <tr>
    <td>400</td>
    <td>Bad Request</td>
    <td>Unsupported or invalid parameters, or missing required parameters.</td>
  </tr>
  <tr>
    <td>401</td>
    <td>Unauthorized</td>
    <td>User is not authorized.</td>
  </tr>
  <tr>
    <td>403</td>
    <td>Forbidden</td>
    <td>User does not have access to this resource.</td>
  </tr>
  <tr>
    <td>404</td>
    <td>Not Found</td>
    <td>No matching pattern for incoming URI.</td>
  </tr>
  <tr>
    <td>405</td>
    <td>Method Not Allowed</td>
    <td>The service does not support the HTTP method used by the client.</td>
  </tr>
  <tr>
    <td>406</td>
    <td>Unacceptable Type</td>
    <td>Unable to provide content type matching the client's Accept header.</td>
  </tr>
  <tr>
    <td>412</td>
    <td>Precondition Failed</td>
    <td>A non-syntactic part of the request was rejected. For example, an 
        empty POST or PUT body.
    </td>
  </tr>
  <tr>
    <td>415</td>
    <td>Unsupported Media Type</td>
    <td>A PUT or POST payload cannot be accepted.</td>
  </tr>
</table>
</apidoc:summary>

<apidoc:summary category="Client API" bucket="REST Resources API" subcategory="Alerting">
Use the /alert service to do the following:
<ul>
  <li>Install rules that describe characteristics of documents you want
      to identify in the future.</li>
  <li>Poll for new database content that matches pre-installed rules.</li>
  <li>Test a transient document that is not stored in the database for
      matches against your pre-defined rules.</li>
</ul>
<p>
  This feature relies on reverse queries and the MarkLogic Server Alerting
  API, so it requires a valid alerting license key.
</p><p>
  When you use a query to identify documents to test against your
  rules, you should either define a query that matches only a small number
  of documents, or use the <code>start</code> and <code>pageLength</code>
  request parameters of <code>/alert/match</code> to limit the number of
  documents considered. 
</p><p>
  For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2359466'>Alerting</a> in the <em>REST Application Developer's Guide</em>.
</p>
</apidoc:summary>

<apidoc:summary category="Client API" bucket="REST Resources API" subcategory="Document Management">
Use the <code>/documents</code> service to create, replace, update, and delete
documents and metadata. You can update documents in their entirety
or incrementally. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2356097'>Manipulating Documents</a> in the <em>REST Application Developer's Guide</em> and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2329825'>Reading and Writing Multiple Documents</a> in the <em>REST Application Developer's Guide</em>.
</apidoc:summary>

<apidoc:summary category="Client API" bucket="REST Resources API" subcategory="Configuration">
Use the /config services to do the following:
  <ul>
    <li>
      Manage properties of your REST API instance, such as defining
      default a document transform, enabling debugging output, and
      setting the MIME type for error reports.
    </li>
    <li>Manage persistent query options.</li>
    <li>Manage content transformations.</li>
    <li>
      Manage namespace bindings you can use to make queries with other
      REST services, such as <code>/search</code>.
    </li>
    <li>
      Test whether or not your database configuration includes all
      indexes required by persistent query options.
    </li>
  </ul>
</apidoc:summary>

<apidoc:summary category="Client API" bucket="REST Resources API" subcategory="Search">
Use the interfaces in this section to perform query operations such
searching using string, structured, combined, or Query By Example;
lexicon browsing; and search suggestion generation.  For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2347389'>Using and Configuring Query Features</a> in the <em>REST Application Developer's Guide</em>.
</apidoc:summary>

<apidoc:summary category="Client API" bucket="REST Resources API" subcategory="Semantics">
Use the interfaces in this section to manage and query semantic graph
data. The API capabilities include the following:
  <ul>
    <li>Insert, merge, or replace triples.</li>
    <li>Retrieve a graph.</li>
    <li>Perform a SPARQL query.</li>
  </ul>
  <p>
   NOTE: You must enable the collection lexicon on your database before
   using the semantics interfaces. You can enable the collection lexicon
 using the Admin Interface. See <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/setup.xml%2333041'>Configuring the Database to Work with Triples</a> in the <em>Semantics Developer's Guide</em> in the <em>Semantics Developer's Guide</em>.
  </p><p>
   For more information, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2346945'>Loading Triples</a> in the <em>REST Application Developer's Guide</em>,
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2366593'>Querying Triples</a> in the <em>REST Application Developer's Guide</em>,
and the <em>Semantics Developer's Guide</em>.
  </p>
</apidoc:summary>

<apidoc:summary category="Client API" bucket="REST Resources API" subcategory="Service Extension">
The interfaces in this section enable you to extend the capabilities of
the REST Client API in a variety of ways, include resource service
extensions, ad-hoc queries, and invocation of JavaScript and XQuery
modules stored in MarkLogic Server.
<p>
  Resource service extensions enable you to install custom XQuery and JavaScript
  modules on MarkLogic Server and then expose them through a RESTful interface.
  Use the <code>/config/resources</code> service to manage the 
  module that implements your extension. Use the <code>/resources</code> 
  service to make requests against resource service extensions.
</p><p>
  Use the <code>/ext</code> service
  to manage assets in the modules database associated with a REST API
  instance, including dependent libraries of resource service extensions,
  content transformations, and XQuery and JavaScript modules usable with
  the <code>/invoke</code> service.
</p><p>
  Use the <code>/eval</code> service to evaluate ad-hoc XQuery and JavaScript
  code on MarkLogic Server. Use the <code>/invoke</code> service to evaluate
  XQuery and JavaScript modules stored on MarkLogic Server.
</p><p>
  For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2314646'>Extending the REST API</a> in the <em>REST Application Developer's Guide</em>.
</p>
</apidoc:summary>

<apidoc:summary category="Client API" bucket="REST Resources API" subcategory="Service Management">
  Use the <code>/rest-apis</code> service to create or delete a REST API
  instance, or to retrieve configuration information about a REST API
  instance.
<p>
  NOTE: You must send all requests to <code>/rest-apis</code> to port 8002.
</p><p>
  For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2374255'>Administering MarkLogic REST API Instances</a> in the <em>REST Application Developer's Guide</em>.
</p>
</apidoc:summary>

<apidoc:summary category="Client API" bucket="REST Resources API" subcategory="Transaction Management">
Use the <code>/transactions</code> service to manage transactions 
using the REST API. You can create, commit, rollback, and query the
status of transactions. Use these features if your application requires
multiple REST API requests to execute within the same transaction
context. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/transactions.xml%2356097'>Managing Transactions</a> in the <em>REST Application Developer's Guide</em>.
</apidoc:summary>

<!-- ************ CRUD Operations ************ -->

<apidoc:function name="/v1/documents" http-verb="GET"  lib="rest-client" 
                 category="Client API" bucket="REST Resources API" 
                 subcategory="Document Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve document content and/or metadata from the database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri+" type="string">
      One or more URIs for documents in the database. If you specify 
      multiple URIs, the Accept header must be <code>multipart/mixed</code>.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to fetch about the requested document. Category
      can be specified multiple times to retrieve any combination of content 
      and metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to request all 
      categories except content.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The expected format of metadata returned in the response.
      Accepted values: <code>xml</code> or <code>json</code>. This
      parameter does not affect document content. For metadata, this 
      parameter overrides the MIME type in the Accept header, except 
      when the Accept header is <code>multipart/mixed</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a content transformation previously installed via the 
      <code>/config/transforms</code> service. The service applies the 
      transformation to all documents prior to constructing the response.
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>. Transform parameters are passed to 
      the transform named in the <code>transform</code> parameter.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response. For a multi-document read
      request or a single document request for both content and metadata, 
      this header must be set to <code>multipart/mixed</code>. When 
      requesting only metadata for a single document, use 
      <code>application/json</code> or <code>application/XML</code> (default)
      or set the <code>format</code> parameter.
    </apidoc:header>
    <apidoc:header name="If-None-Match?" type="request">
      This header is not supported for multi-document requests.
      If the current version of the requested document matches the version
      identifier in this header, return a 304 (Not Modified) response.
      This header is ignored unless content versioning is enabled. For
      details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2362701'>Client-Side Cache Management Using Content Versioning</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Range?" type="request">
      This header is not supported for multi-document requests.
      Specifies a zero-based start index or start and end indices for
      retrieving a sub-binary from a binary document.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the content returned in the response body.
    </apidoc:header>
    <apidoc:header name="Content-Disposition" type="response">
      On a multi-document read request response, each part includes this
      header with the following format:
      <code>Content-Disposition: attachment; filename=db-uri; category=part-contents; format=part-content-type</code>. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2351554'>Bulk Read Response Overview</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Etag" type="response">
      This header is not supported for multi-document requests.
      An opaque version identifier for the requested document, suitable
      for subsequent use in an If-None-Match or If-Match header. This 
      header is only available when content versioning is enabled. For
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2362701'>Client-Side Cache Management Using Content Versioning</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 200 (OK) and the requested 
    document(s) and/or metadata.
    <p>
     For a single-document read that returns both content and metadata, the
     response body MIME type is <code>multipart/mixed</code> with metadata
     in the first part and content in the second part. 
    </p><p>
     For a multi-document read, the response body MIME type is 
     <code>multipart/mixed</code> and each part contains either content or 
     metadata, with the part type and document URI indicated by the 
     <code>Content-Disposition</code> header.  For details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2351554'>Bulk Read Response Overview</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     You can use this request to retrieve the contents and/or metadata of
     a single document or multiple documents. The request headers
     <code>If-None-Match</code>, <code>Range</code>, and <code>Etag</code>
     are not supported when reading multiple documents. For details about
     single document reads, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2380116'>Retrieving Documents from the Database</a> in the <em>REST Application Developer's Guide</em>.
     For details on multi-document reads, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2344502'>Reading Multiple Documents by URI</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     You can request content only, metadata only, or both, through the
     <code>category</code> parameter. Metadata can be requested selectively,
     such as <code>category=collections</code>, or as a whole, using
     <code>category=metadata</code>. Metadata can only be returned as XML 
     or JSON. 
    </p><p>
     Content negotiation for fetching metadata as XML or JSON is supported
     through the <code>format</code> parameter or <code>Accept</code> header.
     In a single document read, one or the other must be supplied when fetching
     just metadata; if both are supplied and are different, the 
     <code>format</code> parameter takes precedence. In a multi-document 
     read request, the Accept header must be <code>multipart/mixed</code>
     so you must use <code>format</code> to specify the metadata format.
    </p><p>
     The default metadata format is XML except when reading content and
     metadata together for a single JSON document, in which case metadata
     is returned as XML by default. To get consistent behavior when using
     multi-document read of content and metadata together, you should 
     explicitly set <code>format</code>. Otherwise, you will receive XML
     metadata for N > 1 documents, and JSON metadata for N = 1 documents.
    </p><p>
     There is no default content negotiation or conversion on document content.
     The format of the data in the response is based on the MIME type mapping 
     defined for the URI extension. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
     You can support custom content negotiations using the 
     <code>/transform</code> service; see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/transforms.xml%2360984'>Working With Content Transformations</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     When you retrieve both content and metadata for a single document in
     the same request, the response content type is 
     <code>multipart/mixed</code>, with the first part containing metadata 
     and the second part containing the content. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2377171'>Retrieving Content and Metadata in a Single Request</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     For temporal documents, this method always returns the latest version
     of the document(s). Use the search endpoints to retrieve other versions.
    </p><p>
     For more details and examples, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2380116'>Retrieving Documents from the Database</a> in the <em>REST Application Developer's Guide</em>
     and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2344502'>Reading Multiple Documents by URI</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i \
  -H "Accept: application/xml" \
  http://localhost:8000/v1/documents?uri=/shakespeare/plays/a_and_c.xml

==> The document at URI /shakespeare/plays/a_and_c.xml in
    response body, and the following headers:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
vnd.marklogic.document-format: xml
Content-type: text/xml; charset=UTF-8
Server: MarkLogic
Content-Length: 251855
Connection: close

<?xml version="1.0" encoding="UTF-8"?>
<PLAY xml:lang="en">
<TITLE>The Tragedy of Antony and Cleopatra</TITLE>
...
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i \
  -H "Accept: application/xml" \
  'http://localhost:8000/v1/documents?uri=/shakespeare/plays/a_and_c.xml&category=metadata'

==> The metadata for the document with URI /shakespeare/plays/a_and_c.xml
    in the response body:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
vnd.marklogic.document-format: xml
Content-type: application/xml; charset=UTF-8
Server: MarkLogic
Content-Length: 437
Connection: close

<rapi:metadata uri="/shakespeare/plays/a_and_c.xml" 
    xsi:schemaLocation="http://marklogic.com/rest-api/database dbmeta.xsd"
    xmlns:rapi="http://marklogic.com/rest-api" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <rapi:collections/>
  <rapi:permissions/>
  <prop:properties xmlns:prop="http://marklogic.com/xdmp/property">
    <playtype>TRAGEDY</playtype>
  </prop:properties>
  <rapi:quality>0</rapi:quality>
</rapi:metadata>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i \
  -H "Accept: multipart/mixed; boundary=document-part-boundary" \
  'http://localhost:8000/v1/documents?uri=/shakespeare/plays/a_and_c.xml&format=json\&category=properties\&category=content'

==> A multipart response with the JSON metadata in the first part
    and the XML document content in the second:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Content-type: multipart/mixed; boundary=document-part-boundary
Server: MarkLogic
Content-Length: 252175
Connection: close

--document-part-boundary
vnd.marklogic.document-part: metadata
Content-Type: application/json
Content-Length: 37

{"properties":{"playtype":"TRAGEDY"}}
--document-part-boundary
vnd.marklogic.document-part: content
Content-Type: text/xml
Content-Length: 251873

<?xml version="1.0" encoding="UTF-8"?>
<PLAY xml:lang="en">
<TITLE>The Tragedy of Antony and Cleopatra</TITLE>
...
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i \
  -H "Accept: multipart/mixed; boundary=document-part-boundary" \
  'http://localhost:8000/v1/documents?uri=doc1.xml&uri=doc2.json'

==> A multipart response containing two parts, one containing
    the XML content for doc1.xml and the other containing the 
    JSON content for doc2.json.

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Content-type: multipart/mixed; boundary=document-part-boundary
Server: MarkLogic
Content-Length: 458
Connection: Keep-Alive
Keep-Alive: timeout=5

--document-part-boundary
Content-Type: text/xml
Content-Disposition: attachment; filename=doc1.xml; category=content; 
                     format=xml
Content-Length: 75

<?xml version="1.0" encoding="UTF-8"?>
<root>some document content</root>
--document-part-boundary
Content-Type: application/json
Content-Disposition: attachment; filename=doc2.json; category=content; 
                     format=json
Content-Length: 36

{"key":"some document content"}
--document-part-boundary--
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/documents" http-verb="HEAD" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Document Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Returns the same headers as an equivalent GET (content/metadata fetch)
    on the <code>/documents</code> service. For example, you can use the 
    returned content length to determine the end boundary for iterating over 
    sub-binaries.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="category*" type="string">
      The category of data for which to generate headers. Category
      can be specified multiple times to request any combination of content 
      and metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code>
      to request all categories except content.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The format of metadata returned by the request, either 
      <code>xml</code> or <code>json</code>. The format parameter applies
      only to metadata and overrides any format specified in the Accept 
      header.  
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="uri" type="string">
      The URI of a document in the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response. Metadata may only be returned
      as <code>application/json</code> or <code>application/XML</code> (the
      default).
    </apidoc:header>
    <apidoc:header name="Range?" type="request">
      Specifies a zero-based start index or start and end indices for
      retrieving a sub-binary from a binary document.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the content that would be returned by a GET.
    </apidoc:header>
    <apidoc:header name="Etag" type="response">
      An opaque version identifier for the requested document, suitable
      for subsequent use in an If-None-Match or If-Match header. This 
      header is only available when content versioning is enabled. For
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2362701'>Client-Side Cache Management Using Content Versioning</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 200 (OK) and the same headers 
    that are returned by an equivalent GET on the /documents service.
  </apidoc:response>
  <apidoc:usage>
    Use this method to determine what headers an equivalent GET will return.
    For example, the returned content length header may be used to set the
    ending boundary when using ranges to iterate over sub-binaries in a 
    binary document.
  </apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X HEAD -i \
  -H "Accept: multipart/mixed; boundary=picket-fence" \
  'http://localhost:8000/v1/documents?uri=/shakespeare/plays/a_and_c.xml&category=metadata&category=content&format=json'

==> The headers that would be returned by a GET request to the
    same URL.

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Connection: close

HTTP/1.1 200 OK
Content-type: multipart/mixed; boundary=picket-fence
Server: MarkLogic
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/documents" http-verb="PUT" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Document Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Insert or update document contents and/or metadata, at a
    caller-supplied document URI.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="string">
      The URI of the document to be created or updated.
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to insert or update. Category may be specified
      multiple times to insert or replace any combination of content and
      metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to update all metadata.
      See the Usage notes below.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The content type of the metadata in the request body. Specifying a format 
      overrides the Content-Type request header value when inserting only
      metadata. For details, see the Usage Notes and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="collection*" type="string">
      The URI of a collection to which to add the document. Use this
      parameter only when the request includes content; see the Usage notes
      for details.
    </apidoc:param>
    <apidoc:param name="quality?" type="string">
      The quality of this document. A positive value increases the 
      relevance score of the document in text search functions. The converse 
      is true for a negative value. The default value is 0. Use this parameter
      only when the request includes content; see the Usage notes for details.
    </apidoc:param>
    <apidoc:param name="perm:{role}*" type="string">
      Assign the document to the listed role, with the permission given in
      the parameter value. For example, <code>perm:editor=update</code>.
      Valid values: <code>read, update, execute</code>. Only the named role
      is changed. Unspecified roles retain their current permissions. Use
      this parameter only when the request includes content; see the Usage
      notes for details.
    </apidoc:param>
    <apidoc:param name="prop:{name}*" type="string">
      Attach the named property to the document, with the given property value.
      For example, <code>prop:decade=70</code>. The property name must be an
      <code>xs:NCName</code>. If the property already exists, its value is 
      replaced. Only the named property is modified. Unspecified properties 
      are unaffected. Use this parameter only when the request includes
      content; see the Usage notes for details.
    </apidoc:param>
    <apidoc:param name="extract?" type="string">
      For binary content, whether or not to extract metadata, and whether to
      store the extracted metadata as properties or in a separate XHTML 
      document. Accepted values: <code>properties</code> or 
      <code>document</code>. See note below.
    </apidoc:param>
    <apidoc:param name="repair?" type="string">
      The type of XML repair to perform on the input content. Accepted values:
      <code>full</code> (default) or <code>none</code>. Use <code>full</code>
      to request the server to repair malformed input XML. Use <code>none</code>      to request the server to reject malformed input XML. If repair results
      in multiple root nodes, the update is rejected.
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a content transformation previously installed via the 
      <code>/transforms</code> service. The service applies the transformation 
      to the content prior to updating or inserting the document or metadata.
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>.
    </apidoc:param>
    <apidoc:param name="forest-name?" type="string">
      Specifies the name of a forest into which this document is inserted.
      If the document already exists in the database, it remains in its 
      existing forest. If no such forest exists or if no such forest is 
      attached to the context database, an error is raised. If the
      document already exists and the forest in which it is stored is 
      set to delete-only, an error is raised.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="lang?" type="string">
      This parameter is deprecated and will be ignored. When ingesting JSON 
      content, this parameter specifies the JSON content language. Accepted 
      values: Any value accepted in the <code>xml:lang</code> attribute.
    </apidoc:param>
    <apidoc:param name="temporal-collection?" type="string">
      Specify the name of a temporal collection into which the documents
      are to be inserted. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2374227'>Managing Temporal Documents</a> in the <em>Temporal Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="system-time?" type="string">
      Set the system start time for the insertion or update. Ignored if
      <code>temporal-collection</code> is not included in the request.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body. See the usage notes
      for details.
    </apidoc:header>
    <apidoc:header name="If-Match?" type="request">
      Specifies a document version identifier that must match the current
      version of the target document for the update to succeed. If the current 
      version of the document does not match, a 412 (Precondition Failed) status
      is returned. A value of 0 indicates the document must not already exist 
      in the database. Ignored unless optimistic locking is enabled; for 
      details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2356659'>Using Optimistic Locking to Update Documents</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with 201 (Created) or
    204 (Updated).
  </apidoc:response>
  <apidoc:usage>
    <p>
     If no permissions are explicitly set, documents you create with the 
     MarkLogic REST API have a read permission for the <code>rest-reader</code>
     role and an update permission for the <code>rest-writer</code> role.
    </p><p>
     You can add or update content and metadata in a single request in two
     ways: Construct a <code>multipart/mixed</code> request with the
     metadata and content in the request body parts, or place the content
     in the request body and specify metadata using the <code>collection</code>,
     <code>quality</code>, <code>perm</code>, and <code>prop</code> request
     parameters. You cannot combine these methods: Metadata request parameters
     are ignored when the request body includes metadata. The metadata request
     parameters are only usable when you also insert or update content.
    </p><p>
     To use a <code>multipart/mixed</code> request to insert/update content 
     and metadata in the same request, put the metadata in the
     first part and specify its content type (XML or JSON) using the
     Content-type header of the part or the <code>format</code> request
     parameter. Put the content in the second part and set the Content-type 
     header on the part to the appropriate MIME type for the content.
    </p><p>
     To add or replace just metadata, specify the metadata in the request
     body and specify its content type (XML or JSON) using the Content-type
     header or the <code>format</code> request parameter. You cannot use 
     the metadata request parameters without content.
    </p><p>
     For metadata values supplied in the request body, use a single XML or
     JSON container, as described in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2311953'>Loading Content into the Database</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     Use <code>category</code> to completely replace a category of metadata.
     For example, <code>category=properties</code> replaces all existing 
     properties of a document. Use the specific metadata parameters to
     selectively modify a metadata category. For example, use
     <code>prop:decade=70</code> to add or modify just the "decade" property.
     Using <code>category=metadata</code> replaces all metadata for 
     the document. Metadata request parameters are ignored when the request 
     body includes metadata.
    </p><p>
     Extracting metadata as properties replaces any existing properties on
     the document. Extracting metadata to a document creates an XHTML document
     that differs from the input document only by having a <code>xhtml</code>
     file name extension. If CPF is installed in the database, the XHTML
     document includes a link to the binary document. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/binary-document-metadata.xml%2367182'>Extracting Metadata and Text From Binary Documents</a> in the <em>Search Developer's Guide</em>.
    </p><p>
     When updating document permissions, the permissions must include at least
     one update permission.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2311953'>Loading Content into the Database</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -T ./my-content -i \
  -H "Content-type: application/xml" \
  http://localhost:8000/v1/documents?uri=/shakespeare/plays/a_and_c.xml

==> If a document already exists with URI /shakespeare/plays.a_and_c.xml,
    the document contents are updated with the contents of the file
    ./my-content, and the following headers are returned:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 100 Continue

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: close

==> If a document does not already exist with URI 
    /shakespeare/plays/a_and_c.xml, a new document in created with
    that URI, and the following headers are returned:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 100 Continue

HTTP/1.1 201 Document Created
Location: /shakespeare/plays/a_and_c.xml
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/documents?uri={db-uri}" http-verb="POST" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Document Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Perform a partial update to content or metadata of a document at a
    caller-specified URI. This operation is equivalent to 
    <code>PATCH /v1/documents</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="string">
      The URI of the document whose content or metadata is being updated. 
      Required.
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to insert or update. Category may be specified
      multiple times to insert or replace any combination of content and
      metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to update all metadata.
      See the Usage notes below.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The content type of the patch specification and any metadata in the
      request body. Specifying <code>format</code> overrides the
      Content-type header if the Content-type header does not map to a MIME
      type equivalent to XML or JSON. Allowed values: <code>xml</code>,
      <code>json</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body. See the Usage Notes
      for details.
    </apidoc:header>
    <apidoc:header name="If-Match?" type="request">
      Specifies a document version identifier that must match the current
      version of the target document for the update to succeed. If the current 
      version of the document does not match, a 412 (Precondition Failed) status
      is returned. A value of 0 indicates the document must not already exist 
      in the database. Ignored unless optimistic locking is enabled; for 
      details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2356659'>Using Optimistic Locking to Update Documents</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="X-HTTP-Method-Override" type="request">
      This header signals that this request is a partial update to document
      content or metadata. You must include this header and it must have
      a value of <code>PATCH</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with 201 (Document Created) or
    204 (Updated or Unchanged).
  </apidoc:response>
  <apidoc:usage>
    <p>
     Use this form of <code>POST /v1/documents</code> to update a portion
     of the content and/or metadata for an existing document at a 
     caller-supplied URI. For all other document and metadata creation and 
     update operations, use <code>PUT /v1/documents</code> or one of the
     other forms of <code>POST /v1/documents</code>.
    </p><p>
     You can also use a PATCH request to apply a partial update. For details,
     see <code>PATCH /v1/documents</code>. The functionality and request
     body contents are the same.
    </p><p>
     For details on this feature, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2315775'>Partially Updating Document Content or Metadata</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     To perform a partial update of content and/or metadata, specify the
     document URI using the <code>uri</code> parameter, set the 
     <code>category</code> parameter to reflect the content and/or metadata 
     to be modified, and set the request header 
     <code>X-HTTP-Method-Override</code> to <code>PATCH</code>. The
     request body must be a JSON or XML patch specification. 
    </p><p>
     You can only apply partial updates of content to XML and JSON
     documents. You can apply partial updates of metadata to any document type.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./my-patch.xml
<rapi:patch xmlns:rapi="http://marklogic.com/rest-api" 
    xmlns:my-ns="http://marklogic.com/examples">
  <rapi:insert context="/my-ns:parent" position="last-child">
    <my-ns:child>inserted</my-ns:child>
  </rapi:insert>
</rapi:patch>

curl --anyauth --user user:password -X POST -d@'./my-patch.xml' -i \
  -H "Content-type: application/xml" -H "X-HTTP-Method-Override: PATCH" \
  'http://localhost:8000/v1/documents?uri=/doc/example.xml'

==> Perform a partial update on the document with URI /doc/example.xml.
    A <child/> element is added as the last child of the node with
    the XPath /my-ns:parent. MarkLogic Server responds with headers
    similar to the following:

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./my-patch.json
{ "patch": [
    { "insert": {
          "context": "/parent",
          "position": "last-child",
          "content": { "child": "inserted" }
    }}
] }

curl --anyauth --user user:password -X POST -d@'./my-patch.json' -i \
  -H "Content-type: application/json" -H "X-HTTP-Method-Override: PATCH" \
  'http://localhost:8000/v1/documents?uri=/doc/example.json'

==> Perform a partial update on the document with URI /doc/example.json.
    A key-value pair with key 'child' is added as the last child of the 
    top level 'parent' key.  MarkLogic Server responds with headers
    similar to the following:

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/documents?extension={ext}" http-verb="POST" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Document Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create a new document with a server-generated database URI.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="extension" type="string">
      Specifies a URI extension to use when the document URI is generated
      by MarkLogic Server. The generated URI will end with "." plus this
      extension. This parameter is required.
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to insert or update. Category may be specified
      multiple times to insert or replace any combination of content and
      metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to update all metadata.
      See the Usage notes below.
    </apidoc:param>
    <apidoc:param name="directory?" type="string">
      Specifies a directory prefix to use when the document URI is generated
      by MarkLogic Server. If an <code>extension</code> parameter is 
      present and there is no <code>directory</code> parameter, then no 
      directory prefix is included in the generated URI. If the request 
      includes a <code>directory</code> parameter, it must also include 
      an <code>extension</code> parameter. 
      You cannot use this parameter with the <code>uri</code> parameter.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The content type of the metadata in the request body. Specifying a format 
      overrides the Content-Type request header value when inserting only
      metadata. For details, see the Usage Notes and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      This parameter only affects metadata, not document content.
    </apidoc:param>
    <apidoc:param name="collection*" type="string">
      The URI of a collection to which to add the document. Use this
      parameter only when the request includes content; see the Usage notes
      for details. 
    </apidoc:param>
    <apidoc:param name="quality?" type="string">
      The quality of this document. A positive value increases the 
      relevance score of the document in text search functions. The converse 
      is true for a negative value. The default value is 0. Use this parameter
      only when the request includes content; see the Usage notes for details.
    </apidoc:param>
    <apidoc:param name="perm:{role}*" type="string">
      Assign the document to the listed role, with the permission given in
      the parameter value. For example, <code>perm:editor=update</code>.
      Valid values: <code>read, update, execute</code>. Only the named role
      is changed. Unspecified roles retain their current permissions. Use
      this parameter only when the request includes content; see the Usage
      notes for details.
    </apidoc:param>
    <apidoc:param name="prop:{name}*" type="string">
      Attach the named property to the document, with the given property value.
      For example, <code>prop:decade=70</code>. The property name must be an
      <code>xs:NCName</code>. If the property already exists, its value is 
      replaced. Only the named property is modified. Unspecified properties 
      are unaffected. Use this parameter only when the request includes
      content; see the Usage notes for details. 
    </apidoc:param>
    <apidoc:param name="extract?" type="string">
      For binary content, whether or not to extract metadata, and whether to
      store the extracted metadata as properties or in a separate XHTML 
      document. Accepted values: <code>properties</code> or 
      <code>document</code>. See note below.
    </apidoc:param>
    <apidoc:param name="repair?" type="string">
      The type of XML repair to perform on the input content. Accepted values:
      <code>full</code> (default) or <code>none</code>. Use <code>full</code>
      to request the server to repair malformed input XML. Use <code>none</code>      to request the server to reject malformed input XML. If repair results
      in multiple root nodes, the update is rejected. 
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a content transformation previously installed via the 
      <code>/transforms</code> service. The service applies the transformation 
      to the content prior to updating or inserting the document or metadata.
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>. 
    </apidoc:param>
    <apidoc:param name="forest-name?" type="string">
      Specifies the name of a forest into which this document is inserted.
      If the document already exists in the database, it remains in its 
      existing forest. If no such forest exists or if no such forest is 
      attached to the context database, an error is raised. If the
      document already exists and the forest in which it is stored is 
      set to delete-only, an error is raised.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="lang?" type="string">
      This parameter is deprecated and will be ignored if present.
      When ingesting JSON content, this parameter specifies the JSON 
      content language. Accepted values:
      Any value accepted in the <code>xml:lang</code> attribute. 
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body. See the usage notes
      for details.
    </apidoc:header>
    <apidoc:header name="Location?" type="response">
      If the request successfully creates a new document with a server
      assigned URI, then the <code>Location</code> contains a reference
      to the /documents service that you can use to retrieve the new
      document. That is, a reference of the following form is returned:
      <code>/v1/documents?uri=generated-uri</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with 201 (Document Created) or
    204 (Updated or Unchanged).
  </apidoc:response>
  <apidoc:usage>
    <p>
     Use this form of <code>POST /v1/documents</code> to create a new
     document with a server-generated URI. The request can optionally
     include metadata. For all other document and metadata creation or
     update operations, see <code>PUT /v1/documents</code> or the other
     forms of <code>POST /v1/documents</code>.
    </p><p>
     To create a new document with a server-assigned URI:
    </p><ul>
     <li>Specify a URI extension using the <code>extension</code> parameter.</li>
     <li>Optionally, specify a directory prefix using the 
      <code>directory</code> parameter.</li>
     <li>Include <code>content</code> as one of the <code>category</code> 
       parameter values.</li>
    </ul><p>
     The request body must be either the document content or a multi-part
     message that includes both metadata and content, as described below.
     The server-generated URI is returned in the <code>Location</code>
     response header.
    </p><p>
     You can create content and metadata in a single request in two
     ways: 
    </p><ul>
     <li>Construct a <code>multipart/mixed</code> request with the
       metadata and content in the request body parts.</li>
     <li>Place the content in the request body and specify metadata using 
       the <code>collection</code>, <code>quality</code>, <code>perm</code>, 
       and <code>prop</code> request parameters.</li>
     </ul><p>
     You cannot combine these methods: Metadata request parameters
     are ignored when the request body includes metadata. You cannot insert
     metadata without also inserting content.
    </p><p>
     When using a <code>multipart/mixed</code> request to insert content 
     and metadata in the body of a single request, put the metadata in the
     first part and specify its content type (XML or JSON) using the
     Content-type header of the part or the <code>format</code> request
     parameter. Put the content in the second part and set the Content-type 
     header the appropriate MIME type for the content.
    </p><p>
     When including metadata in the request body, supply metadata specified
     in <code>category</code> parameters in a single XML or JSON container. 
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2311953'>Loading Content into the Database</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     For a binary document, extracting metadata as properties replaces 
     any existing properties on the document. Extracting metadata to a 
     document creates an XHTML document
     that differs from the input document only by having a <code>xhtml</code>
     file name extension. If CPF is installed in the database, the XHTML
     document includes a link to the binary document. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/binary-document-metadata.xml%2367182'>Extracting Metadata and Text From Binary Documents</a> in the <em>Search Developer's Guide</em>.
    </p><p>
     If no permissions are explicitly set, documents you create with the 
     MarkLogic REST API have a read permission for the <code>rest-reader</code>
     role and an update permission for the <code>rest-writer</code> role.
    </p><p>
     When updating document permissions, the permissions must include at least
     one update permission.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2311953'>Loading Content into the Database</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X POST -d@'./my-content' -i \
  -H "Content-type: application/xml" \
  'http://localhost:8000/v1/documents?extension=xml&directory=/plays/'

==> Create a document from the XML in ./my-content, with a server
    generated URI. The URI is rooted at the directory "/plays/" and
    has an ".xml" suffix. The generated URI is returned in the Location
    response header. MarkLogic Server returns a response similar to 
    the following:

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 201 Document Created
Location: /plays/14993128029398656352.xml
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/documents" http-verb="POST" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Document Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Insert or update content and/or metadata for multiple documents in
    a single request.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a content transformation previously installed via the 
      <code>/transforms</code> service. Tranforms are applied only to
      content parts. The transform is applied to the content of a part
      prior to updating or inserting the document.
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>. 
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="temporal-collection?" type="string">
      Specify the name of a temporal collection into which the documents
      are to be inserted. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2374227'>Managing Temporal Documents</a> in the <em>Temporal Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="system-time?" type="string">
      Set the system start time for the insertion or update. Ignored if
      <code>temporal-collection</code> is not included in the request.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body or of a part. 
      The Content-Type header for the request must be
      <code>multipart/mixed</code>. Each part must include a Content-Type 
      header specifying the MIME type of the part. See the Usage Notes
      for accepted values for the Content-Type of a part.
    </apidoc:header>
    <apidoc:header name="Content-Disposition" type="request">
      Each part must include a <code>Content-Disposition</code> that indicates
      the part type (content or metadata) and the document uri, and can
      contain additional options. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2354649'>Writing Multiple Documents</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Accept" type="request">
      The expected MIME type of the data in the response. Allowed values:
      <code>application/xml</code>, <code>application/json</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with 200 (OK) and the data in
    the response body is an XML or JSON summary of the inserted or updated
    documents. The returned data is sufficient to construct a read request
    for each document. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2325936'>Response Overview</a> in the <em>REST Application Developer's Guide</em>. 
  </apidoc:response>
  <apidoc:usage>
    <p>
     Use this request to insert or update multiple documents in a single
     request. For single-document operations, see
     <code>PUT /v1/documents</code> and other forms of 
     <code>POST /v1/documents</code>.
    </p><p>
     These notes provide only a brief overview of the supported features.
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2354649'>Writing Multiple Documents</a> in the <em>REST Application Developer's Guide</em>. 
    </p><p>
     The multipart POST body can contain a mixture of document content and 
     metadata. Each part must contain either content or metadata, indicated
     by use of the <code>category</code> parameter in the 
     <code>Content-Disposition</code> part header. Metadata can apply to 
     a specific document or multiple documents, depending on
     the content disposition.
    </p><p>
     You can insert or update a document at a known URI or at a server
     generated URI. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2333756'>Constructing a Content Part</a> in the <em>REST Application Developer's Guide</em>.
     You cannot use server URI generation with a metadta part.
    </p><p>
     The Content-Disposition header can include the parameters listed
     below. You must include either <code>inline</code> or 
     <code>attachment</code>. Other parameters depend on the type of part
     (content, request default metadata, document-specific metadata, etc.).
    </p>
    <table>
      <tr><th>Parameter</th><th>Description</th></tr>
      <tr>
        <td>inline</td>
        <td>
          The part contains either content for a document with a server
          generated URI or request default metadata. Use the 
          <code>category</code> parameter to distinguish content from metadata.
          If this is a content part, you must also include 
          <code>extension</code>. If this is a metadata part, you must not
          include <code>extension</code>. Use the
          <code>category</code> parameter to distinguish content from metadata.
        </td>
      </tr><tr>
        <td>attachment</td>
        <td>
          The part contains either content or metadata for a document with 
          a specific URI (provided using <code>filename</code>). Use the
          <code>category</code> parameter to distinguish content from metadata.
        </td>
      </tr><tr>
        <td>filename=<em>db-uri</em></td>
        <td>
          Specifies an explicit document URI. Use <code>extension</code>
          to have MarkLogic Server generate a URI instead. For a given part,
          <code>filename</code> and <code>extension</code> are mutually
          exclusive.
        </td>
      </tr><tr>
        <td>category=metadata</td>
        <td>Indicates that the part contains metadata.</td>
      </tr><tr>
        <td>extension=<em>suffix</em></td>
        <td>
          Specifies a URI extension to use when the document URI is generated
          by MarkLogic Server. The generated URI will end with "." plus this
          extension. For a given part, <code>filename</code> and 
          <code>extension</code> are mutually exclusive. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2386768'>Automatically Generating a Document URI</a> in the <em>REST Application Developer's Guide</em>. 
        </td>
      </tr><tr>
        <td>directory=<em>path</em></td>
        <td>
          Specifies a directory prefix to use when the document URI is generated
          by MarkLogic Server. The directory prefix must end with "/".
          If the part header includes a <code>directory</code> parameter, it 
          it must also include an <code>extension</code> parameter. 
          For a given part, <code>filename</code> and <code>directory</code> 
          are mutually exclusive. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2386768'>Automatically Generating a Document URI</a> in the <em>REST Application Developer's Guide</em>. 
        </td>
      </tr><tr>
        <td>lang=<em>language</em></td>
        <td>
          For a JSON content part, this parameter specifies the JSON 
          content language. Allowed values: Any value accepted in the 
          <code>xml:lang</code> attribute. 
        </td>
      </tr><tr>
        <td>repair=<em>level</em></td>
        <td>
          For an XML content part, the level of XML repair to perform.
          Allowed values: <code>full</code> (default) or <code>none</code>. Use 
          <code>full</code> to request the server to repair malformed input 
          XML. Use <code>none</code> to request the server to reject malformed 
          input XML. If repair results in multiple root nodes, the update is 
          rejected.
        </td>
      </tr><tr>
        <td>extract=<em>properties-or-document</em></td>
        <td>
          For a binary content part, whether or not to extract metadata, and
          whether to store the extracted metadata as document properties or 
          in a separate XHTML document. Allowed values: <code>properties</code>
          or <code>document</code>. See note below.
        </td>
      </tr><tr>
        <td>versionId=<em>id</em></td>
        <td>
          When optimistic locking is enabled by setting the REST instance
          configuration property <code>update-policy</code> to
          <code>version-required</code> or <code>version-optional</code>,
          reject this request if the current version of this document does
          not match the version in <code>versionId</code>. Only applicable
          to content parts. Ignored if optimistic locking is not enabled.
          This option is equivalent to supplying a version id through the
          If-Match header of a single document update.
          For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2356659'>Using Optimistic Locking to Update Documents</a> in the <em>REST Application Developer's Guide</em>.
        </td>
      </tr>
    </table>
    <p>
     With the exception of properties, any pre-existing metadata for 
     documents updated by a multi-document write is replaced with either
     the metadata in the request or the in scope metadata defaults. For
     details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2388873'>Constructing a Metadata Part</a> in the <em>REST Application Developer's Guide</em>. 
    </p><p>
     Extracting metadata for a binary content part as properties replaces 
     any existing properties on
     the document. Extracting metadata to a document creates an XHTML document
     that differs from the input document only by having a <code>xhtml</code>
     file name extension. If CPF is installed in the database, the XHTML
     document includes a link to the binary document. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/binary-document-metadata.xml%2367182'>Extracting Metadata and Text From Binary Documents</a> in the <em>Search Developer's Guide</em>.
    </p><p>
     If no permissions are explicitly set, documents you create with the 
     MarkLogic REST API have a read permission for the <code>rest-reader</code>
     role and an update permission for the <code>rest-writer</code> role.
     If you explicitly set permissions, the permissions must include at least
     one update permission.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2354649'>Writing Multiple Documents</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
NOTE: Do not attempt to cut-and-paste this example body. A multipart
body must contain control characters that are not preserved when you
cut-and paste. See "Generating Example Payloads with XQuery" in the
REST Application Developer's Guide for one alternative.

$ cat body
--BOUNDARY
Content-Type: application/xml
Content-Disposition: inline; category=metadata
Content-Length: 554

<?xml version="1.0" encoding="UTF-8"?>
<rapi:metadata xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:quality>1</rapi:quality>
  <prop:properties xmlns:prop="http://marklogic.com/xdmp/property">
    <my-prop>my first property</my-prop>
  </prop:properties>
  <rapi:collections>
    <rapi:collection>my-first-coll</rapi:collection>
  </rapi:collections>
  <rapi:permissions>
    <rapi:permission>
      <rapi:role-name>readers</rapi:role-name>
      <rapi:capability>read</rapi:capability>
    </rapi:permission>
  </rapi:permissions>
</rapi:metadata>
--BOUNDARY
Content-Type: application/xml
Content-Disposition: attachment; filename="doc1.xml"
Content-Length: 60

<?xml version="1.0" encoding="UTF-8"?>
<root>some xml</root>
--BOUNDARY
Content-Type: application/json
Content-Disposition: attachment; filename="doc2.json"
Content-Length: 22

{ "key": "some json" }
--BOUNDARY
Content-Type: application/xml
Content-Disposition: attachment; filename="doc3.xml"
Content-Length: 60

<?xml version="1.0" encoding="UTF-8"?>
<root>some xml</root>
--BOUNDARY--

curl --anyauth --user user:password -X POST -i \
  --data-binary @body \
  -H "Content-type: multipart/mixed; boundary=BOUNDARY" 
  -H "Accept: application/json" 'http://localhost:8000/v1/documents'

==> Insert 3 documents into the database, doc1.xml, doc2.json, and
    doc3.xml. All three documents use the request default metadata
    provided in the first part. For more examples, see the REST
    Application Developer's Guide. MarkLogic Server returns a response
    similar to the following:

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 169
Connection: Keep-Alive
Keep-Alive: timeout=5

{ "documents": [
    { "uri": "doc1.xml",
      "mime-type": "application/xml",
      "category": [
        "metadata",
        "content"
      ]
    },
    { "uri": "doc2.json",
      "mime-type": "application/json",
      "category": [
        "metadata",
        "content"
      ]
    },
    { "uri": "doc3.xml",
      "mime-type": "application/xml",
      "category": [
        "metadata",
        "content"
      ]
    }
] }

If you set the Accept header to application/XML, the data in the 
response is similar to the following:

<rapi:documents xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:document>
    <rapi:uri>doc1.xml</rapi:uri>
    <rapi:category>metadata</rapi:category>
    <rapi:category>content</rapi:category>
    <rapi:mime-type>application/xml</rapi:mime-type>
  </rapi:document>
  <rapi:document>
    <rapi:uri>doc2.json</rapi:uri>
    <rapi:category>metadata</rapi:category>
    <rapi:category>content</rapi:category>
    <rapi:mime-type>application/json</rapi:mime-type>
  </rapi:document>
  <rapi:document>
    <rapi:uri>doc3.xml</rapi:uri>
    <rapi:category>metadata</rapi:category>
    <rapi:category>content</rapi:category>
    <rapi:mime-type>application/xml</rapi:mime-type>
  </rapi:document>
</rapi:documents>
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/documents" http-verb="PATCH" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Document Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Perform a partial update to content or metadata of a document.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="string">
      The URI of the document to be updated. 
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to insert or update. Category can be specified
      multiple times to insert or replace any combination of content and
      metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to update all metadata.
      Default: <code>content</code>.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The content type of the patch specification and any metadata in the
      request body. Specifying <code>format</code> overrides the
      Content-type header if the Content-type header does not map to a MIME
      type equivalent to XML or JSON. Allowed values: <code>xml</code>,
      <code>json</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body. See the usage notes
      for details on special handling for XML, JSON, and binary content.
    </apidoc:header>
    <apidoc:header name="If-Match?" type="request">
      Specifies a document version identifier that must match the current
      version of the target document for the update to succeed. If the current 
      version of the document does not match, a 412 (Precondition Failed) status
      is returned. A value of 0 indicates the document must not already exist 
      in the database. Ignored unless optimistic locking is enabled; for 
      details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2356659'>Using Optimistic Locking to Update Documents</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with 204 (Content Updated).
  </apidoc:response>
  <apidoc:usage>
    <p>
     If using the PATCH method is problematic in your environment, you can
     use POST instead. For details, see <code>POST /v1/documents</code>.
    </p><p>
     To perform a partial update of content and/or metadata for an existing 
     document, specify the document URI using the <code>uri</code> parameter
     and set the <code>category</code> parameter to reflect what to update,
     if needed. The request body must be a JSON or XML patch specification.
    </p><p>
     For details on this feature, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2315775'>Partially Updating Document Content or Metadata</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     You can only apply partial updates of content to XML and JSON
     documents. You can apply partial updates of metadata to any document type.
    </p><p>
     When updating document permissions, the permissions must include at least
     one update permission.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2311953'>Loading Content into the Database</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./my-patch.xml
<rapi:patch xmlns:rapi="http://marklogic.com/rest-api" 
    xmlns:my-ns="http://marklogic.com/examples">
  <rapi:insert context="/my-ns:parent" position="last-child">
    <my-ns:child>inserted</my-ns:child>
  </rapi:insert>
</rapi:patch>

curl --anyauth --user user:password -X PATCH -d@'./my-patch.xml' -i \
  -H "Content-type: application/xml" \
  'http://localhost:8000/v1/documents?uri=/doc/example.xml'

==> Perform a partial update on the document with URI /doc/example.xml.
    A <child/> element is added as the last child of the node with
    the XPath /my-ns:parent. MarkLogic Server responds with headers
    similar to the following:

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 204 Content Updated
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./my-patch.json
{ "patch": [
    { "insert": {
          "context": "/parent",
          "position": "last-child",
          "content": { "child": "inserted" }
    }}
] }

curl --anyauth --user user:password -X PATCH -d@'./my-patch.json' -i \
  -H "Content-type: application/json" \
  'http://localhost:8000/v1/documents?uri=/doc/example.json'

==> Perform a partial update on the document with URI /doc/example.json.
    A key-value pair with key 'child' is added as the last child of the 
    top level 'parent' key.  MarkLogic Server responds with headers
    similar to the following:

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/documents" http-verb="DELETE" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Document Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   Remove documents, or reset document metadata.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri+" type="string">
      The URI of a document to delete or for which to remove metadata.
      You can specify multiple documents.
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to remove/reset. Category may be specified
      multiple times to remove or reset any combination of content and
      metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to reset all metadata.
      See the Usage notes below.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="temporal-collection?" type="string">
      Specify the name of a temporal collection that contains the document(s)
      to be deleted. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/temporal/managing.xml%2374227'>Managing Temporal Documents</a> in the <em>Temporal Developer's Guide</em>.
      Applies to all documents when deleting more than one.
    </apidoc:param>
    <apidoc:param name="system-time?" type="string">
      Set the system start time for the insertion or update. Ignored if
      <code>temporal-collection</code> is not included in the request.
      Applies to all documents when deleting more than one.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="If-Match?" type="request">
      Not supported when deleting multiple documents. When deleting a single 
      document, this header pecifies a document version identifier that must 
      match the current version of the target document for the delete to 
      succeed. If the current version of the document does not match, a 
      412 (Precondition Failed) status is returned. A value of 0 indicates 
      the document must not already exist in the database. Ignored unless 
      optimistic locking is enabled; for details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2356659'>Using Optimistic Locking to Update Documents</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 204 (Document Deleted) or 
    204 (Metadata Reset).
  </apidoc:response>
  <apidoc:usage>
   <p>
    Removing content also removes all metadata for the document.
   </p><p>
    Removing a binary document also removes extracted metadata stored in
    a separate XHTML document. See
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/binary-document-metadata.xml%2367182'>Extracting Metadata and Text From Binary Documents</a> in the <em>Search Developer's Guide</em>.
   </p><p>
    Sending a DELETE request for permissions metadata resets the permissions
    to the default for the current user.
   </p><p>
    Sending a DELETE request for quality resets the content quality to
    the default value (0).
   </p><p>
     When you specify multiple URIs, the entire request fails if an error
     occurs for any one document. If a document does not exist, that 
     URI is silently ignored, rather than causing an error. Optimistic
     locking is not supported when you specify multiple URIs.
   </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2355846'>Removing Documents from the Database</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X DELETE -i \
  http://localhost:8000/v1/documents?uri=/shakespeare/plays/a_and_c.xml

==> The document with URI /shakespeare/plays/a_and_c.xml is removed.
    The following headers are returned:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 204 Document Deleted
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X DELETE -i \
  'http://localhost:8000/v1/documents?uri=foo.xml&uri=bar.xml&category=collections'

==> The collections metadata is reset for the documents foo.xml and bar.xml.
    The response looks similar to the following:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: Keep-Alive

HTTP/1.1 204 Metadata Reset
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
  ]]></pre></apidoc:example>
</apidoc:function>


<!-- ************ Service Management ************ -->

<apidoc:function name="/v1/rest-apis" http-verb="GET"  
                 lib="rest-client" category="Client API"
                 bucket="REST Resources API" subcategory="Service Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   Retrieve a list of REST API instances, including configuration details.
   This request is only available on port 8002.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Limit the results to services connected to the named database.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      Specifies the type of the response content, as an alternative to
      specifying format via the Accept header. Accepted values:
      <code>json</code> and <code>xml</code>. If there is no
      format parameter, the format must be specified in the Accept header.
    </apidoc:param>
    <apidoc:param name="group?" type="string">
      The name of a Group in a MarkLogic Server cluster. If no group is
      specified, information is returned for all groups.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
     Specifies the MIME type of the response content. The only 
     supported types are <code>application/json</code> and 
     <code>application/xml</code> (default). The type can also be specified
     through the <code>format</code> parameter.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 200 OK and configuration
    details on all REST API instances, in XML or JSON.
  </apidoc:response>
  <apidoc:usage>
    If no instances are configured, MarkLogic Server returns an empty
    &lt;rest-apis&gt; node.
    <p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2352686'>Retrieving Configuration Information</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i -H "Accept: application/xml" \
  http://localhost:8002/v1/rest-apis

==> Information about configured REST services, in XML:

Content-type: text/html; charset=UTF-8
Server: MarkLogic
Content-Length: 1992
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 108
Connection: close

<rapi:rest-apis xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:rest-api>
    <rapi:name>my-service</rapi:name>
    <rapi:group>Default</rapi:group>
    <rapi:database>my-database</rapi:database>
    <rapi:modules>my-service-modules</rapi:database>
    <rapi:port>8003</rapi:port>
  </rapi:rest-rapi:api>
</rapi:rest-apis>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -i -X GET -H "Accept: application/json" \
  http://localhost:8002/v1/rest-apis

==> Information about configured REST services, in JSON:

HTTP/1.1 200 OK
vnd.marklogic.document-format: json
Content-type: application/json; charset=UTF-8
Server: MarkLogic
Connection: close

{
  "rest-apis": [
    {
      "name": "my-service",
      "group": "Default",
      "database": "my-database",
      "modules": "my-service-modules",
      "port": "8003"
    }
  ]
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/rest-apis" http-verb="POST" 
                  lib="rest-client" category="Client API"
                 bucket="REST Resources API" subcategory="Service Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create an instance of the MarkLogic REST API, including an
    HTTP app server, required modules, and optionally a content database.
    This request is only available on port 8002.
  </apidoc:summary>
  <apidoc:headers>
    <apidoc:header name="Content-Type" type="request">
     The MIME type of the service configuration information in the request
     body. Accepted types: <code>application/json</code> or 
     <code>application/xml</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 201 (Created).
  </apidoc:response>
  <apidoc:usage>
    <p>
     The POST body must contain App Server configuration information.
     Only the <code>name</code> property is required. Additional properties
     include <code>modules-database</code>, <code>group</code>, 
     <code>port</code>, and <code>database</code>. For a complete list of
     available configuration properties, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2312021'>Creating an Instance</a> in the <em>REST Application Developer's Guide</em>.
     Use the Admin Interface for additional instance configuration.
     See the Examples, below, for configuration syntax.
    </p><p>
     You can specify an existing database or create a new database as part
     of the instance creation. The default instance database is determined
     as follows:
    </p>
    <ul>
      <li>
       If the configuration in the POST body includes the name of an 
       existing database, that database is associated with the instance.
      </li><li>
       If the configuration in the POST body includes the name of a
       database that does not exist, MarkLogic Server creates a new database
       with that name.
      </li><li>
       If the configuration in the POST body does not include the name of
       a database, MarkLogic Server attempts to create a database with the
       same name as the instance. If a database with that name already exists,
       a numeric suffix is appended to the new database name. For example, if
       you create an instance named PreExisting and a database already
       exists with the name PreExisting, then the database PreExisting-1
       is created and associated with the instance.
      </li>
    </ul>
    <p>
     If MarkLogic Server creates the database, forests are also
     created and attached to the database. The forest name is the same as
     the database name, with a numeric suffix. For example, "my-database-1".
     The number of forest depends on the <code>forests-per-host</code> 
     configuration setting. The default is 3 forests.
    </p><p>
     If no port number is specified, MarkLogic Server uses the next available 
     port above 8002, beginning with 8003. MarkLogic Server returns 400 (Bad
     Request) if an explicitly specified port is already in use.
    </p><p>
     If no group name is specified, MarkLogic Server uses the current
     context group.
    </p><p>
     For details on the meaning of these configuration settings, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/configure.xml%2318698'>Creating and Configuring App Servers</a> in the <em>Scripting Administrative Tasks Guide</em>.
    </p><p>
     The POST body takes the following form when <code>Content-Type</code> 
     is <code>application/xml</code>. Only <code>name</code> is required.
     Only <code>name</code> is required.
    </p>
    <code><pre xml:space="preserve"><![CDATA[  
<rapi:rest-api xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:name>app-server-name</rapi:name>
  <rapi:group>group-name</rapi:group>
  <rapi:database>database-name</rapi:database>
  <rapi:modules-database>modules-database-name</rapi:modules-database>
  <rapi:port>1234</rapi:port>
  <rapi:xdbc-enabled>true</rapi:xdbc-enabled>
  <rapi:forests-per-host>3</rapi:forests-per-host>
  <rapi:error-format>json</rapi:error-format>
</rapi:rest-api>
    ]]></pre></code>
    <p>
     The POST body takes the following form when <code>Content-Type</code> 
     is <code>application/json</code>. Only <code>name</code> is required.
    </p>
    <code><pre xml:space="preserve"><![CDATA[  
{
  "rest-api": {
    "name": "app-server-name",
    "group": "group-name",
    "database": "database-name",
    "modules-database": "modules-database-name",
    "port": "1234",
    "xdbc-enabled": true,
    "forests-per-host": 3,
    "error-format": "json"
  }
}
    ]]></pre></code>
    <p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2312021'>Creating an Instance</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat > svc-config
<rest-api xmlns="http://marklogic.com/rest-api">
  <name>my-service</rapi:name>
  <database>my-database</rapi:database>
  <port>8003</port>
</rest-api>
$ curl --anyauth --user user:password -X POST -d@'./svc-config' -i \
  -H "Content-type: application/xml" \
  http://localhost:8002/v1/rest-apis

==> A new REST service named "my-service" is created, listening
    on port 8003, serving the content in the "my-database" database. 
    MarkLogic Server returns the following headers in the response:

Server: MarkLogic
Content-Length: 1992
Connection: close

HTTP/1.1 201 Created
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/rest-apis/{name}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API"
                 bucket="REST Resources API" subcategory="Service Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve configuration information about an App Server servicing the
    MarkLogic REST API.  This request is only available on port 8002.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      Specifies the type of the response content, as an alternative to
      specifying format via the Accept header. Accepted values:
      <code>json</code> and <code>xml</code>. The <code>format</code> 
      parameter takes precedence over the Accept headers.
    </apidoc:param>
    <apidoc:param name="group?" type="string">
      The name of a MarkLogic Server cluster Group. Use this parameter to
      disambiguate the instance when multiple Groups contain an instance
      with the same name.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
     The expected MIME type of the configuration information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 200 (OK) and the instance
    configuration details.
  </apidoc:response>
  <apidoc:usage>
    <p>
     You may only make this request against port 8002.
    </p>
    <p>
     The <em>name</em> component of the request URI should be the name of
     an MarkLogic REST API instance created by making a POST request to 
     <code>/v1/rest-apis</code>, or via Application Builder. For details,
     see "POST /v1/rest-apis".
    </p><p>
     If more than one group contains an instance (or App Server) with the
     requested name and you do not supply a <code>group</code> parameter,
     MarkLogic Server returns 400 (Bad Request).
    </p><p>
     The response contains the App Server configuration information
     for <em>name</em>, as either JSON or XML.  For details on the meaning 
     of the fields, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/adminAPI/configure.xml%2318698'>Creating and Configuring App Servers</a> in the <em>Scripting Administrative Tasks Guide</em>.
    </p><p>
     Specify the expected response content type using either the
     <code>format</code> parameter or <code>Accept</code> header. If you supply
     both, the <code>format</code> parameter takes precedence. If you specify
     neither, XML is returned.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2352686'>Retrieving Configuration Information</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i -H "Accept: application/xml" \
  http://localhost:8002/v1/rest-apis/my-service

==> Information about the rest service named "my-service", in XML:

Content-type: text/html; charset=UTF-8
Server: MarkLogic
Content-Length: 2001
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 85
Connection: close

<rapi:rest-api xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:name>my-service</rapi:name>
  <rapi:group>Default</rapi:group>
  <rapi:database>my-database</rapi:database>
  <rapi:modules-database>my-service-modules</rapi:modules>
  <rapi:port>8003</rapi:port>
</rapi:rest-api>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i \
  -H "Accept: application/json" \
  http://localhost:8002/v1/rest-apis/my-service

==> Information about the rest service named "my-service", in JSON:

Server: MarkLogic
Content-Length: 2004
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 115
Connection: close

{
  "name": "my-service",
  "group": "Default",
  "database": "bill",
  "modules-database": "my-service-modules",
  "port": "8003"
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/rest-apis/{name}" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" 
                 bucket="REST Resources API" subcategory="Service Management"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove an HTTP App Server servicing the MarkLogic REST API.
    Optionally, also remove the attached database and forests.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="include*" type="string">
      Indicates that the content and/or modules database should also be
      removed. Accepted values: <code>content</code>, <code>modules</code>.
    </apidoc:param>
    <apidoc:param name="group?" type="string">
      The name of a MarkLogic Server cluster Group. Use this to disambiguate
      the instance when more than one Group contains an instance or App
      Server with the same name.
    </apidoc:param>
  </apidoc:params>
  <apidoc:response>
    Upon success, MarkLogic Server return status 202 (Appserver deleted).
    The response body contains XML configuration information that you can 
    use with the REST management API to confirm removal of all related 
    resources.
  </apidoc:response>
  <apidoc:usage>
    <p>
     <b>NOTE:</b> This request causes a MarkLogic Server restart.
    </p><p>
     <b>NOTE:</b> If you use the <code>include</code> parameter to tear 
     down the content database and/or the modules database, any data in
     the removed database is lost.
    </p><p>
     The <em>name</em> component of the request URI should be the name of
     an HTTP App Server created by making a POST request to 
     <code>/rest-apis</code>. See "POST /v1/rest-apis".
    </p><p>
     It may not be possible to remove all requested resource. For example,
     if you include the content database (<code>include=content</code>)
     and the database is in use by another App Server, it will not be deleted.
     The request returns 202 (Appserver deleted) in all cases and provides
     additional configuration information that you can use with the REST
     Management API to confirm removal if necessary. To learn more, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/monitoring/monitoringAPI.xml%2332500'>Using the Management API</a> in the <em>Monitoring MarkLogic Guide</em>.
    </p><p>
     If you do not include a <code>group</code> parameter and there is
     more than one instance or App Server in the cluster with the requested
     name, MarkLogic Server returns status 400 (Bad Request).
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2325400'>Removing an Instance</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X DELETE -i \
  http://localhost:8002/v1/rest-apis/RESTstop

==> The REST service named "RESTstop" is deleted. MarkLogic Server
    returns the following headers in the response:

Content-type: text/html; charset=UTF-8
Server: MarkLogic
Content-Length: 2002
Connection: close

HTTP/1.1 204 Appserver deleted
Server: MarkLogic
Content-Length: 0
Connection: close

<cluster-query 
  xsi:schemaLocation="http://marklogic.com/manage/clusters manage-clusters.xsd"
  xmlns="http://marklogic.com/manage/clusters" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  ...
</cluster-query>
  ]]></pre></apidoc:example>
</apidoc:function>


<!-- ************ Transaction Management ************ -->

<apidoc:function name="/v1/transactions" http-verb="POST" 
                  lib="rest-client" 
                 category="Client API" subcategory="Transaction Management"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create a multi-statement transaction. The resulting transaction id
    may be used in the <code>txid</code> request parameter of subsequent 
    requests to force evaluation to take place in the context of the created 
    transaction.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="name" type="string">
      A symbolic name for the transaction. Default: <code>client-txn</code>.
    </apidoc:param>
    <apidoc:param name="timeLimit" type="string">
      The transaction time limit to apply to this transaction, in seconds.
      Default: The request timeout configured for the App Server. If the
      transaction is not committed or rolled back within this time limit,
      the transaction is automatically rolled back. You may not set the
      limit to a value greater than the default request timeout configured
      for the App Server. For details, see
      <code>xdmp:set-transaction-time-limit</code>.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Location" type="response">
      Upon success, the Location header contains a transaction URI of the 
      form <code>/transactions/</code><em>txid</em>. Use the
      <em>txid</em> portion in the <code>txid</code> parameter or 
      URI of subsequent requests.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns a status 303 (See Created 
    Transaction) and returns the transaction id in the <code>Location</code> 
    response header.
  </apidoc:response>
  <apidoc:usage>
    <p>
     By default, each REST request is serviced in a single transaction.
     The transaction is committed (or rolled back, in the case of error)
     automatically before the response sent. Use this request to create a 
     transaction that can service multiple requests. Pass the transaction 
     id in the <code>txid</code> parameter of subsequent requests to service
     a request in the created transaction.
    </p><p>
     Transactions created in this way should be explicitly committed or
     rolled back using the <code>/transactions</code> service. Transactions
     which are not explicitly committed are rolled back when the session or
     request times out.
    </p><p>
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/dev_guide/transactions.xml%2344680'>Understanding Transactions in MarkLogic Server</a> in the <em>Application Developer's Guide</em> and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/transactions.xml%2359084'>Creating a Transaction</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X POST -d "" -i \
    -H "Content-type: text/plain" \
    http://localhost:8004/v1/transactions

==> A transaction is created. MarkLogic Server returns the 
    transaction ID is returned in the Location header of the
    response. Use the contents of the Location header as the
    value of the "txid" parameter in other methods. The transaction
    ID is of the form /transactions/transactionid. For
    example, the following headers are returned:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 303 See Created Transaction
Location: /transactions/3148548124558550433
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/transactions/{txid}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Transaction Management"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve status information for the transaction whose id matches the
    <em>txid</em> given in the request URI.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      Specifies the content type of the response, as an alternative to using
      the Accept header. Accepted values: <code>json</code> and 
      <code>xml</code>. This value takes precedence over the Accept headers.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or Accept header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 200 (OK) and returns the
    transaction status details in the response body. If the transaction no
    longer exists, MarkLogic Server responds with 410 (Gone).
  </apidoc:response>
  <apidoc:usage>
    <p>
     The <em>txid</em> component of the request URI is a transaction id,
     such as is returned by creating a transaction with a POST request on 
     the <code>/transactions</code> service.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/transactions.xml%2388301'>Checking Transaction Status</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/xml" \
  http://localhost:8000/v1/transactions/12782288875903241087

==> Transaction status information for the requested transaction, as XML.
    For example:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 1011
Connection: close

<rapi:transaction-status xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:host>
    <rapi:host-id>15127489353049502680</rapi:host-id>
    <rapi:host-name>host-3.marklogic.com</rapi:host-name>
  </rapi:host>
  <rapi:server>
    <rapi:server-id>16702373622226553017</rapi:server-id>
    <rapi:server-name>RESTstop</rapi:server-name>
  </rapi:server>
  <rapi:database>
    <rapi:database-id>6332900397030137722</rapi:database-id>
    <rapi:database-name>bill</rapi:database-name>
  </rapi:database>
  <rapi:transaction-id>1602843393196055927</rapi:transaction-id>
  <rapi:transaction-name>client-txn</rapi:transaction-name>
  <rapi:transaction-mode>update</rapi:transaction-mode>
  <rapi:transaction-timestamp>0</rapi:transaction-timestamp>
  <rapi:transaction-state>idle</rapi:transaction-state>
  <rapi:canceled>false</rapi:canceled>
  <rapi:start-time>2012-05-07T16:32:42-07:00</rapi:start-time>
  <rapi:time-limit>600</rapi:time-limit>
  <rapi:max-time-limit>3600</rapi:max-time-limit>
  <rapi:user>7071164303237443533</rapi:user>
  <rapi:admin>true</rapi:admin>
</rapi:transaction-status>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/json" \
  http://localhost:8000/v1/transactions/12782288875903241087

==> Transaction status information for the requested transaction, as JSON.
    For example:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 647
Connection: close

{
  "transaction-status": {
    "host": {
      "host-id": "15127489353049502680",
      "host-name": "host-3.marklogic.com"
    },
    "server": {
      "server-id": "16702373622226553017",
      "server-name": "RESTstop"
    },
    "database": {
      "database-id": "6332900397030137722",
      "database-name": "bill"
    },
    "transaction-id": "27981556736957754",
    "transaction-name": "client-txn",
    "transaction-mode": "update",
    "transaction-timestamp": "0",
    "transaction-state": "idle",
    "canceled": "false",
    "start-time": "2012-05-07T16:53:00-07:00",
    "time-limit": "600",
    "max-time-limit": "3600",
    "user": "7071164303237443533",
    "admin": "true"
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/transactions/{txid}" http-verb="POST" 
                  lib="rest-client" 
                 category="Client API" subcategory="Transaction Management"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Commit or rollback the transaction whose id matches the <em>txid</em> 
    given in the request URI.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="result" type="string">
      Specifies the desired outcome of the transaction. Allowed values:
      <code>commit</code>, <code>rollback</code>.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:response>
    MarkLogic Server responds with status 204 (Committed or Rolled Back).
    If the transaction does not exist, MarkLogic Server responds with
    status 400 (Bad Request).
  </apidoc:response>
  <apidoc:usage>
    <p>
     The <em>txid</em> component of the request URI is transaction id,
     as is returned by creating a transaction with a POST request on the 
     <code>/transactions</code> service.
    </p><p>
     This method marks a transaction for commit, but commit does not occur
     until any currently executing statements in the transaction complete.
     For more details, see <code>xdmp:commit</code>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/transactions.xml%2324772'>Committing or Rolling Back a Transaction</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X POST -d "" -i \
  -H "Content-type: text/plain" \
  http://localhost:8000/v1/transactions/12782288875903241087?result=commit

==> The requested transaction is committed. MarkLogic Server returns
    the following headers:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 100 Continue

HTTP/1.1 204 Committed
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>


<!-- ************ Service Extension ************ -->

<apidoc:function name="/v1/config/resources" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API" 
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve a list of installed resource service extensions, including 
    their metadata.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      The expected content type of the response, either <code>xml</code> or
      <code>json</code>. Overrides the Accept header.
    </apidoc:param>
    <apidoc:param name="refresh?" type="string">
      Whether or not to refresh metadata before generating the response.
      Default: <code>true</code>. 
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response, either 
      <code>application/xml</code>, <code>application/json</code>, or
      <code>text/xml</code>. Ignored if the <code>format</code> parameter 
      is present.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the content in the response, either 
      <code>application/xml</code> or <code>application/json</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 200 (OK) and returns
    the requested listing in XML or JSON in the response body. The amount
    of detail available for a given extension depends on the metadata
    specified during extension installation.
  </apidoc:response>
  <apidoc:usage>
    <p>
     Specify the expected response content type using either the
     <code>format</code> parameter or <code>Accept</code> header. If you supply
     both, the <code>format</code> parameter takes precedence. If you specify
     neither, XML is returned.
    </p><p>
     When <code>refresh</code> is true (the default), extension metadata
     is rebuilt from the most recent installation of all extensions. When 
     set to false, the metadata in the response reflects the contents as of 
     the last refresh, and may be out of synch if there has been a 
     subsequent update to the extension. You should only need to set 
     <code>refresh</code> to false if you find this request is taking too long.
     Extension metadata is only used for informational purposes, so the
     ability of client applications to use an extension is not affected by
     out of synch metadata. 
    </p><p>
     For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2373853'>Discovering Resource Service Extensions</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -H "Accept: application/xml" -X GET -i \
    http://localhost:8004/v1/config/resources

==> A list of resource service extensions is returned as XML in the response
    body. For example, the output below reflects a extension, "example",
    which supports only a GET method. The GET method accepts a single
    string parameter, "the-uri". The provider is "Acme Widgets".

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Content-type: application/xml
Server: MarkLogic
Content-Length: 571
Connection: close

<rapi:resources xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:resource>
    <rapi:name>example</rapi:name>
    <rapi:title/>
    <rapi:version/>
    <rapi:provider-name>Acme Widgets</rapi:provider-name>
    <rapi:description/>
    <rapi:methods>
      <rapi:method>
        <rapi:method-name>get</rapi:method-name>
        <rapi:parameter>
          <rapi:parameter-name>the-uri</rapi:parameter-name>
          <rapi:parameter-type>string</rapi:parameter-type>
        </rapi:parameter>
      </rapi:method>
    </rapi:methods>
    <rapi:resource-source>/v1/resources/example</rapi:resource-source>
  </rapi:resource>
</rapi:resources>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
    -H "Accept: application/json" \
    'http://localhost:8004/v1/config/resources'

==> A list of resource service extensions is returned as JSON in the response
    body. For example, the output below reflects a single extension, "example",
    which supports only a GET method. The GET method accepts a single
    string parameter, "the-uri". The provider is "Acme Widgets".

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Content-type: application/json
Server: MarkLogic
Content-Length: 286
Connection: close

{
  "resources": {
    "resource": [
      {
        "name": "example",
        "title": "",
        "version": "",
        "provider-name": "Acme Widgets",
        "description": "",
        "methods": {
          "method": [
            {
              "parameter": [
                {
                  "parameter-name": "the-uri",
                  "parameter-type": "string"
                }
              ],
              "method-name": "get"
            }
          ]
        },
        "resource-source": "/v1/resources/example"
      }
    ]
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/resources/{name}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve the XQuery library module or server-side JavaScript module 
    implementing the named resource service extension.
  </apidoc:summary>
  <apidoc:headers>
    <apidoc:header name="Accept?" type="request">
      The expected MIME type of the response. Only 
      <code>application/xquery</code> and 
      <code>application/vnd.marklogic-javascript</code> are accepted.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the content in the response. The content type
      is always either <code>application/xquery</code>, or
      <code>application/vnd.marklogic-javascript</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic server returns status 200 (OK) and
    returns the XQuery library module implementing the extension
    in the response body.
  </apidoc:response>
  <apidoc:usage>
    For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2320662'>Retrieving the Implementation of a Resource Service Extension</a> in the <em>REST Application Developer's Guide</em>.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -H "Accept: application/xquery" -i \
    -X GET http://localhost:8004/v1/config/resources/example

==> The contents of the XQuery library module that implements the
    "example" resource services. MarkLogic Server returns:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Content-type: application/xquery
Server: MarkLogic
Content-Length: 650
Connection: close

xquery version "1.0-ml";
module namespace example="http://marklogic.com/rest-api/resource/example";
declare function example:get( 
...
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/resources/{name}" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create or update a resource service extension.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="provider?" type="string">
      The name of the provider of the service. Optional, used only as metadata.
    </apidoc:param>
    <apidoc:param name="version?" type="string">
      The version of the service. Optional, used only as metadata.
    </apidoc:param>
    <apidoc:param name="title?" type="string">
      The title of the service. Optional, used only as metadata.
    </apidoc:param>
    <apidoc:param name="description?" type="string">
      A description of the service. Optional, used only as metadata.
    </apidoc:param>
    <apidoc:param name="method*" type="string">
      The name of an HTTP method supported by the extension. Accepted
      values: <code>get</code>, <code>put</code>, <code>post</code>
      <code>delete</code>. The parameter may be specified multiple times
      to specify multiple methods. Optional, used only as metadata.
    </apidoc:param>
    <apidoc:param name="method:{name}*" type="string">
      The name, type, and cardinality of a method parameter. For example,
      <code>get:the-uri=string</code>. The <em>method</em> must be one of 
      <code>get</code>, <code>put</code>, <code>post</code>, or 
      <code>delete</code>. The <em>{name}</em> is the
      parameter name. The parameter value is an XQuery SequenceType,
      including cardinality (*, ?, etc.) such as appears in the type
      declaration of an XQuery function parameter. Optional, used only
      as metadata.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-type" type="request">
      The type of the request body. Since request body must contain
      XQuery or JavaScript that implements the services provided for
      the named resource, the content type must be
      <code>application/xquery</code> or
      <code>application/vnd.marklogic-javascript</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:return>
    Upon success, MarkLogic Server returns a 204, "Created" or "Updated".
  </apidoc:return>
  <apidoc:usage>
    For details on implementing a resource service extension, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2314646'>Extending the REST API</a> in the <em>REST Application Developer's Guide</em>.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X PUT -i \
  -H "Content-type: application/vnd.marklogic-javascript" -d@"./example.sjs" \
  'http://localhost:8004/v1/config/resources/example'

==> A JavaScript resource addressable through /v1/resources/example. 
    MarkLogic Server returns the following headers:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Created
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 4
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X PUT -i \
  -H "Content-type: application/xquery" -d@"./example.xqy" \
  'http://localhost:8004/v1/config/resources/example'

==> An XQuery resource addressable through /v1/resources/example. 
    MarkLogic Server returns the following headers:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Created
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 4
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X PUT -i \
  -H "Content-type: application/xquery" -d@"./example.xqy" \
  'http://localhost:8004/v1/config/resources/example?method=get&get:the-uri=string&provider=Acme Widgets'

==> An XQuery resource addressable through /v1/resources/example. The metadata
    for the extension will include parameter name and type information for 
    the GET method. MarkLogic Server returns the following headers:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Created
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 4
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/resources/{name}" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Uninstall the named resource service extension.
  </apidoc:summary>
  <apidoc:response>
    MarkLogic Server responds with 204 Deleted.
  </apidoc:response>
  <apidoc:usage>
    For more information, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2314646'>Extending the REST API</a> in the <em>REST Application Developer's Guide</em>.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8004/v1/config/resources/example

==> The resource service extension installed with the name "example"
    is removed. MarkLogic Server responds with headers of the form:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Deleted
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/resources/{name}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Make a GET request to the named resource service extension.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="rs:{name}*" type="string">
      A service-specific parameter. The name and expected value of the
      parameter is service dependent. For example, if the GET method of a
      service extension expects a boolean valued parameter named "reset", 
      then include the URI parameter "rs:reset=true" to set it to true.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
      The accepted response MIME type, if any. The accepted values depends on
      service extension implementation. 
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The type of the response body. If the GET method returns multiple 
      documents, the response is <code>multipart/mixed</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    The status and response contents are extension-specific.
  </apidoc:response>
  <apidoc:usage>
   <p>
    This operation invokes the <code>get</code> function of a resource
    service extension previously installed using the 
    <code>PUT /v1/config/resources/{name}</code>. You can use 
    <code>GET /v1/config/resources</code> to discover the names and 
    interfaces of installed extensions. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2314646'>Extending the REST API</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     All request parameters intended for the underlying XQuery extension 
     function must be prefixed with <code>rs:</code> to distinguish them from 
     implementation independent request parameters like <code>txid</code>.
     For example, to pass a resource-specific parameter named <code>arg1</code>,
     include a request parameter named <code>rs:arg1</code>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2313882'>Using a Resource Service Extension</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/resources/{name}" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Perform the PUT operation associated with a resource service extension.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="rs:{name}*" type="string">
      A service-specific parameter. The name and expected value of the
      parameter is service dependent. For example, if the GET method of a
      service extension expects a boolean valued parameter named "reset", 
      then include the URI parameter "rs:reset=true" to set it to true.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The accepted response MIME type, if any. The accepted values depends on
      service extension implementation. 
    </apidoc:header>
    <apidoc:header name="Content-type?" type="request">
      The type of the request body. The accepted values are service
      dependent.
    </apidoc:header>
    <apidoc:header name="Content-type?" type="response">
      The type of the response body. If the PUT method returns multiple 
      documents, the response is <code>multipart/mixed</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    The status and response contents are extension-specific. If the service
    does not exist, or if the service exists but does not support this
    method, MarkLogic Server returns status 400 (Bad Request).
  </apidoc:response>
  <apidoc:usage>
   <p>
    This operation invokes the <code>put</code> function of a resource
    service extension previously installed using the 
    <code>PUT /v1/config/resources/{name}</code>. You can use 
    <code>GET /v1/config/resources</code> to discover the names and 
    interfaces of installed extensions. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2314646'>Extending the REST API</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     All request parameters intended for the underlying XQuery extension 
     function must be prefixed with <code>rs:</code> to distinguish them from 
     implementation independent request parameters like <code>txid</code>.
     For example, to pass a resource-specific parameter named <code>arg1</code>,
     include a request parameter named <code>rs:arg1</code>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2313882'>Using a Resource Service Extension</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/resources/{name}" http-verb="POST" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Applies an extension-specific operation to a resource implemented by
    a resource service extension.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="rs:{name}*" type="string">
      A service-specific parameter. The name and expected value of the
      parameter is service dependent. For example, if the GET method of a
      service extension expects a boolean valued parameter named "reset", 
      then include the URI parameter "rs:reset=true" to set it to true.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The accepted response MIME type, if any. The accepted values depends on
      service extension implementation. 
    </apidoc:header>
    <apidoc:header name="Content-type?" type="request">
      The type of the request body. The accepted values are service
      dependent.
    </apidoc:header>
    <apidoc:header name="Content-type?" type="response">
      The type of the response body. If the POST method returns multiple 
      documents, the response is <code>multipart/mixed</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    The status and response contents are extension-specific. If the service
    does not exists, or if the service exists but does not support this
    method, MarkLogic Server returns status 400 (Bad Request).
  </apidoc:response>
  <apidoc:usage>
   <p>
    This operation invokes the <code>post</code> function of a resource
    service extension previously installed using the 
    <code>PUT /v1/config/resources/{name}</code>. You can use 
    <code>GET /v1/config/resources</code> to discover the names and 
    interfaces of installed extensions. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2314646'>Extending the REST API</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     All request parameters intended for the underlying XQuery extension 
     function must be prefixed with <code>rs:</code> to distinguish them from 
     implementation independent request parameters like <code>txid</code>.
     For example, to pass a resource-specific parameter named <code>arg1</code>,
     include a request parameter named <code>rs:arg1</code>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2313882'>Using a Resource Service Extension</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/resources/{name}" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Send a DELETE request to the named resource service extension.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="rs:{name}*" type="string">
      A service-specific parameter. The name and expected value of the
      parameter is service dependent. For example, if the GET method of a
      service extension expects a boolean valued parameter named "reset", 
      then include the URI parameter "rs:reset=true" to set it to true.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The accepted response MIME type, if any. The accepted values depends on
      service extension implementation. 
    </apidoc:header>
    <apidoc:header name="Content-type?" type="request">
      The type of the request body. The accepted values are service
      dependent.
    </apidoc:header>
    <apidoc:header name="Content-type?" type="response">
      The type of the response body. If the POST method returns multiple 
      documents, the response is <code>multipart/mixed</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    The status and response contents are extension-specific. If the service
    does not exists, or if the service exists but does not support this
    method, MarkLogic Server returns status 400 (Bad Request).
  </apidoc:response>
  <apidoc:usage>
   <p>
    This operation invokes the <code>delete</code> function of a resource
    service extension previously installed using the 
    <code>PUT /v1/config/resources/{name}</code>. You can use 
    <code>GET /v1/config/resources</code> to discover the names and 
    interfaces of installed extensions. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2314646'>Extending the REST API</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     All request parameters intended for the underlying XQuery extension 
     function must be prefixed with <code>rs:</code> to distinguish them from 
     implementation independent request parameters like <code>txid</code>.
     For example, to pass a resource-specific parameter named <code>arg1</code>,
     include a request parameter named <code>rs:arg1</code>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2313882'>Using a Resource Service Extension</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/ext/{directories}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve a list of assets installed in the modules database
    associated with a REST API instance, such as a dependent library of
    an extension or transformation.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      The expected content type of the response, either <code>xml</code> or
      <code>json</code>. Overrides the Accept header.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response, either 
      <code>application/xml</code>, <code>application/json</code>, or
      <code>text/xml</code>. Ignored if the <code>format</code> parameter 
      is present.
    </apidoc:header>
    <apidoc:header name="Content-type?" type="response">
      The MIME type of the data in the response body, either 
      <code>application/xml</code> or <code>text/plain</code> (JSON).
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon successful completion, MarkLogic Server responds with status code
    200 (OK) and returns a list of installed assets in XML or JSON. See the 
    examples, below. If no assets are found with the given directory path,
    MarkLogic Server returns status code 404 (Not Found).
  </apidoc:response>
  <apidoc:usage>
   <p>
    <code>{directories}</code> must be one or more database directory path 
    steps. For example: /your/domain/. Use the same directory path
    as was used to install the asset with 
    <code>GET /v1/ext/{directories}/{asset}</code>.
   </p><p>
    The directory path must end with "/".
   </p><p>
    For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2355309'>Managing Dependent Libraries and Other Assets</a> in the <em>REST Application Developer's Guide</em>.
   </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -H "Accept: application/xml" -X GET  \
    'http://localhost:8000/v1/ext'

==> A list of all assets installed in the modules database under /ext/.
    MarkLogic Server responds with output similar to the following:

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 119
Connection: Keep-Alive
Keep-Alive: timeout=5

<rapi:assets xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:asset>/ext/replace/my-lib.xqy</rapi:asset>
</rapi:assets>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -H "Accept: application/json" -X GET  \
    'http://localhost:8000/v1/ext'

==> A list of all assets installed in the modules database under /ext/,
    as JSON. MarkLogic Server responds with output similar to the following:

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 48
Connection: Keep-Alive
Keep-Alive: timeout=5

{"assets":[
  {"asset":"/ext/replace/my-lib.xqy"}
]}
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -i -H "Accept: application/xml" -X GET  \
    'http://localhost:8000/v1/ext/example/'

==> A list of all assets installed in the /ext/example/ directory of the
    modules database. MarkLogic Server responds with output similar to the 
    following:

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 119
Connection: Keep-Alive
Keep-Alive: timeout=5

<rapi:assets xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:asset>/ext/example/my-lib.xqy</rapi:asset>
</rapi:assets>
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/ext/{directories}" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Delete the assets in <code>/ext/{directories}</code> in the modules 
    database associated with the REST API instance.
  </apidoc:summary>
  <apidoc:response>
    Whether or not any assets exist under the given directory, MarkLogic Server
    returns status code 204 (Deleted).
  </apidoc:response>
  <apidoc:usage>
   <p>
    <code>{directories}</code> must be one or more database directory path 
    steps. For example: /your/domain/. Use the same directory path
    as was used to install the asset with 
    <code>GET /v1/ext/{directories}/{asset}</code>.
   </p><p>
    For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2355309'>Managing Dependent Libraries and Other Assets</a> in the <em>REST Application Developer's Guide</em>.
   </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X DELETE  \
    'http://localhost:8000/v1/ext/my/example/'

==> All assets installed in /ext/my/example/ in the modules database are
    deleted. MarkLogic Server responds with output similar to the following:

HTTP/1.1 204 Deleted
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/ext/{directories}/{asset}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve an asset installed in the modules database
    associated with a REST API instance, such as a dependent library of a
    module implementing an extension or a transformation. The asset should
    have the database URI <code>/ext/{directories}/{asset}</code>.
  </apidoc:summary>
  <apidoc:headers>
    <apidoc:header name="Accept?" type="request">
      The expected MIME type of the data in the response body. You are
      responsible for selecting the correct type for the asset being
      retrieved. Content negotiation is not supported. 
    </apidoc:header>
    <apidoc:header name="Content-type?" type="response">
      The MIME type of the data in the response body, derived from the
      Accept header. 
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon successful completion, MarkLogic Server responds with status code
    200 (OK) and returns the asset in the response body. If 
    no asset is found with the specified URI, MarkLogic Server returns status 
    code 404 (Not Found).
  </apidoc:response>
  <apidoc:usage>
   <p>
    <code>/ext/{directories}/{asset}</code> should be the document URI of the 
    asset in the modules database, where <code>{directories}</code> is one 
    or more database directory path steps, separated by "/", and 
    <code>{asset}</code> is the asset document. For example, if the asset 
    is inserted into the database with the document URI
    <code>/ext/your/domain/your-module.xqy</code> then the request URL is
    of the form <code>http://localhost:port/v1/ext/your/domain/your-module.xqy</code>.
   </p><p>
    The response returns the asset with a Content-type corresponding to 
    the MIME type in the Accept header. 
    No content negotiation is supported. For example, if you specify 
    <code>application/xml</code> in the Accept header, but retrieve a 
    binary JPG document, then the response will have Content-type 
    <code>application/xml</code>, even though the body actually contains JPG.
   </p><p>
    For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2355309'>Managing Dependent Libraries and Other Assets</a> in the <em>REST Application Developer's Guide</em>.
   </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X GET  \
    'http://localhost:8000/v1/ext/my/example/my-lib.xqy'

==> MarkLogic Server returns the XQuery library module in the modules
    database with the document URI /ext/my/example/my-lib.xqy. The response
    headers are similar to the following:

HTTP/1.1 200 OK
Content-type: application/xml
Server: MarkLogic
Content-Length: 633
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>
 
<apidoc:function name="/v1/ext/{directories}/{asset}" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Install an asset such as a dependent library of an extension module
    in the modules database associated with this REST API instance.
    The asset is installed with the database URI 
    <code>/ext/{directories}/{asset}</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      Specify the asset document type for MarkLogic Server. Allowed values:
      <code>xml</code>, <code>text</code>, <code>binary</code>.
      This parameter only affects document type when there is no MIME type
      mapping defined for the asset URI extension or the Content-type.
      For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="perm:{role}*" type="string">
      Give the asset the specified permissions, in addition to the default
      <code>rest-admin</code> permissions that all assets have. Any existing
      permissions beyond the default are replaced. Example: 
      <code>perm:my-role=execute</code>. Valid capability values:
      <code>read, update, execute</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-type?" type="request">
      The MIME type of the data in the request body. 
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon successful completion, MarkLogic Server responds with status code
    201 (Created) or 204 (Updated). 
  </apidoc:response>
  <apidoc:usage>
   <p>
    <code>/ext/{directories}/{asset}</code> will be the document URI of the 
    asset in the modules database, where <code>{directories}</code> is one 
    or more database directory path steps, separated by "/", and 
    <code>{asset}</code> is the asset document. See the example below. 
   </p><p>
    The type of document inserted into the database (XML, JSON, text, or
    binary) is based on the MIME type mapping defined for the URI extension,
    the MIME type mapping defined for the Content-type, in that order of.
    precedence. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
   </p><p>
    For more details, see
   </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:see-also-list>
    <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2355309'>Managing Dependent Libraries and Other Assets</a> in the <em>REST Application Developer's Guide</em>
    </apidoc:see-also>
  </apidoc:see-also-list>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X PUT -i -d @./my-lib.xqy \
    -H "Content-type: application/xquery"  \
    'http://localhost:8000/v1/ext/my/example/my-lib.xqy?perm:my-users=execute'

==> MarkLogic Server installs the XQuery library module that is in 
    the request body into the Modules database with the document 
    URI /ext/my/example/my-lib.xqy and returns a response similar
    to the following. The module is executable by users with the
    'my-users' role.

HTTP/1.1 201 Created
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>
 
<apidoc:function name="/v1/ext/{directories}/{asset}" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove the asset with document URI <code>/ext/{directories}/{asset}</code>
    from the modules database associated with this REST API instance.
  </apidoc:summary>
  <apidoc:response>
    MarkLogic Server responds with 204 (Deleted), whether or not there is
    an asset in the modules database with the specified document URI.
  </apidoc:response>
  <apidoc:usage>
    <p>
     <code>/ext/{directories}/{asset}</code> must be the document URI of 
     the asset in the modules database, where <code>{directories}</code> is 
     one or more database directory path steps, separated by "/", and 
     <code>{asset}</code> is the asset document. See the example below. 
    </p><p>
     To remove all assets in a database directory with a single request,
     use <code>DELETE /v1/ext/{directories}</code>.
   </p><p>
    For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2355309'>Managing Dependent Libraries and Other Assets</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    'http://localhost:8000/v1/ext/my/example/my-lib.xqy'

==> MarkLogic Server deletes the XQuery library module with the document 
    URI /ext/my/example/my-lib.xqy from the modules database associated
    with this REST API instance and returns a response similar to the
    following:

HTTP/1.1 204 Deleted
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>
 
<apidoc:function name="/v1/eval" http-verb="POST" lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Evaluate an ad-hoc query expressed using XQuery or server-side JavaScript.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="xquery?" type="string">
      The query to evaluate, expressed using XQuery. This parameter can
      only be specified as <code>x-wwww-form-urlencoded</code> data in 
      the request body. You must include either this parameter or the 
      <code>javascript</code> parameter, but not both.
    </apidoc:param>
    <apidoc:param name="javascript?" type="string">
      The query to evaluate, expressed using server-side JavaScript. This 
      parameter can only be specified as <code>x-wwww-form-urlencoded</code> 
      data in the request body. You must include either this parameter or
      the <code>xquery</code> parameter, but not both.
    </apidoc:param>
    <apidoc:param name="vars?" type="string">
      External variables to pass to the query during evaluation; see the
      Usage notes for syntax. This parameter can only be specified as
      <code>x-wwww-form-urlencoded</code> data in the request body.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      The database can be identified by name or by database id.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the response. The only allowed MIME type
     is <code>multipart/mixed</code>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="request">
      The MIME type of the data in the request body. Allowed values:
      <code>application/x-www-form-urlencoded</code>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response body. This request always
      returns <code>multipart/mixed</code>, in the same format returned
      by the XDBC protocol.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with 200 OK. The response
    body is <code>multipart/mixed</code>, with one part for each result
    produced by evaluating the query.
  </apidoc:response>
  <apidoc:usage>
    <p>
     This method is equivalent to calling <code>xdmp:eval</code> (XQuery)
     or <code>xdmp.eval</code> (JavaScript).
    </p><p>
     If the query depends on external variables, supply the variables values
     using the <code>vars</code> parameter. Use following format for the
     value of the <code>vars</code> parameter in the request body:
     <pre xml:space="preserve"><![CDATA[
{"paramName":"paramValue", "paramName":"paramValue",...}
  ]]></pre></p><p>
     For XQuery external parameters, you can include a namesapce URI by
     prefixing the parameter name with <code>{theURI}</code>. For example,
     to supply a value for the parameter "title" in the namespace
     "http://marklogic.com/example", express the parameter name and value as:
     <code>{"http://marklogic.com/example}title":"value"</code>.
    </p><p>
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2367576'>Evaluating an Ad-Hoc Query</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the following privileges or equivalent.
    <p><code>http://marklogic.com/xdmp/privileges/xdmp-eval</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/xdmp-eval-in</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/xdbc-eval</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/xdbc-eval-in</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat body.sjs
xdmp.arrayValues([word1, word2, word1 %2B " " %2B word2])
&
vars={"word1":"hello","word2":"world"}


$ curl --anyauth --user user:password -X POST -i -d @./body.sjs \
    -H "Content-type: application/x-www-form-urlencoded" \
    -H "Accept: multipart/mixed; boundary=BOUNDARY" \
    http://localhost:8000/v1/eval

==> Evaluate the JavaScript query from the file body.sjs on MarkLogic Server.
    The response includes 3 parts, corresponding to the three items returned
    by the query: The value of word1, the value of word2, and the result of
    concantenating the two values. MarkLogic returns a response similar to 
    the following:

HTTP/1.1 200 OK
Server: MarkLogic 8.0-20141122
Set-Cookie: TxnMode=query; path=/
Set-Cookie: TxnID=null; path=/
Content-Type: multipart/mixed; boundary=ccbb9539c65b0631
Content-Length: 279
Connection: Keep-Alive
Keep-Alive: timeout=5


--ccbb9539c65b0631
Content-Type: text/plain
X-Primitive: untypedAtomic

hello
--ccbb9539c65b0631
Content-Type: text/plain
X-Primitive: untypedAtomic

world
--ccbb9539c65b0631
Content-Type: text/plain
X-Primitive: untypedAtomic

hello world
--ccbb9539c65b0631--
$ cat body.sjs
javascript=
xdmp.arrayValues([word1, word2, word1 %2B " " %2B word2])
&
vars={"word1":"hello","word2":"world"}
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat body.xqy
xquery=
xquery version "1.0-ml";
declare variable $word1 as xs:string external;
declare variable $word2 as xs:string external;
($word1, $word2, fn:concat($word1, " ", $word2))
&
vars={"word1":"hello","word2":"world"}


$ curl --anyauth --user user:password -X POST -i -d @./body.xqy \
    -H "Content-type: application/x-www-form-urlencoded" \
    -H "Accept: multipart/mixed; boundary=BOUNDARY" \
    http://localhost:8000/v1/eval

==> Evaluate the XQuery query from the file body.xqy on MarkLogic Server.
    The response includes 3 parts, corresponding to the three items returned
    by the query: The value of $word1, the value of $word2, and the result of
    concantenating the two values. MarkLogic returns a response similar to 
    the following:

HTTP/1.1 200 OK
Server: MarkLogic 8.0-20141122
Set-Cookie: TxnMode=auto; path=/
Set-Cookie: TxnID=null; path=/
Content-Type: multipart/mixed; boundary=ad4119fdb5f9569e
Content-Length: 258
Connection: Keep-Alive
Keep-Alive: timeout=5


--ad4119fdb5f9569e
Content-Type: text/plain
X-Primitive: string

hello
--ad4119fdb5f9569e
Content-Type: text/plain
X-Primitive: string

world
--ad4119fdb5f9569e
Content-Type: text/plain
X-Primitive: string

hello world
--ad4119fdb5f9569e--
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/invoke" http-verb="POST" lib="rest-client" 
                 category="Client API" subcategory="Service Extension"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Evaluate an XQuery or server-side JavaScript module installed in
    MarkLogic Server.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="module" type="string">
      The path of the module to be evaluated. The path is resolved against
      the root of the App Server that is part of your REST API instance
      or to the Modules database or directory. The module filename suffix
      determines whether the module is treated as XQuery or JavaScript;
      for details, see the Usage Notes below. This parameter can only be
      specified as <code>x-wwww-form-urlencoded</code> data in the request 
      body.
    </apidoc:param>
    <apidoc:param name="vars?" type="string">
      External variables to pass to the module; see the Usage notes for 
      syntax. This parameter can only be specified as
      <code>x-wwww-form-urlencoded</code> data in the request body.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      The database can be identified by name or by database id.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the response. The only allowed MIME type
     is <code>multipart/mixed</code>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="request">
      The MIME type of the data in the request body. Allowed values:
      <code>application/x-www-form-urlencoded</code>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response body. This request always
      returns <code>multipart/mixed</code>, in the same format returned
      by the XDBC protocol.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with 200 OK. The response
    body is <code>multipart/mixed</code>, with one part for each result
    produced by evaluating the module.
  </apidoc:response>
  <apidoc:usage>
    <p>
     This method is equivalent to calling <code>xdmp:invoke</code> (XQuery)
     or <code>xdmp.invoke</code> (JavaScript).
    </p><p>
     The expected implementation language of the module is determined by
     the MIME type mapping defined for the file extension with which the
     path ends. For example, the "sjs" extension is mapped to 
     <code>application/vnd.marklogic-javascript</code> MIME type by default,
     so <code>module=/some/path/mymodule.sjs</code> is expected to be a
     a JavaScript module. Similarly, the "xqy" file extension is mapped to
     XQuery by default.
    </p><p>
     If the module depends on external variables, supply the variables values
     using the <code>vars</code> parameter. Use following format for the
     value of the <code>vars</code> parameter in the request body:
     <pre xml:space="preserve"><![CDATA[
{"paramName":"paramValue", "paramName":"paramValue",...}
  ]]></pre></p><p>
     For XQuery external parameters, you can include a namesapce URI by
     using Clark notation. That is, prefix the parameter name with 
     <code>{theURI}</code>. For example, to supply a value for the parameter 
     "title" in the namespace "http://marklogic.com/example", express the 
     parameter name and value as:
     <code>{"http://marklogic.com/example}title":"value"</code>.
    </p><p>
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/extensions.xml%2372813'>Evaluating a Module Installed on MarkLogic Server</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the following privileges or equivalent:
    <p><code>http://marklogic.com/xdmp/privileges/xdmp-invoke</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/xdmp-invoke-in</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/xdbc-invoke</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/xdbc-invoke-in</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Install the module in the modules database:
------------------------------------------
$ cat module.sjs
xdmp.arrayValues([word1, word2, word1 + " " + word2])

$ curl --anyauth --user user:password -X PUT -i -d @./module.sjs \
    -H "Content-type: application/vnd.marklogic-javascript" \
    http://localhost:8000/v1/ext/invoke/my.sjs

Invoke the module:
-----------------
$ curl --anyauth --user user:password -X POST -i -d @./invoke-sjs.txt \
    --data-urlencode module=/ext/invoke/my.sjs \
    --data-urlencode vars='{"word1":"hello","word2":"world"}' \
    -H "Content-type: application/x-www-form-urlencoded" \
    -H "Accept: multipart/mixed" \
    http://localhost:8000/v1/invoke

==> Evaluate the JavaScript module installed under /ext/invoke.my.sjs on 
    MarkLogic Server. The response includes 3 parts, corresponding to the 
    three items returned by the query: The value of word1, the value of 
    word2, and the result of concantenating the two values. MarkLogic returns 
    a response similar to the following:

HTTP/1.1 200 OK
Server: MarkLogic 8.0-20141122
Set-Cookie: TxnMode=query; path=/
Set-Cookie: TxnID=null; path=/
Content-Type: multipart/mixed; boundary=1176113105d6eaed
Content-Length: 279
Connection: Keep-Alive
Keep-Alive: timeout=5


--1176113105d6eaed
Content-Type: text/plain
X-Primitive: untypedAtomic

hello
--1176113105d6eaed
Content-Type: text/plain
X-Primitive: untypedAtomic

world
--1176113105d6eaed
Content-Type: text/plain
X-Primitive: untypedAtomic

hello world
--1176113105d6eaed--
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Install the module in the modules database:
------------------------------------------
$ cat module.xqy
xquery version "1.0-ml";
declare variable $word1 as xs:string external;
declare variable $word2 as xs:string external;
($word1, $word2, fn:concat($word1, " ", $word2))

$ curl --anyauth --user user:password -X PUT -i -d @./module.xqy \
    -H "Content-type: application/xquery" \
    http://localhost:8000/v1/ext/invoke/my.xqy

Invoke the module:
------------------
$ curl --anyauth --user user:password -X POST -i -d @./invoke-xqy.txt \
    --data-urlencode module=/ext/invoke/my.xqy \
    --data-urlencode vars='{"word1":"hello","word2":"world"}' \
    -H "Content-type: application/x-www-form-urlencoded" \
    -H "Accept: multipart/mixed; boundary=BOUNDARY" \
    http://localhost:8000/v1/invoke

==> Evaluate the module installed in the modules database with the URI
    /ext/invoke/my.xqy on MarkLogic Server. The response includes 3 parts, 
    corresponding to the three items returned by the query: The value of 
    $word1, the value of $word2, and the result of concantenating the two 
    values. MarkLogic returns a response similar to the following:

HTTP/1.1 200 OK
Server: MarkLogic 8.0-20141122
Set-Cookie: TxnMode=auto; path=/
Set-Cookie: TxnID=null; path=/
Content-Type: multipart/mixed; boundary=5abb9090cf59622a
Content-Length: 258
Connection: Keep-Alive
Keep-Alive: timeout=5


--5abb9090cf59622a
Content-Type: text/plain
X-Primitive: string

hello
--5abb9090cf59622a
Content-Type: text/plain
X-Primitive: string

world
--5abb9090cf59622a
Content-Type: text/plain
X-Primitive: string

hello world
--5abb9090cf59622a--
  ]]></pre></apidoc:example>
</apidoc:function>


<!-- ************ Search ************ -->

<apidoc:function name="/v1/search" http-verb="GET"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Search the database using a string and/or structured query, returning
    search results and/or matching documents.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="q?" type="string">
      A string query. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/search-api.xml%2341745'>Automatic Query Text Parsing and Grammar</a> in the <em>Search Developer's Guide</em>
      and <code>cts:query</code>.
    </apidoc:param>
    <apidoc:param name="structuredQuery?" type="string">
      A structured search query string. That is, a serialized representation
      of a <code>search:query</code> element. See
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/structured-query.xml%2392329'>Searching Using Structured Queries</a> in the <em>Search Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="start?" type="string">
      The index of the first result to return. Results are numbered
      beginning with 1.  Default: 1.
    </apidoc:param>
    <apidoc:param name="pageLength?" type="string">
      The maximum number of results to return in this request.
      Default: 10, or the length configured by the query options.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service.
    </apidoc:param>
    <apidoc:param name="view?" type="string">
      The view of the search results to return in the response. Accepted
      values: <code>facets, results, metadata, all</code>. Default: 
      <code>all</code> for a normal search, <code>none</code> for a
      multi-document read.
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to fetch about the matching documents. Category
      can be specified multiple times to retrieve any combination of content 
      and metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to request all 
      categories except <code>content</code>. You can only use this
      parameter when making a multi-document read request.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      For a normal search operation, you can use <code>format</code> as an
      Accept header override; it affects the content type of the response
      search results. For a multi-document read, you can use <code>format</code>
      to specify the content type of returned metadata and the
      search results (if requested) in the response; <code>format</code>
      has no effect on returned document content. Accepted values: 
      <code>json</code> or <code>xml</code>. Default: <code>xml</code>.
      For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="collection*" type="string">
      Filter search results to include only matches in the named 
      collection(s).
    </apidoc:param>
    <apidoc:param name="directory?" type="string">
      Filter search results to include only matches from documents in
      the specified database directory.
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a search result transformation previously installed via the 
      <code>/transforms</code> service. The transformation is applied 
      to the <code>&lt;search:response/&gt;</code> after applying
      user-defined transforms defined in the query options using
      <code>&lt;transform-results&gt;</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2394556'>Transforming the Search Response</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>. Transform parameters are passed to 
      the transform named in the <code>transform</code> parameter.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
      The expected MIME type of the response. Accepted values:
      <code>application/json</code>, <code>application/xml</code>,
      <code>multipart/mixed</code>. Default: <code>application/xml</code>. 
      When you use <code>multipart/mixed</code>, the request is a multi-document
      read rather than just a search; see the Usage Notes.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response. For a normal search
      operation, the results are either XML or JSON, depending upon the 
      value of the <code>format</code> parameter or the Accept header.
      For a multi-document read, the result is a multipart/mixed response
      body containing matching content or metadata; see the Usage Notes.
    </apidoc:header>
    <apidoc:header name="vnd.marklogic.start" type="response">
      For a multi-document read operation, the starting index of the
      results in the response. The header value is always 1 unless you
      use the <code>start</code> and <code>pageLength</code> parameters
      to incrementally retrieve results.
    </apidoc:header>
    <apidoc:header name="vnd.marklogic.pageLength" type="response">
      For a multi-document read operation, the number of results in
      the response. See the <code>pageLength</code> parameter.
    </apidoc:header>
    <apidoc:header name="vnd.marklogic.result-estimate" type="response">
      For a multi-document read operation, an estimate of the total number
      of matches to the input query. This is equivalent to <code>total</code>
      in the <code>search:response</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     For a normal search operation, MarkLogic Server returns a 200 (OK) status, 
     whether there are search matches or not. If XML output is requested, the 
     response body contains a <code>search:reponse</code> node. If JSON output 
     is requested, the response body contains a JSON map with keys that closely 
     correspond to the <code>search:response</code> elements.
    </p><p>
     For a multi-document read, by default MarkLogic Server returns status
     200 (OK) only if there are matching documents and a 404 (Not Found) if
     there are no matching documents. If you use the <code>view</code>
     request parameter to include search results or facets in the response,
     then the return status is 200 (OK) whether there are matching documents
     or not.
    </p><p>
     For a multi-document read, the response body is multipart/mixed data
     containing content and/or metadata for each document that matches the
     input query. If you use a <code>view</code> parameter to include
     search results in the response, the search response, facets, or metadata
     are in the first part. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2365903'>Reading Multiple Documents Matching a Query</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     You can use this request as a simple database search operation that returns
     search results, or a multi-document read of content and/or metadata
     matching a query. A multi-document read can also return search results,
     but does not do so by default; see the <code>view</code> parameter.
     A multi-document read is distinguished from a normal search operation
     by setting the Accept header to <code>multipart/mixed</code>.
    </p><p>
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2365903'>Reading Multiple Documents Matching a Query</a> in the <em>REST Application Developer's Guide</em>
     and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2349329'>Querying Documents and Metadata</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     When performing a multi-document read, use the <code>category</code> 
     parameter to specify whether to return content, metadata, and/or a 
     metadata subset for matching documents. By default, only content is 
     returned. Use the <code>view</code> parameter to include search results 
     and facets in the response. You can also use the <code>view</code>
     parameter to control results in a normal search operation.
    </p><p>
     Query options named in the <code>options</code> request parameter must
     be pre-installed using the <code>/config/query service</code>. If no
     query options are specified, MarkLogic Server uses the configured default
     options. If no default options are configured, MarkLogic 
     Server uses the default Search API options. To pre-configure query 
     options, use the <code>/config/query</code> service. Use a POST
     request to specify dynamic query options instead of (or in addition to)
     pre-installing persistent query options.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:see-also-list>
    <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2349329'>Querying Documents and Metadata</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:see-also>
    <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2365903'>Reading Multiple Documents Matching a Query</a> in the <em>REST Application Developer's Guide</em>
    </apidoc:see-also>
    <apidoc:see-also>
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:see-also>
  </apidoc:see-also-list>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user username:password -X GET \
    'http://localhost:8000/v1/search?q=infinite NEAR variety'

==> Search the database for documents where "infinite" appears near
    "variety". MarkLogicServer returns an XML search response similar
    to the following:

<search:response total="1" start="1" page-length="10"
   xmlns="" xmlns:search="http://marklogic.com/appservices/search">
  <search:result index="1" uri="/shakespeare/plays/a_and_c.xml"
     path="fn:doc(&quot;/shakespeare/plays/a_and_c.xml&quot;)"
     score="46720" confidence="0.434464" fitness="0.50812">
    <search:snippet>
      <search:match path="fn:doc(&quot;/shakespeare/plays/a_and_c.xml&quot;)
        /PLAY/ACT[2]/SCENE[2]/SPEECH[86]/LINE[3]">Her 
        <search:highlight>infinite</search:highlight> 
        <search:highlight>variety</search:highlight>: other women cloy
      </search:match>
    </search:snippet>
  </search:result>
  <search:qtext>infinite NEAR variety</search:qtext>
  <search:metrics>
    <search:query-resolution-time>PT1.11403S</search:query-resolution-time>
    <search:snippet-resolution-time>PT0.907914S</search:snippet-resolution-time>
    <search:total-time>PT2.022321S</search:total-time>
  </search:metrics>
</search:response>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user username:password -X GET \
  -H "Accept: application/json" \
  'http://localhost:8000/v1/search?q=infinite NEAR variety'

==> Search the database for documents where "infinite" appears near
    "variety". MarkLogicServer returns a JSON search response similar
    to the following:

{
  "snippet-format": "snippet",
  "total": 1,
  "start": 1,
  "page-length": 10,
  "results": [
    {
      "index": 1,
      "uri": "/shakespeare/plays/a_and_c.xml",
      "path": "fn:doc(\"/shakespeare/plays/a_and_c.xml\")",
      "score": 17792,
      "confidence": 0.364254,
      "fitness": 0.480312,
      "matches": [
        {
          "path": "fn:doc(\"/shakespeare/plays/a_and_c.xml\")/PLAY/ACT[2]
          /SCENE[2]/SPEECH[86]/LINE[3]",
          "match-text": [
            "Her ",
            {
              "highlight": "infinite"
            },
            " ",
            {
              "highlight": "variety"
            },
            ": other women cloy"
          ]
        }
      ]
    }
  ],
  "qtext": "infinite NEAR variety",
  "metrics": {
    "query-resolution-time": "PT0.014055S",
    "facet-resolution-time": "PT0.000082S",
    "snippet-resolution-time": "PT0.064129S",
    "total-time": "PT0.078551S"
  }
}
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i \
  -H "Accept: multipart/mixed; boundary=BOUNDARY" \
  http://localhost:8000/v1/search?q=myphrase

==> Retrieve all documents that match the query "myphrase". MarkLogic
    Server responds similar to the following:

HTTP/1.1 200 OK
Content-type: multipart/mixed; boundary=BOUNDARY
vnd.marklogic.start: 1
vnd.marklogic.pageLength: 10
vnd.marklogic.result-estimate: 3
Server: MarkLogic
Content-Length: 589
Connection: Keep-Alive
Keep-Alive: timeout=5

--BOUNDARY
Content-Type: text/xml
Content-Disposition: attachment; filename=doc1.xml; category=content; 
                     format=xml
Content-Length: 60

<?xml version="1.0" encoding="UTF-8"?>
<root>some xml</root>
--BOUNDARY
Content-Type: text/xml
Content-Disposition: attachment; filename=doc3.xml; category=content; format=xml
Content-Length: 60

<?xml version="1.0" encoding="UTF-8"?>
<root>some xml</root>
--BOUNDARY
Content-Type: application/json
Content-Disposition: attachment; filename=doc2.json; category=content; 
                     format=json
Content-Length: 19

{"key":"some json"}
--BOUNDARY--
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
curl --anyauth --user user:password -X GET -i \
  -H "Accept: multipart/mixed; boundary=BOUNDARY" \
  'http://localhost:8000/v1/search?q=myphrase&view=results&category=properties&format=json'

==> Retrieve the search results (view=results) and the properties metadata 
    (category=properties) for all documents matching the query "myphrase".
    The search results are returned in the first part of the multipart
    response. The search results and metadata are returned as JSON because
    of the format=json parameter. MarkLogic responds with output similar
    to the following:

HTTP/1.1 200 OK
Content-type: multipart/mixed; boundary=BOUNDARY
vnd.marklogic.start: 1
vnd.marklogic.pageLength: 10
vnd.marklogic.result-estimate: 3
Server: MarkLogic
Content-Length: 1788
Connection: Keep-Alive
Keep-Alive: timeout=5

--BOUNDARY
Content-Type: application/json
Content-Disposition: inline
Content-Length: 1074

{
  "snippet-format": "snippet",
  "total": 3,
  "start": 1,
  "page-length": 10,
  "results": [
    {
      "index": 1,
      "uri": "doc1.xml",
      "path": "fn:doc(\"doc1.xml\")",
      "score": 14336,
      "confidence": 0.3498099,
      "fitness": 0.7490314,
      "href": "/v1/documents?uri=doc1.xml",
      "mimetype": "text/xml",
      "format": "xml",
      "matches": [
        {
          "path": "fn:doc(\"doc1.xml\")/root",
          "match-text": [
            {
              "highlight": "some"
            },
            " xml"
          ]
        }
      ]
    },
    ...
  ],
  "qtext": "some",
  "metrics": {
    "query-resolution-time": "PT0.008052S",
    "snippet-resolution-time": "PT0.003433S",
    "total-time": "PT0.012944S"
  }
}
--BOUNDARY
Content-Type: application/json
Content-Disposition: attachment; filename=doc1.xml; category=properties; 
                     format=json
Content-Length: 46

{"properties":{"my-prop":"value1"}}
--BOUNDARY
Content-Type: application/json
Content-Disposition: attachment; filename=doc3.xml; category=properties; 
                     format=json
Content-Length: 46

{"properties":{"my-prop":"value2"}}
--BOUNDARY
Content-Type: application/json
Content-Disposition: attachment; filename=doc2.json; category=properties; 
                     format=json
Content-Length: 46

{"properties":{"my-prop":"value3"}}
--BOUNDARY--
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/search" http-verb="POST"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Search the database using a structured query, supplied in the POST body;
    or search the database using a string or structured query with the
    query options and query combined in the POST body. Returns search
    results, matching content and/or metadata, or both.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="q?" type="string">
      A string query. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/search-api.xml%2341745'>Automatic Query Text Parsing and Grammar</a> in the <em>Search Developer's Guide</em>
      and <code>cts:query</code>. This query is AND'd with the query(s)
      in the request body.
    </apidoc:param>
    <apidoc:param name="start?" type="string">
      The index of the first result to return. The first result is index 1.
      Default: 1.
    </apidoc:param>
    <apidoc:param name="pageLength?" type="string">
      The maximum number of results to return in this request.
      Default: 10, or the length configured by the query options.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service.
    </apidoc:param>
    <apidoc:param name="view?" type="string">
      The view of the search results to return in the response. Accepted
      values: <code>facets, results, metadata, uris, all</code> (default) 
      for a normal search, <code>none</code> for a multi-document read.
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to fetch about the matching documents. Category
      can be specified multiple times to retrieve any combination of content 
      and metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to request all 
      categories except <code>content</code>. You can only use this
      parameter when making a multi-document read request.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      You can use this parameter in conjunction with or instead of the
      request Content-type and Accept headers to indicate the input
      and/or output content type. The Content-type header takes precedence 
      over <code>format</code> in most cases. The <code>format</code> parameter 
      always takes precedence over the Accept header. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>. 
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="collection*" type="string">
      Filter search results so they include only matches in the named 
      collection(s).
    </apidoc:param>
    <apidoc:param name="directory?" type="string">
      Filter search results so they only include matches from documents in
      the specified database directory.
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a search result transformation previously installed via the 
      <code>/transforms</code> service. If a search response is returned,
      the transformation is applied 
      to the <code>&lt;search:response/&gt;</code> after applying
      user-defined transforms defined in the query options using
      <code>&lt;transform-results&gt;</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2394556'>Transforming the Search Response</a> in the <em>REST Application Developer's Guide</em>.
      On a multi-document read request, the transform is applied to each
      returned document as well as the search response (if a search response
      is requested).
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>. Transform parameter values are passed to 
      the transform named in the <code>transform</code> request parameter.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
      The expected MIME type of the response. Accepted values:
      <code>application/json</code>, <code>application/xml</code>,
      <code>multipart/mixed</code>. Default: <code>application/xml</code>. 
      When you use <code>multipart/mixed</code>, the request is a multi-document
      read rather than just a search; see the Usage Notes. If the Accept
      header and <code>format</code> parameter are both present, then
      <code>format</code> takes precedence if the Accept header is not
      set to <code>multipart/mixed</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-Type*" type="request">
      The MIME type of the data in the POST body. Accepted values:
      <code>application/json</code> or <code>application/xml</code>. 
      The <code>format</code> parameter value is used if Content-type is not
      set or is set to an incompatible or unknown value.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response. For a normal search
      operation, the results are either XML or JSON, depending upon the 
      value of the <code>format</code> parameter or the Accept header.
      For a multi-document read, the result is a multipart/mixed response
      body containing matching content and/or metadata; see the Usage Notes.
    </apidoc:header>
    <apidoc:header name="vnd.marklogic.start" type="response">
      For a multi-document read operation, the starting index of the
      results in the response. The header value is always 1 unless you
      use the <code>start</code> and <code>pageLength</code> parameters
      to incrementally retrieve results.
    </apidoc:header>
    <apidoc:header name="vnd.marklogic.pageLength" type="response">
      For a multi-document read operation, the number of results in
      the response. See the <code>pageLength</code> parameter.
    </apidoc:header>
    <apidoc:header name="vnd.marklogic.result-estimate" type="response">
      For a multi-document read operation, an estimate of the total number
      of matches to the input query. This is equivalent to <code>total</code>
      in the <code>search:response</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     For a normal search operation, MarkLogic Server returns a 200 (OK) status, 
     whether there are search matches or not. If XML output is requested, the 
     response body contains a <code>search:reponse</code> node. If JSON output 
     is requested, the response body contains a JSON map with keys that closely 
     correspond to the <code>search:response</code> elements.
    </p><p>
     For a multi-document read, by default MarkLogic Server returns status
     200 (OK) only if there are matching documents and a 404 (Not Found) if
     there are no matching documents. If you use the <code>view</code>
     request parameter to include search results or facets in the response,
     then the return status is 200 (OK) whether there are matching documents
     or not.
    </p><p>
     For a multi-document read, the response body is multipart/mixed data
     containing content and/or metadata for each document that matches the
     input query. If you use a <code>view</code> parameter to include
     search results in the response, the search response, facets, or metadata
     are in the first part. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2365903'>Reading Multiple Documents Matching a Query</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     You can use this request as a simple database search operation that returns
     search results, or a multi-document read of content and/or metadata
     matching a query. A multi-document read can also return search results,
     but does not do so by default; see the <code>view</code> parameter.
     A multi-document read is distinguished from a normal search operation
     by setting the Accept header to <code>multipart/mixed</code>.
    </p><p>
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2365903'>Reading Multiple Documents Matching a Query</a> in the <em>REST Application Developer's Guide</em>
     and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2349329'>Querying Documents and Metadata</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The request body must contain either a structured query (a serialized
     representation of a <code>search:query</code>) or a combined query
     (a serialized representation of a <code>search:search</code>), 
     expressed as either XML or JSON. 
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/structured-query.xml%2392329'>Searching Using Structured Queries</a> in the <em>Search Developer's Guide</em> and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2369918'>Specifying Dynamic Query Options with Combined Query</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     When performing a multi-document read, use the <code>category</code> 
     parameter to specify whether to return content, metadata, and/or a 
     metadata subset for matching documents. By default, only content is 
     returned. Use the <code>view</code> parameter to include search results 
     and facets in the response. You can also use the <code>view</code>
     parameter to control results in a normal search operation.
    </p><p>
     For a normal search operation, you should usually use the Accept
     and Content-type headers to control the input and output content type.
     The <code>format</code> parameter is available as a fallback and as a
     means to indicate search result and metadata content type on a
     multi-document read.
    </p><p>
     Supply query options with the <code>options</code> request parameter
     or in the request body. If no query options are specified in 
     either the request parameter or the request body, MarkLogic Server uses 
     the configured default options. If no default options are configured, 
     MarkLogic Server uses the default Search API options. 
    </p><p>
     If the body contains a structured query, use the <code>options</code>
     request parameter to specify custom query options. If the body contains
     a combined query, use the <code>options</code> request parameter
     and/or the <code>options</code> component of the combined query.
    </p><p>
     If query options are supplied in both the <code>options</code> request
     parameter and the request body, the options are merged together. In cases
     of conflict, an option definition in the combined query overrides the
     one in the persistent options. Constraints defined in both option sources 
     are preserved; in the event of a constraint name collision, the constraint
     defined in the request body takes precedence.
    </p><p>
     Query options named in the <code>options</code> request parameter must
     be pre-installed using the <code>/config/query</code> service.
    </p><p id="combined-query">
     A combined query encapsulates options and query in a single object.
     A combined query can contain just options, just a structured query, 
     just a string query, or any combination of the three. 
    </p><p>
     Use the following template to construct a combined query in XML:
    </p><pre xml:space="preserve"><![CDATA[
<search:search xmlns:search="http://marklogic.com/appservices/search">
  <!-- Include a structured query and/or a string query -->
  <search:query>
    <!-- structured query using same syntax as standalone search:query -->
  </search:query>
  <search:qtext>your string query</search:qtext>
  <search:options>
    <!-- options using same syntax as standalone search:options -->
  </search:options>
</search:search> ]]></pre>
    <p>
     Use the following template to construct a combined query in JSON:
     </p><pre xml:space="preserve"><![CDATA[
{"search": {
  "query": { same syntax as a standalone structured query },
  "qtext": { "your string query here" },
  "options": { same syntax as standalone query options }
}} ]]></pre>
    <p>
     The query options within a combined query use the same option syntax
     as standalone, persistent query options; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixa.xml%2312592'>Appendix A: JSON Query Options Reference</a> in the <em>REST Application Developer's Guide</em>
     or
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixb.xml%2312592'>Appendix B: XML Query Options Reference</a> in the <em>REST Application Developer's Guide</em>.
     Similarly, the sub-queries in a combined query use the syntax of a 
     standalone structured or string query. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/structured-query.xml%2392329'>Searching Using Structured Queries</a> in the <em>Search Developer's Guide</em>
     or
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/string-query.xml%2346466'>Searching Using String Queries</a> in the <em>Search Developer's Guide</em>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2349329'>Querying Documents and Metadata</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat > s-query.txt
<search:query xmlns:search="http://marklogic.com/appservices/search">
  <search:near-query>
    <search:term>
      <search:text>infinite</search:text>
    </search:term>
    <search:term>
      <search:text>variety</search:text>
    </search:term>
    <search:distance>3</search:distance>
  </search:near-query>
</search:query>
^D

$ curl --anyauth --user user:password -X POST -d@'./s-query.txt' -i \
  -H "Content-type:application/xml"  http://localhost:8000/v1/search

==> Perform a query for "infinite" occurring within 3 terms of 
    "variety", and receive the search:response XML results in 
    the response body. The response has the following form:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Content-type: application/xml
Server: MarkLogic
Content-Length: 875
Connection: close

<search:response total="1" start="1" page-length="10" 
    xmlns="" xmlns:search="http://marklogic.com/appservices/search">
  <search:result index="1" uri="/shakespeare/plays/a_and_c.xml" 
       path="fn:doc(&quot;/shakespeare/plays/a_and_c.xml&quot;)" 
       score="43648" confidence="0.418356" fitness="0.50947">
    <search:snippet>
      <search:match path="...">
        Her <search:highlight>infinite</search:highlight>
        <search:highlight>variety</search:highlight>: other women cloy
      </search:match>
    </search:snippet>
  </search:result>
  <search:metrics>
    <search:query-resolution-time>
      PT1.087968S
    </search:query-resolution-time>
    <search:snippet-resolution-time>
      PT1.028637S
    </search:snippet-resolution-time>
    <search:total-time>PT2.117041S</search:total-time>
  </search:metrics>
</search:response>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./combined-query.xml
<search xmlns="http://marklogic.com/appservices/search">
  <qtext>alas</qtext>
  <query>
    <near-query>
      <term-query>
        <text>Yorick</text>
      </term-query>
      <term-query>
        <text>Horatio</text>
      </term-query>
    </near-query>
  </query>
  <options>
    <return-results>false</return-results>
    <return-metrics>false</return-metrics>
  </options>
</search>
$ curl --anyauth --user user:password -X POST -d@./combined-options \
    -i -H "content-type: application/xml" http://localhost:8000/v1/search

==> Perform a query for "Yorick" near "Horatio", using a combined query.
    Dynamic options in the POST body disable returning results and metrics.
    The response has the following form:

HTTP/1.1 200 OK
Content-type: application/xml; charset=utf-8
Server: MarkLogic
Content-Length: 189
Connection: Keep-Alive
Keep-Alive: timeout=5

<search:response snippet-format="snippet" total="1" start="1" page-length="10" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns="" xmlns:search="http://marklogic.com/appservices/search"/>

The following is the equivalent combined query request body as JSON:
{
  "search": {
    "qtext" : "alas",
    "query" : {
      "near-query" : {
        "term-query" : [ {"text" : "Yorick"}, {"text":"Horatio" } ]
      }
    },
    "options" : {
      "return-results" : false,
      "return-metrics" : false
    }
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/search" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove documents in a collection or directory, or clear the database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="collection?" type="string">
      Remove documents in the named collection.
    </apidoc:param>
    <apidoc:param name="directory?" type="string">
      Remove documents in the named directory.
    </apidoc:param>
  </apidoc:params>
  <apidoc:response>
    Upon success, MarkLogic Server returns a status 204.
  </apidoc:response>
  <apidoc:usage>
    <p>
     A request with no parameters removes all documents in all non-replica
     forests attached to the content database. The <code>rest-admin</code> 
     role is required for this operation. If the requesting user does not 
     have the required role, a 400 status is returned.
    </p><p>
     All other requests must supply either one directory or one collection.
     All matching documents in the directory or collection are deleted.
    </p><p>
     A request to remove selected documents, rather than a full database
     clear, requires the <code>rest-writer</code> role, and must include
     at least one <code>collection</code> or <code>directory</code> parameter.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    Deleting a directory or collection requires the <code>rest-writer</code> 
    role, or the following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>

    <p>Clearing the database requires the <code>rest-admin</code> role, or the 
    following privileges:</p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/keyvalue" http-verb="GET"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    THIS METHOD IS DEPRECATED; use /v1/search and /v1/qbe instead. 
    Query the database based on the value of a JSON key, XML element, or
    XML element attribute.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="key?" type="string">
      The name of a key in JSON content. The search is constrained to
      JSON key-value pairs with the specified key and a value matching
      the string passed in the <code>value</code> parameter. 
      For searching XML content, use <code>element</code> and, optionally,
      <code>attribute</code> instead of <code>key</code>.  Use of 
      <code>key</code> precludes the use of the <code>element</code> 
      or <code>attribute</code> parameters.
    </apidoc:param>
    <apidoc:param name="element?" type="string">
      The name of an XML element. The search is constrained to
      XML elements with a name matching the supplied string. For JSON
      content, use the <code>key</code> parameter instead. Use of 
      <code>element</code> precludes use of the <code>key</code> parameter.
    </apidoc:param>
    <apidoc:param name="attribute?" type="string">
      Identifies the name of an XML attribute on the element named by the
      <code>element</code> parameter. This parameter constrains the search 
      to attributes with the specified name found on elements matching the
      supplied <code>element</code>.  If you use this parameter, you
      must also set the <code>element</code> parameter and may not use
      the <code>key</code> parameter.
    </apidoc:param>
    <apidoc:param name="value" type="string">
      The value of the key, element, or element attribute to match. 
    </apidoc:param>
    <apidoc:param name="start?" type="string">
      The index of the first result to return. Results are numbered
      beginning with 1.  Default: 1.
    </apidoc:param>
    <apidoc:param name="pageLength?" type="string">
      The maximum number of results to return in this request.
      Default: 10, or the length configured by the query options.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service.
    </apidoc:param>
    <apidoc:param name="view?" type="string">
      The view of the search results to return in the response. Accepted
      values: <code>facets, results, metadata, all</code>. Default: 
      <code>all</code>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The type of the search results. This is equivalent to specifying
      the format in the Accept header. The <code>format</code> parameter
      overrides the Accept header if both are present. Accepted value:
      <code>xml</code> and <code>json</code>. Default: <code>xml</code>.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="collection*" type="string">
      Filter search results so they include only matches in the named 
      collection(s).
    </apidoc:param>
    <apidoc:param name="directory?" type="string">
      Filter search results so they only include matches from documents in
      the specified database directory.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response. Accepted values:
      <code>application/json</code> or <code>application/XML</code>. 
      Default: XML.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response. The results will be in
      either XML or JSON, depending upon the value of the <code>format</code>
      parameter or the Accept header.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    MarkLogic Server returns a 200 (OK) status, whether there are
    search matches or not. If XML output is requested, the response body 
    contains a <code>search:reponse</code> node. If JSON output is requested, 
    the response body contains a JSON map with keys that closely correspond 
    to the <code>search:response</code> elements.
  </apidoc:response>
  <apidoc:usage>
    <p>
     Use the <code>key</code> and <code>value</code> parameters to query 
     JSON documents inserted into the database using the <code>/documents</code>
     service. Use the <code>element</code> and <code>attribute</code>
     parameters with <code>value</code> to search XML documents.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     Query options must be pre-installed using the 
     <code>/config/query service</code>. If no query options are specified 
     with the <code>options</code> parameter, the global default options are 
     used.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2349329'>Querying Documents and Metadata</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
  'http://localhost:8000/v1/keyvalue?element=TITLE&value=Cymbeline'

==> A search:result for all documents occurrences of a TITLE element 
    with a value of "Cymbeline". MarkLogic Server returns the following:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Content-type: application/xml
Server: MarkLogic
Content-Length: 858
Connection: close

<search:response total="1" start="1" page-length="10" xmlns="" 
    xmlns:search="http://marklogic.com/appservices/search">
  <search:result index="1" uri="/shakespeare/plays/cymbelin.xml" 
      path="fn:doc(&quot;/shakespeare/plays/cymbelin.xml&quot;)" 
      score="17920" confidence="0.336069" fitness="0.336069">
    <search:snippet>
      <search:match 
         path="fn:doc(&quot;/shakespeare/plays/cymbelin.xml&quot;)/PLAY">
        <search:highlight>Cymbeline</search:highlight>
      </search:match>
    </search:snippet>
  </search:result>
  <search:metrics>
    <search:query-resolution-time>PT0.015515S</search:query-resolution-time>
    <search:facet-resolution-time>PT0.000118S</search:facet-resolution-time>
    <search:snippet-resolution-time>PT0.027884S</search:snippet-resolution-time>
    <search:total-time>PT0.044953S</search:total-time>
  </search:metrics>
</search:response>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
  -H "Accept: application/json" \
  'http://localhost:8000/v1/keyvalue?element=TITLE&value=Cymbeline'

==> A search:result for all documents occurrences of a TITLE element 
    with a value of "Cymbeline". MarkLogic Server returns the following
    (whitespace added for clarity):

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Content-type: application/json
Server: MarkLogic
Content-Length: 500
Connection: close

{
  "snippet-format": "snippet",
  "total": 1,
  "start": 1,
  "page-length": 10,
  "results": [
    {
      "index": 1,
      "uri": "/shakespeare/plays/cymbelin.xml",
      "path": "fn:doc(\"/shakespeare/plays/cymbelin.xml\")",
      "score": 15360,
      "confidence": 0.338445,
      "fitness": 0.338445,
      "matches": [
        {
          "path": "fn:doc(\"/shakespeare/plays/cymbelin.xml\")/PLAY",
          "match-text": [
            "\n",
            {
              "highlight": "Cymbeline"
            },
            "\n"
          ]
        }
      ]
    }
  ],
  "metrics": {
    "query-resolution-time": "PT0.009748S",
    "facet-resolution-time": "PT0.000087S",
    "snippet-resolution-time": "PT0.022979S",
    "total-time": "PT0.033092S"
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/qbe" http-verb="GET"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Search the database using a Query By Example or perform a multi-document
    read for documents that match a Query By Example.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="query?" type="string">
      A serialized Query By Example. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/qbe.xml%2346466'>Searching Using Query By Example</a> in the <em>Search Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="start?" type="string">
      The index of the first result to return. Results are numbered
      beginning with 1.  Default: 1.
    </apidoc:param>
    <apidoc:param name="pageLength?" type="string">
      The maximum number of results to return in this request.
      Default: 10, or the length configured by the query options.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service.
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to fetch about the matching documents. Category
      can be specified multiple times to retrieve any combination of content 
      and metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to request all 
      categories except <code>content</code>. You can only use this
      parameter when making a multi-document read request.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="view?" type="string">
      The view of the results to return. Accepted values:
      <code>results</code> or <code>structured</code>. Default:
      For a normal search operation, <code>results</code> (returns the 
      search results); for a multi-document read, <code>none</code> (return
      matching document content or metadata, but no search results). Use
      <code>structured</code> to return the combined query representation
      of your QBE, instead of search results or documents.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      You can use this parameter in conjunction with or instead of the
      the Accept header to indicate the output content type.
      The <code>format</code> parameter takes precedence over the Accept 
      header in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>. 
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="collection*" type="string">
      Filter search results to include only matches in the named 
      collection(s).
    </apidoc:param>
    <apidoc:param name="directory?" type="string">
      Filter search results to include only matches from documents in
      the specified database directory.
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a search result transformation previously installed via the 
      <code>/transforms</code> service. If a search response is returned,
      the transformation is applied 
      to the <code>&lt;search:response/&gt;</code> after applying
      user-defined transforms defined in the query options using
      <code>&lt;transform-results&gt;</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2394556'>Transforming the Search Response</a> in the <em>REST Application Developer's Guide</em>.
      On a multi-document read request, the transform is applied to each
      returned document as well as the search response (if a search response
      is requested).
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>. Transform parameter values are passed to 
      the transform named in the <code>transform</code> request parameter.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
      The expected MIME type of the response. Accepted values:
      <code>application/json</code>, <code>application/xml</code>,
      <code>multipart/mixed</code>. Default: <code>application/xml</code>. 
      When you use <code>multipart/mixed</code>, the request is a multi-document
      read rather than just a search; see the Usage Notes. If the Accept
      header and <code>format</code> parameter are both present, then
      <code>format</code> takes precedence if the Accept header is not
      set to <code>multipart/mixed</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response. Search results and metadata 
      will be in either XML or JSON, depending upon the value of the 
      <code>format</code> parameter (or the Accept header for a normal 
      search operation). For a multi-document read, the result
      is <code>multipart/mixed</code> response containing content and/or
      metadata, and optionally containing a search response. 
    </apidoc:header>
    <apidoc:header name="vnd.marklogic.start" type="response">
      For a multi-document read operation, the starting index of the
      results in the response. The header value is always 1 unless you
      use the <code>start</code> and <code>pageLength</code> parameters
      to incrementally retrieve results.
    </apidoc:header>
    <apidoc:header name="vnd.marklogic.pageLength" type="response">
      For a multi-document read operation, the number of results in
      the response. See the <code>pageLength</code> parameter.
    </apidoc:header>
    <apidoc:header name="vnd.marklogic.result-estimate" type="response">
      For a multi-document read operation, an estimate of the total number
      of matches to the input query. This is equivalent to <code>total</code>
      in the <code>search:response</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     For a normal search operation, MarkLogic Server returns a 200 (OK) status, 
     whether there are search matches or not. If XML output is requested, the 
     response body contains either a <code>search:reponse</code> node or a
     <code>search:query</code>, depending on the setting of the 
     <code>view</code> request parameter. If JSON output is requested,
     the response body contains a JSON map with keys that closely 
     correspond to the <code>search:response</code> or 
     <code>search:query</code> elements.
    </p><p>
     For a multi-document read, by default MarkLogic Server returns status
     200 (OK) only if there are matching documents and a 404 (Not Found) if
     there are no matching documents. If you use the <code>view</code>
     request parameter to include search results or a structured query 
     in the response, then the return status is 200 (OK) whether there 
     are matching documents or not.
    </p><p>
     For a multi-document read, the default response body is 
     <code>multipart/mixed</code> data containing content and/or metadata 
     for each document matching the input query. If you use a 
     <code>view</code> parameter to include search results in the response, 
     the search response is in the first part. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2365903'>Reading Multiple Documents Matching a Query</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     A Query By Example is an encapsulation of a query expressed as an
     annotated example of the target document(s). For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/qbe.xml%2346466'>Searching Using Query By Example</a> in the <em>Search Developer's Guide</em>.
     Set the <code>query</code> request parameter to a serialized Query
     By Example, expressed as either XML or JSON. 
    </p><p>
     Query By Example is intended primarily for rapid prototyping. Once
     you are satisfied with your query characteristics, you can use the
     <code>view=structured</code> request parameter to retrieve the
     structured query representation of your QBE, and use this
     representation with the <code>/search</code> or <code>/values</code>
     services for best performance.
    </p><p>
     You can use this request as a simple database search operation that returns
     search results, or a multi-document read of content and/or metadata
     matching a QBE. A multi-document read can also return search results,
     but does not do so by default; see the <code>view</code> parameter. A
     multi-document read is distinguished from a normal search operation by
     setting the Accept header to <code>multipart/mixed</code>; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2365903'>Reading Multiple Documents Matching a Query</a> in the <em>REST Application Developer's Guide</em>
    </p><p>
     You can combine validation with search by including both the
     <code>view=validate</code> and <code>view=results</code> request
     parameters in your search. No other <code>view</code> values may
     be used together.
    </p><p>
     Query options named in the <code>options</code> request parameter
     must be pre-installed using the <code>/config/query</code> service.
     If no query options are specified in the <code>options</code> request 
     parameter, MarkLogic Server uses the configured default options. If no 
     default options are configured, MarkLogic Server uses the default Search 
     API options. 
    </p><p>
     When MarkLogic Server evaluates a QBE, it constructs an equivalent
     structured query and query options. These query options are
     generated by merging the options required to realize the QBE
     with the general options in effect for the request (options specified
     through the <code>options</code> parameter or the default options).
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2346421'>Using Query By Example to Prototype a Query</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume you URL-encode the following query. This query searches for XML
documents containing an <author/> element containing the value "Mark Twain"
and an <edition/> element whose <code>format</code> parameter has the
value "paperback".
The following QBE matches XML documents containing an <author/> element with
the value "Mark Twain" and an <edition/> element with a <format/> attribute
with the value "paperback". URL-encode the query to use it in a GET request.

<q:qbe xmlns:q="http://marklogic.com/appservices/querybyexample">
  <q:query>
    <author>Mark Twain</author>
    <edition format="paperback"/>
  </q:query>
</q:qbe>

The following command searches using the URL-encoded query:

$ curl --anyauth --user user:password -i -X GET \
    -H "Content-type: application/xml" -H "Accept: application/xml" \
    'http://localhost:8000/v1/qbe?query=%3Cq%3Aqbe%20xmlns%3Aq%3D%22http%3A%2F%2Fmarklogic.com%2Fappservices%2Fquerybyexample%22%3E%3Cq%3Aquery%3E%3Cauthor%3EMark%20Twain%3C%2Fauthor%3E%3Cedition%20format%3D%22paperback%22%2F%3E%3C%2Fq%3Aquery%3E%3C%2Fq%3Aqbe%3E'

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 200 OK
Content-type: application/xml; charset=utf-8
Server: MarkLogic
Content-Length: 967
Connection: Keep-Alive
Keep-Alive: timeout=5

<search:response snippet-format="snippet" total="1" start="1" page-length="10" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="" 
    xmlns:search="http://marklogic.com/appservices/search">
  <search:result index="1" uri="/books/sawyer.xml" 
      path="fn:doc(&quot;/books/sawyer.xml&quot;)" score="50176" 
      confidence="0.646346" fitness="0.683733" 
      href="/v1/documents?uri=%2Fbooks%2Fsawyer.xml" 
      mimetype="text/xml" format="xml">
    <search:snippet>
      <search:match path="fn:doc(&quot;/books/sawyer.xml&quot;)/book">
        <search:highlight>Mark Twain</search:highlight>  
      </search:match>
    </search:snippet>
  </search:result>
  <search:metrics>
    <search:query-resolution-time>PT0.007064S</search:query-resolution-time>
    <search:facet-resolution-time>PT0.000095S</search:facet-resolution-time>
    <search:snippet-resolution-time>PT0.001345S</search:snippet-resolution-time>
    <search:total-time>PT0.010017S</search:total-time>
  </search:metrics>
</search:response>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
The following QBE matches JSON documents containing an "author" key with
the value "Mark Twain" and an "edition" key-value pair that contains a
"format" key with the value "paperback". URL-encode the query to use it 
in a GET request.

{ "$query": {
    "author": "Mark Twain",
    "edition": { "format": "paperback" }
} }

The following command searches using the URL-encoded query:

$ curl --anyauth --user user:password -i -X GET \
    -H "Content-type: application/json" -H "Accept: application/json" \
    'http://localhost:8000/v1/qbe?query=%7B%22%24query%22%3A%7B%22author%22%3A%22Mark%20Twain%22%2C%22edition%22%3A%7B%22format%22%3A%22paperback%22%7D%7D%7D'

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 706
Connection: Keep-Alive
Keep-Alive: timeout=5

{
  "snippet-format": "snippet",
  "total": 1,
  "start": 1,
  "page-length": 10,
  "results": [ {
      "index": 1,
      "uri": "/books/sawyer.json",
      "path": "fn:doc(\"/books/sawyer.json\")",
      "score": 50176,
      "confidence": 0.646346,
      "fitness": 0.683733,
      "href": "/v1/documents?uri=%2Fbooks%2Fsawyer.json",
      "mimetype": "application/json",
      "format": "text",
      "matches": [
        {
          "path": "fn:doc(\"/books/sawyer.json\")/*:json/*:book/*:author",
          "match-text": [ { "highlight": "Mark Twain" } ]
        },
        {
          "path": "fn:doc(\"/books/sawyer.json\")/*:json/*:book/*:edition/*:json[1]/*:format", 
          "match-text": [ { "highlight": "paperback" } ]
        }
      ]
  } ],
  "metrics": {
    "query-resolution-time": "PT0.003687S",
    "facet-resolution-time": "PT0.00007S",
    "snippet-resolution-time": "PT0.001083S",
    "total-time": "PT0.007423S"
  }
}
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
The following QBE matches JSON documents containing "myphrase". URL encode 
the query to use it in a GET request.

{ "$query": { "$word": "myphrase" } }

The following command uses the URL-encoded query above to retrieve the
contents of all documents matching the query:

$ curl --anyauth --user user:password -i -X GET \
    -H "Content-type: application/json" \
    -H "Accept: multipart/mixed; boundary=BOUNDARY" \
    'http://localhost:8000/v1/qbe?query=%7B%20%22%24query%22%3A%20%7B%20%22%24word%22%3A%20%22myphrase%22%20%7D%20%7D'

HTTP/1.1 200 OK
Content-type: multipart/mixed; boundary=BOUNDARY
vnd.marklogic.start: 1
vnd.marklogic.pageLength: 10
vnd.marklogic.result-estimate: 1
Server: MarkLogic
Content-Length: 185
Connection: Keep-Alive
Keep-Alive: timeout=5

--BOUNDARY
Content-Type: application/json
Content-Disposition: attachment; filename=doc2.json; category=content; 
                     format=json
Content-Length: 19

{"key":"some json"}
--BOUNDARY--
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/qbe" http-verb="POST"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Search the database using a Query By Example or perform a multi-document
    read for documents that match a Query By Example. The QBE is passed
    in the request body.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="start?" type="string">
      The index of the first result to return. The first result is index 1.
      Default: 1.
    </apidoc:param>
    <apidoc:param name="pageLength?" type="string">
      The maximum number of results to return in this request.
      Default: 10, or the length configured by the query options.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service.
    </apidoc:param>
    <apidoc:param name="category*" type="string">
      The category of data to fetch about the matching documents. Category
      can be specified multiple times to retrieve any combination of content 
      and metadata. Valid categories: <code>content</code> (default), 
      <code>metadata, collections, permissions, properties</code>, and 
      <code>quality</code>. Use <code>metadata</code> to request all 
      categories except <code>content</code>. You can only use this
      parameter when making a multi-document read request.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="view*" type="string">
      The view of the search results to return. Accepted values:
      <code>result</code>, <code>validate</code>, or <code>structured</code>. 
      Default: For a normal search operation, <code>result</code>, which 
      returns the search results; for a multi-document read, <code>none</code>
      (return matching document content and/or metadata, but no search results).
      Use <code>structured</code> to return the combined query representation
      of your QBE, instead of search results or content. Use 
      <code>validate</code> alone to validate your query without performing 
      a search. Combine <code>validate</code> and <code>result</code> to 
      validate your query and proceed with the search only if the query is 
      valid. For details, see the Usage Notes.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      You can use this parameter in conjunction with or instead of the
      request Content-type and Accept headers to indicate the input
      and/or output content type. The Content-type header takes precedence 
      over <code>format</code> in most cases.
      <code>format</code> takes precedence over the Accept header
      in most cases. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>. 
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="collection*" type="string">
      Filter search results so they include only matches in the named 
      collection(s).
    </apidoc:param>
    <apidoc:param name="directory?" type="string">
      Filter search results so they only include matches from documents in
      the specified database directory.
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a search result transformation previously installed via the 
      <code>/transforms</code> service. If a search response is returned,
      the transformation is applied 
      to the <code>&lt;search:response/&gt;</code> after applying
      user-defined transforms defined in the query options using
      <code>&lt;transform-results&gt;</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2394556'>Transforming the Search Response</a> in the <em>REST Application Developer's Guide</em>.
      On a multi-document read request, the transform is applied to each
      returned document as well as the search response (if a search response
      is requested).
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>. Transform parameters are passed to 
      the transform named in the <code>transform</code> parameter.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
      The expected MIME type of the response. Accepted values:
      <code>application/json</code>, <code>application/xml</code>,
      <code>multipart/mixed</code>. Default: <code>application/xml</code>. 
      When you use <code>multipart/mixed</code>, the request is a multi-document
      read rather than just a search; see the Usage Notes. If the Accept
      header and <code>format</code> parameter are both present, then
      <code>format</code> takes precedence if the Accept header is not
      set to <code>multipart/mixed</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-Type*" type="request">
      The MIME type of the data in the POST body. Accepted values:
      <code>application/json</code> or <code>application/xml</code>. 
      The <code>format</code> parameter value is used if Content-type is not
      set or is set to an incompatible or unknown value.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response. Search results and metadata 
      will be in either XML or JSON, depending upon the value of the 
      <code>format</code> parameter (or the Accept header for a normal 
      search operation). For a multi-document read, the result
      is <code>multipart/mixed</code> response containing content and/or
      metadata, and optionally containing a search response. 
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     For a normal search operation, MarkLogic Server returns a 200 (OK) status, 
     whether there are search matches or not. If XML output is requested, the 
     response body contains either a <code>search:reponse</code> node or a
     <code>search:query</code>, depending on the setting of the 
     <code>view</code> request parameter. If JSON output is requested,
     the response body contains a JSON map with keys that closely 
     correspond to the <code>search:response</code> or 
     <code>search:query</code> elements.
    </p><p>
     For a multi-document read, by default MarkLogic Server returns status
     200 (OK) only if there are matching documents and a 404 (Not Found) if
     there are no matching documents. If you use the <code>view</code>
     request parameter to include search results or a structured query 
     in the response, then the return status is 200 (OK) whether there 
     are matching documents or not.
    </p><p>
     For a multi-document read, the default response body is 
     <code>multipart/mixed</code> data containing content and/or metadata 
     for each document matching the input query. If you use a 
     <code>view</code> parameter to include search results in the response, 
     the search response is in the first part. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2365903'>Reading Multiple Documents Matching a Query</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     A Query By Example (QBE) is an encapsulation of a query expressed as an
     annotated example of the target document(s). Selected portions of
     the query may be modified by embedded query options. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/qbe.xml%2346466'>Searching Using Query By Example</a> in the <em>Search Developer's Guide</em>.
    </p><p>
     QBE is intended primarily for rapid prototyping. Once
     you are satisfied with your query characteristics, you can use the
     <code>view=structured</code> request parameter to retrieve the
     structured query representation of your QBE and use the structured
     query with the <code>/search</code> or <code>/values</code>
     services for best performance.
    </p><p>
     You can use this request as a simple database search operation that returns
     search results, or a multi-document read of content and/or metadata
     matching a QBE. A multi-document read can also return search results,
     but does not do so by default; see the <code>view</code> parameter. A
     multi-document read is distinguished from a normal search operation by
     setting the Accept header to <code>multipart/mixed</code>; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/bulk.xml%2365903'>Reading Multiple Documents Matching a Query</a> in the <em>REST Application Developer's Guide</em>
    </p><p>
     The request body must contain a QBE, expressed in either XML or
     JSON. Set the Content-Type header appropriately. For query syntax, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/qbe.xml%2346466'>Searching Using Query By Example</a> in the <em>Search Developer's Guide</em>.
    </p><p>
     You can combine validation with search by including both the
     <code>view=validate</code> and <code>view=results</code> request
     parameters in your search. No other <code>view</code> values may
     be used together. If you use <code>view=validate</code> alone, no
     search is performed, and the request returns validation results.
    </p><p>
     Query options named in the <code>options</code> request parameter
     must be pre-installed using the <code>/config/query</code> service.
     If no query options are specified in the <code>options</code> request 
     parameter, MarkLogic Server uses the configured default options. If no 
     default options are configured, MarkLogic Server uses the default Search 
     API options. 
    </p><p>
     When MarkLogic Server processes a Query By Example, it constructs an 
     equivalent structured query and query options. These query options are
     generated by merging the options required to realize the QBE
     with the general options in effect for the request (options specified
     through the <code>options</code> parameter or the default options).
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2346421'>Using Query By Example to Prototype a Query</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
The following QBE matches XML documents containing an <author/> element 
that contain the value "Mark Twain" and an <edition/> element whose 
<code>format</code> attribute has the value "paperback".

$ cat qbe.xml
<q:qbe xmlns:q="http://marklogic.com/appservices/querybyexample">
  <q:query>
    <author>Mark Twain</author>
    <edition format="paperback"/>
  </q:query>
</q:qbe>

The following command performs a search by passing the above query in 
the POST body:

$ curl --anyauth --user user:password -i -X POST -d @./qbe.xml \
    -H "Content-type: application/xml" -H "Accept: application/xml" \
    http://localhost:8000/v1/qbe

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 200 OK
Content-type: application/xml; charset=utf-8
Server: MarkLogic
Content-Length: 967
Connection: Keep-Alive
Keep-Alive: timeout=5

<search:response snippet-format="snippet" total="1" start="1" page-length="10" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    xmlns="" xmlns:search="http://marklogic.com/appservices/search">
  <search:result index="1" uri="/books/sawyer.xml" 
      path="fn:doc(&quot;/books/sawyer.xml&quot;)" score="50176" 
      confidence="0.646346" fitness="0.683733" 
      href="/v1/documents?uri=%2Fbooks%2Fsawyer.xml" 
      mimetype="text/xml" format="xml">
    <search:snippet>
      <search:match path="fn:doc(&quot;/books/sawyer.xml&quot;)/book">
        <search:highlight>Mark Twain</search:highlight>  
      </search:match>
    </search:snippet>
  </search:result>
  <search:metrics>
    <search:query-resolution-time>PT0.007064S</search:query-resolution-time>
    <search:facet-resolution-time>PT0.000095S</search:facet-resolution-time>
    <search:snippet-resolution-time>PT0.001345S</search:snippet-resolution-time>
    <search:total-time>PT0.010017S</search:total-time>
  </search:metrics>
</search:response>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
The following QBE matches JSON documents containing an "author" key with
the value "Mark Twain" and an "edition" key-value pair that contains a
"format" key with the value "paperback". 

$ cat qbe.json
{ "$query": {
    "author": "Mark Twain",
    "edition": { "format": "paperback" }
} }

The following command performs a search by passing the above QBE in the
POST body:

$ curl --anyauth --user user:password -i -X POST -d @./qbe.json \
    -H "Content-type: application/json" -H "Accept: application/json" \
    http://localhost:8000/v1/qbe

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: Keep-Alive
Keep-Alive: timeout=5

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 706
Connection: Keep-Alive
Keep-Alive: timeout=5

{
  "snippet-format": "snippet",
  "total": 1,
  "start": 1,
  "page-length": 10,
  "results": [ {
      "index": 1,
      "uri": "/books/sawyer.json",
      "path": "fn:doc(\"/books/sawyer.json\")",
      "score": 50176,
      "confidence": 0.646346,
      "fitness": 0.683733,
      "href": "/v1/documents?uri=%2Fbooks%2Fsawyer.json",
      "mimetype": "application/json",
      "format": "text",
      "matches": [
        {
          "path": "fn:doc(\"/books/sawyer.json\")/*:json/*:book/*:author",
          "match-text": [ { "highlight": "Mark Twain" } ]
        },
        {
          "path": "fn:doc(\"/books/sawyer.json\")/*:json/*:book/*:edition/*:json[1]/*:format", 
          "match-text": [ { "highlight": "paperback" } ]
        }
      ]
  } ],
  "metrics": {
    "query-resolution-time": "PT0.003687S",
    "facet-resolution-time": "PT0.00007S",
    "snippet-resolution-time": "PT0.001083S",
    "total-time": "PT0.007423S"
  }
}
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
The following QBE matches JSON documents containing "myphrase". URL encode 
the query to use it in a GET request.

{ "$query": { "$word": "myphrase" } }

The following command passes the query above in the POST body
to retrieve the contents of all documents matching the query:

$ curl --anyauth --user user:password -i -X POST -d @./qbe.json \
    -H "Content-type: application/json" \
    -H "Accept: multipart/mixed; boundary=BOUNDARY" \
    'http://localhost:8000/v1/qbe'

HTTP/1.1 200 OK
Content-type: multipart/mixed; boundary=BOUNDARY
vnd.marklogic.start: 1
vnd.marklogic.pageLength: 10
vnd.marklogic.result-estimate: 1
Server: MarkLogic
Content-Length: 185
Connection: Keep-Alive
Keep-Alive: timeout=5

--BOUNDARY
Content-Type: application/json
Content-Disposition: attachment; filename=doc2.json; category=content; 
                     format=json
Content-Length: 19

{"key":"some json"}
--BOUNDARY--
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/values" http-verb="GET"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve a list of lexicon configurations available for use with
    <code>GET /v1/values/{name}</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      Specifies the MIME type of the response content, as an alternative to
      specifying format via the Accept header. Accepted values:
      <code>json</code> and <code>xml</code> (default). If there is no
      format parameter, the format must be specified in the Accept header.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The query options for which to list available lexicon configurations.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or <code>Accept</code> header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     Upon success, MarkLogic Server returns a 200 status, with an XML or JSON 
     listing of available named lexicon configurations in the response body.
    </p><p>
     MarkLogic Server returns a 400 (Bad Request) if no query options
     match the value of the <code>options</code> parameter.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     Query options named in the <code>options</code> request parameter must
     be pre-installed using the <code>/config/query service</code>. 
     If no <code>options</code> parameter is given, this method lists
     available &lt;values&gt; and &lt;tuples&gt;
     from the configured default options. If there are no default options,
     the global Search API options are used. Use the 
     <code>/config/query/{name}</code> service to create named query options.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     For more information on defining queryable lexicons and indexes, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2344186'>Identifying Lexicon and Range Index Values in Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Given the following query options are installed under the name "values":

<options xmlns="http://marklogic.com/appservices/search">
  <values name="speaker">
    <range type="xs:string">
      <element ns="" name="SPEAKER"/>
    </range>
  </values>
  <tuples name="speaker-title">
    <range type="xs:string">
      <element ns="" name="SPEAKER"/>
    </range>
    <range type="xs:string">
      <path-index>/PLAY/ACT/SCENE/TITLE</path-index>
    </range>
  </tuples>
</options>

$ curl --anyauth --user user:password -X GET -H "Accept: application/xml" \
    'http://localhost:8004/v1/values?options=ex-values'

==> An XML report of the lexicon queries available through /values/{name}:

<rapi:values-list xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:values>
    <rapi:name>speaker</rapi:name>
    <rapi:uri>/v1/values/speaker?options=values</rapi:uri>
  </rapi:values>
  <rapi:values>
    <rapi:name>speaker-title</rapi:name>
    <rapi:uri>/v1/values/speaker-title?options=values</rapi:uri>
  </rapi:values>
</rapi:values-list>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Given the following query options installed under the name "ex-values":

{ "options": {
    "values": [
      {
        "name": "speaker",
        "range": {
          "type": "xs:string",
          "element": {
            "ns": "",
            "name": "SPEAKER"
          }
        }
      }
    ],
    "tuples": [ {
        "name": "speaker-title",
        "range": [
          {
            "type": "xs:string",
            "element": {
              "ns": "",
              "name": "SPEAKER"
            }
          },
          {
            "type": "xs:string",
            "path-index": { "text": "/PLAY/ACT/SCENE/TITLE" }
          }
        ]
    } ]
} }

$ curl --anyauth --user user:password -X GET -H "Accept: application/json" \
    'http://localhost:8004/v1/values?options=ex-values'

==> A JSON report of the lexicon queries available through /values/{name}:
{
  "values-list": {
    "values": [
      {
        "name": "speaker",
        "uri": "/v1/values/speaker?options=values"
      },
      {
        "name": "speaker-title",
        "uri": "/v1/values/speaker-title?options=values"
      }
    ]
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/values/{name}" http-verb="GET"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Query the values in a lexicon or range index, or find co-occurrences
    of values in multiple range indexes. Optionally apply an aggregate function
    to the values or co-occurrences.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="q?" type="string">
      A string query. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/search-api.xml%2341745'>Automatic Query Text Parsing and Grammar</a> in the <em>Search Developer's Guide</em>
      and <code>cts:query</code>.
    </apidoc:param>
    <apidoc:param name="structuredQuery?" type="string">
      A structured search query string. That is, a serialized representation
      of a <code>search:query</code> element. See 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/structured-query.xml%2392329'>Searching Using Structured Queries</a> in the <em>Search Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="view?" type="string">
      The view of the query results to return in the response. Accepted
      values: <code>values, aggregate, all</code>. Default: <code>all</code>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The type of the search results. This is equivalent to specifying
      the format in the Accept header. The <code>format</code> parameter
      overrides the Accept header if both are present. Accepted value:
      <code>xml</code> and <code>json</code>. Default: <code>xml</code>.
      For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="collection*" type="string">
      Filter results to include only matches in the named collection(s).
    </apidoc:param>
    <apidoc:param name="directory?" type="string">
      Filter results to include only matches from documents in the
      specified database directory.
    </apidoc:param>
    <apidoc:param name="direction?" type="string">
      The sort order of returned results. Accepted values:
      <code>ascending</code> or <code>descending</code>. The default direction
      depends on the sort order defined in the <code>options</code>. The
      default is <code>ascending</code> for <code>item-order</code> and
      <code>descending</code> for <code>frequency-order</code>.
    </apidoc:param>
    <apidoc:param name="frequency?" type="string">
      The method of calculating frequency. Accepted values: <code>item</code>
      (default) or <code>fragment</code>. Fragment frequency returns the
      number of fragments with an included value. Item frequency returns 
      the total number occurrences of an included value.
    </apidoc:param>
    <apidoc:param name="limit?" type="string">
      The maximum number of values or tuples to retrieve from the lexicon. 
      Default: No limit.
    </apidoc:param>
    <apidoc:param name="start?" type="string">
      The index of the first result to return from the subset defined
      by <code>limit</code>. Results are numbered beginning with 1. Default: 1.
    </apidoc:param>
    <apidoc:param name="pageLength?" type="string">
      The number of values to return within the subset of values
      defined by <code>limit</code>, beginning with the value selected
      by <code>start</code>. Default: Return all selected values.
    </apidoc:param>
    <apidoc:param name="aggregate?" type="string">
      The name of a built-in or user-defined aggregate function to run
      against the lexicon. If the function is not a built-in aggregate,
      you must also supply <code>aggregatePath</code>. The supported
      builtin aggregate functions are: <code>sum</code>, <code>avg</code>, 
      <code>min</code>, <code>max</code>, <code>median</code>, 
      <code>count</code>, <code>stddev</code>, <code>stddev-population</code>, 
      <code>correlation</code>, <code>covariance</code>, 
      <code>covariance-population</code>, <code>variance</code>, 
      <code>variance-population</code>.
    </apidoc:param>
    <apidoc:param name="aggregatePath?" type="string">
      The path to the native plugin library containing the implementation of
      the function named by the <code>aggregate</code> function. If the
      path is empty or is not specified, a built-in aggregate is assumed.
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a search result transformation previously installed via the 
      <code>/transforms</code> service. The transformation is applied 
      to the <code>&lt;search:response/&gt;</code> after applying
      user-defined transforms defined in the query options using
      <code>&lt;transform-results&gt;</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2394556'>Transforming the Search Response</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>. Transform parameters are passed to 
      the transform named in the <code>transform</code> parameter.
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the /transactions service to
      create and manage multi-statement transactions.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or <code>Accept</code> header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     On success, MarkLogic Server responds with a 200 status and the query 
     results in the response body.
    </p><p>
     If you use an aggregate function and the target lexicon type does not 
     support the chosen operation, such as <code>stddev</code> on a string
     valued lexicon, or if the aggregate function does not exist,
     MarkLogic Server responds with a 400 (Bad Request) status, with
     additional error information in the response body.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     Query options named in the <code>options</code> request parameter must
     be pre-installed using the <code>/config/query service</code>. 
     If no query options are specified, MarkLogic Server uses the configured
     default options. If no default options are configured, MarkLogic 
     Server uses the default Search API options. To configure query options,
     use the <code>/config/query</code> service.
    </p><p>
     When you apply a builtin or user defined aggregate function, the
     output is dependent on the function. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2372369'>Analyzing Lexicons and Range Indexes With Aggregate Functions</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2324780'>Querying Lexicons and Range Indexes</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following query options are installed with the name "index-options":

<options xmlns="http://marklogic.com/appservices/search">
    <values name="speaker">
        <range type="xs:string">
            <element ns="" name="SPEAKER"/>
        </range>
    </values>
</options>

$ curl --anyauth --user user:password -X GET \
    http://localhost:8000/v1/values/speaker?options=index-options

==> The distinct values of the SPEAKER element in element range index, as XML.

<values-response name="speaker" type="xs:string" \
    xmlns="http://marklogic.com/appservices/search" \
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <distinct-value frequency="1">[GOWER]</distinct-value>
  <distinct-value frequency="1">[PROSPERO]</distinct-value>
  ...
</values-response>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following query options are installed with the name "index-options":

{
  "options": {
    "values": [
      {
        "name": "speaker",
        "range": {
          "type": "xs:string",
          "element": { "ns": "", "name": "SPEAKER" }
        }
      }
    ]
  }
}

$ curl --anyauth --user user:password -X GET \
    http://localhost:8000/v1/values/speaker?options=index-options

==> The distinct values of the SPEAKER element in element range index, as JSON.
{
  "values-response": {
    "name": "speaker",
    "type": "xs:string",
    "distinct-value": [
      {
        "frequency": 1,
        "_value": "[GOWER]"
      },
      {
        "frequency": 1,
        "_value": "[PROSPERO]"
      },
      ...
    ],
    "metrics": {
      "values-resolution-time": "PT0.016665S",
      "aggregate-resolution-time": "PT0.00001S",
      "total-time": "PT0.018102S"
    }
  }
}
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following query options are installed with the name "index-options":

<options xmlns="http://marklogic.com/appservices/search">
    <values name="speaker">
        <range type="xs:string">
            <element ns="" name="SPEAKER"/>
        </range>
    </values>
</options>

$ curl --anyauth --user user:password -X GET \
    'http://localhost:8000/v1/values/speaker?options=index-options&limit=10&start=4&pageLength=3'

==> The 4th through the 6th distinct values of the SPEAKER element in 
    element range index, as XML.

<values-response name="speaker" type="xs:string" \
    xmlns="http://marklogic.com/appservices/search" \
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <distinct-value frequency="1">A Lord</distinct-value>
  <distinct-value frequency="2">A Patrician</distinct-value>
  <distinct-value frequency="1">A Player</distinct-value>
  <metrics>
    <values-resolution-time>PT0.000258S</values-resolution-time>
    <total-time>PT0.002038S</total-time>
  </metrics>
</values-response>
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/values/{name}" http-verb="POST"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Query the values in a lexicon or range index, or find co-occurrences
    of values in multiple range indexes. Optionally apply an aggregate function
    to the values or co-occurrences. Query and query options are passed in
    the POST body.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="q?" type="string">
      A string query. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/search-api.xml%2341745'>Automatic Query Text Parsing and Grammar</a> in the <em>Search Developer's Guide</em>
      and <code>cts:query</code>. This query is AND'd with the query(s) in
      the request body.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="view?" type="string">
      The view of the query results to return in the response. Accepted
      values: <code>values, aggregate, all</code>. Default: <code>all</code>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      You can use this parameter in conjunction with or instead of the
      request Content-type and Accept headers to indicate the input
      and/or output content type. The Content-type header takes precedence 
      over <code>format</code> in most cases.
      <code>format</code> takes precedence over the Accept header
      in most cases. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>. 
    </apidoc:param>
    <apidoc:param name="txid?" type="string">
      The transaction identifier of the multi-statement transaction in
      which to service this request. Use the <code>/transactions</code> 
      service to create and manage multi-statement transactions.
    </apidoc:param>
    <apidoc:param name="direction?" type="string">
      The sort order of returned results. Accepted values:
      <code>ascending</code> or <code>descending</code>. The default direction
      depends on the sort order defined in the <code>options</code>. The
      default is <code>ascending</code> for <code>item-order</code> and
      <code>descending</code> for <code>frequency-order</code>.
    </apidoc:param>
    <apidoc:param name="directory?" type="string">
      Filter results to include only matches from documents in the
      specified database directory.
    </apidoc:param>
    <apidoc:param name="frequency?" type="string">
      The method of calculating frequency. Accepted values: <code>item</code>
      (default) or <code>fragment</code>. Fragment frequency returns the
      number of fragments with an included value. Item frequency returns 
      the total number occurrences of an included value.
    </apidoc:param>
    <apidoc:param name="limit?" type="string">
      The maximum number of values or tuples to retrieve from the lexicon. 
      Default: No limit.
    </apidoc:param>
    <apidoc:param name="start?" type="string">
      The index of the first result to return from the subset defined
      by <code>limit</code>. Results are numbered beginning with 1. Default: 1.
    </apidoc:param>
    <apidoc:param name="pageLength?" type="string">
      The number of values to return within the subset of values
      defined by <code>limit</code>, beginning with the value selected
      by <code>start</code>. Default: Return all selected values.
    </apidoc:param>
    <apidoc:param name="aggregate?" type="string">
      The name of a built-in or user-defined aggregate function to run
      against the lexicon. If the function is not a built-in aggregate,
      you must also supply <code>aggregatePath</code>. The supported
      builtin aggregate functions are: <code>sum</code>, <code>avg</code>, 
      <code>min</code>, <code>max</code>, <code>median</code>, 
      <code>count</code>, <code>stddev</code>, <code>stddev-population</code>, 
      <code>correlation</code>, <code>covariance</code>, 
      <code>covariance-population</code>, <code>variance</code>, 
      <code>variance-population</code>.
    </apidoc:param>
    <apidoc:param name="aggregatePath?" type="string">
      The path to the native plugin library containing the implementation of
      the function named by the <code>aggregate</code> function. If the
      path is empty or is not specified, a built-in aggregate is assumed.
    </apidoc:param>
    <apidoc:param name="transform?" type="string">
      Names a search result transformation previously installed via the 
      <code>/transforms</code> service. The transformation is applied 
      to the <code>&lt;search:response/&gt;</code> after applying
      user-defined transforms defined in the query options using
      <code>&lt;transform-results&gt;</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2394556'>Transforming the Search Response</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      A transform parameter name and value. For example, 
      <code>trans:myparam=1</code>. Transform parameters are passed to 
      the transform named in the <code>transform</code> parameter.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the data in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Setting the <code>format</code> 
     parameter overrides this header. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="request">
      The MIME type of the data in the POST body. Accepted values:
      <code>application/json</code> or <code>application/XML</code>. 
      For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response. The results will be in
      either XML or JSON, depending upon the value of the <code>format</code>
      parameter or the Accept header.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     On success, MarkLogic Server responds with a 200 status and the query 
     results in the response body.
    </p><p>
     If you use an aggregate function and the target lexicon type does not 
     support the chosen operation, such as <code>stddev</code> on a string
     valued lexicon, or if the aggregate function does not exist,
     MarkLogic Server responds with a 400 (Bad Request) status, with
     additional error information in the response body. 
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     The <em>{name}</em> portion of the URL must match the name of 
     a <code>values</code> or <code>tuples</code> specification in the 
     in-scope query options (in the POST body, in persistent query options
     or in the default query options). See below for details on how the
     in-scope query options are determined.
    </p><p>
     Use a query in the <code>q</code> request parameter and/or the request
     body to limit the returned values to those occurring in fragments that
     match the query. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2396363'>Using a Query to Constrain Results</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The request body must contain either a structured query (a serialized
     representation of a <code>search:query</code>) or a combined query
     (a serialized representation of a <code>search:search</code>), 
     expressed as either XML or JSON. 
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/structured-query.xml%2392329'>Searching Using Structured Queries</a> in the <em>Search Developer's Guide</em> and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2369918'>Specifying Dynamic Query Options with Combined Query</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The <code>format</code> parameter always overrides the Accept header and
     can be used as a fallback for the Content-type header. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
     If you do not use the <code>format</code>
     parameter or an Accept header, an XML response is returned.
    </p><p>
     Supply query options with the <code>options</code> request parameter
     or in the request body. If no query options are specified in 
     either the request parameter or the request body, MarkLogic Server uses 
     the configured default options. If no default options are configured, 
     MarkLogic Server uses the default Search API options. 
    </p><p>
     If the body contains a structured query, use the <code>options</code>
     request parameter to specify custom query options. If the body contains
     a combined query, use the <code>options</code> request parameter
     and/or the <code>options</code> component of the combined query.
    </p><p>
     If query options are supplied in both the <code>options</code> request
     parameter and the request body, the options are merged together. In cases
     of conflict, an option definition in the combined query overrides the
     one in the persistent options. Constraints defined in both option sources 
     are preserved; in the event of a constraint name collision, the constraint
     defined in the request body takes precedence.
    </p><p>
     Query options named in the <code>options</code> request parameter must
     be pre-installed using the <code>/config/query</code> service.
    </p><p>
     For details on using a combined query, see
     <a href="#POST:/v1/search#combined-query"><code>POST /v1/search</code></a>.
    </p><p>
     When you apply a builtin or user defined aggregate function, the
     output is dependent on the function. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2372369'>Analyzing Lexicons and Range Indexes With Aggregate Functions</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2324780'>Querying Lexicons and Range Indexes</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following query options are installed with the name "index-options":

<options xmlns="http://marklogic.com/appservices/search">
    <values name="speaker">
        <range type="xs:string">
            <element ns="" name="SPEAKER"/>
        </range>
    </values>
</options>

$ cat query.xml
<query xmlns="http://marklogic.com/appservices/search">
  <near-query>
    <term-query>
      <text>Yorick</text>
    </term-query>
    <term-query>
      <text>Horatio</text>
    </term-query>
  </near-query>
</query>

$ curl --anyauth --user user:password -X POST -d@./query.xml \
    -H "Content-type: application/xml" -i \
    http://localhost:8000/v1/values/speaker?options=index-options

==> The distinct values of the SPEAKER element in element range index, for
    fragments that match the query "Yorick NEAR Horatio", expressed as a
    structured query in the POST body. The results are returned as XML.

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 827
Connection: Keep-Alive
Keep-Alive: timeout=5

<values-response name="speaker" type="xs:string" 
    xmlns="http://marklogic.com/appservices/search" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
  ...
  <distinct-value frequency="1">HAMLET</distinct-value>
  <distinct-value frequency="1">HORATIO</distinct-value>
  <distinct-value frequency="1">KING CLAUDIUS</distinct-value>
  ...
  <metrics>
    <values-resolution-time>PT0.001943S</values-resolution-time>
    <total-time>PT0.003052S</total-time>
  </metrics>
</values-response>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following query options are installed with the name "index-options":

{
  "options": {
    "values": [
      {
        "name": "speaker",
        "range": {
          "type": "xs:string",
          "element": { "ns": "", "name": "SPEAKER" }
        }
      }
    ]
  }
}

$ cat query.json
{
  "query" : {
    "near-query" : {
      "term-query" : [ {"text" : "Yorick"}, {"text":"Horatio" } ]
    }
  }
}

$ curl --anyauth --user user:password -X POST -d@./query.json -i \
    -H "Content-type: application/json" -H "Accept: application/json" \
    'http://localhost:8000/v1/values/speaker?options=index-options'

==> The distinct values of the SPEAKER element in element range index, for
    fragments that match the query "Yorick NEAR Horatio", expressed as a
    JSON structured query in the POST body. The results are returned as JSON.

{
  "values-response": {
    "name": "speaker",
    "type": "xs:string",
    "distinct-value": [
      ...
      {
        "frequency": 1,
        "_value": "HAMLET"
      },
      {
        "frequency": 1,
        "_value": "HORATIO"
      },
      {
        "frequency": 1,
        "_value": "KING CLAUDIUS"
      },
      ...
    ],
    "metrics": {
      "values-resolution-time": "PT0.002033S",
      "total-time": "PT0.004128S"
    }
  }
}
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following query options are installed with the name "index-options":

<options xmlns="http://marklogic.com/appservices/search">
    <values name="speaker">
        <range type="xs:string">
            <element ns="" name="SPEAKER"/>
        </range>
    </values>
</options>

$ cat query.xml
<search xmlns="http://marklogic.com/appservices/search">
  <query>
    <near-query>
      <term-query>
        <text>Yorick</text>
      </term-query>
      <term-query>
        <text>Horatio</text>
      </term-query>
    </near-query>
  </query>
  <options>
    <return-metrics>false</return-metrics>
  </options>
</search>

$ curl --anyauth --user user:password -X POST -d@./query.xml \
    -H "Content-type: application/xml" -i \
    'http://localhost:8000/v1/values/speaker?options=index-options

==> The distinct values of the SPEAKER element in element range index, for
    fragments that match the query "Yorick NEAR Horatio", expressed as an
    XML combined query in the POST body. Dynamic options in the combined
    query disable including metrics in the results. The results are returned 
    as XML.

<values-response name="speaker" type="xs:string" 
    xmlns="http://marklogic.com/appservices/search" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
  ...
  <distinct-value frequency="1">HAMLET</distinct-value>
  <distinct-value frequency="1">HORATIO</distinct-value>
  <distinct-value frequency="1">KING CLAUDIUS</distinct-value>
  <distinct-value frequency="1">LAERTES</distinct-value>
  <distinct-value frequency="1">QUEEN GERTRUDE</distinct-value>
  <distinct-value frequency="1">Second Clown</distinct-value>
</values-response>

The following is the same combined query, expressed as JSON:

{
  "search" : {
    "query" : {
      "near-query" : {
        "term-query" : [ {"text" : "Yorick"}, {"text":"Horatio" } ]
      }
    },
    "options" : {
      "return-metrics" : false
    }
  }
}
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat combined-query.xml
<search xmlns="http://marklogic.com/appservices/search">
  <options xmlns="http://marklogic.com/appservices/search">
    <constraint name="title">
      <word>
        <element ns="" name="TITLE" />
      </word>
    </constraint>
    <values name="speaker">
        <range type="xs:string">
            <element ns="" name="SPEAKER"/>
        </range>
    </values>
    <return-metrics>false</return-metrics>
  </options>
  <query xmlns="http://marklogic.com/appservices/search">
    <word-constraint-query>
      <constraint-name>title</constraint-name>
      <text>hamlet</text>
    </word-constraint-query>
  </query>
</search>

$ curl --anyauth --user user:password -X POST -d@./combined-query.xml \
    'http://localhost:8000/v1/values/speaker?limit=10&start=4&pageLength=3'

==> The 4th through the 6th values from the set of 10 distinct values
    retrieved from the SPEAKER lexicon, as XML. The results retrieved
    from the lexicon are constrained to those in documents with the word
    "hamlet" in the title.

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 341
Connection: Keep-Alive
Keep-Alive: timeout=5

<values-response name="speaker" type="xs:string" 
    xmlns="http://marklogic.com/appservices/search" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <distinct-value frequency="1">CORNELIUS</distinct-value>
  <distinct-value frequency="1">Danes</distinct-value>
  <distinct-value frequency="1">First Ambassador</distinct-value>
</values-response>

The following is the equivalent POST body as JSON:

{ "search": {
    "query": {
      "word-constraint-query": {
        "constraint-name": "title",
        "text": "hamlet"
    } },
    "options": {
      "values": {
        "name": "speaker",
        "range": {
          "type": "xs:string",
          "element": { "name": "SPEAKER", "ns": ""}
        }
      },
      "constraint": {
        "name": "title",
        "word": {
          "element": { "name": "TITLE", "ns": "" }
        }
      },
      "return-metrics": false
    }
} }
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/suggest" http-verb="GET"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve a list of suggested constraint prefixes and/or constraint
    values that match (complete) the input query text, similar to the
    XQuery function <code>search:suggest</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="partial-q?" type="string">
      The partial search term for which suggestions should be retrieved.
      Default: The empty string ("").
    </apidoc:param>
    <apidoc:param name="q*" type="string">
      A string query that constrains the returned suggestions. If this
      parameter appears multiple times, the constraining queries are
      AND'd together.
    </apidoc:param>
    <apidoc:param name="limit?" type="string">
      The maximum number of suggestions to return. Default: 10.
    </apidoc:param>
    <apidoc:param name="cursor-position?" type="string">
      The position of the cursor within the <code>partial-q</code> query
      text. That is, in making suggestions, the last position in the
      input string that should be considered for completion. Default: The
      length of the input string, so that the whole input query text string
      is considered.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The expected content type of the results. This is equivalent to specifying
      the format in the Accept header. The <code>format</code> parameter
      overrides the Accept header if both are present. Accepted value:
      <code>xml</code> and <code>json</code>. Default: <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or <code>Accept</code> header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
     On success, MarkLogic Server responds with a 200 status and a list of
     suggested completions in the response body. Results are returned as
     either XML or JSON, depending up on the <code>format</code> request
     parameter or the Accept header setting. See the examples below for
     details on the response data.
  </apidoc:response>
  <apidoc:usage>
    <p>
     You can use this service to generate a list of search term completions 
     as a user enters text into a search box. Specify the input string in
     the <code>partial-q</code> parameter. If the user is typing into the
     middle of a previously entered search string, use the 
     <code>cursor-position</code> request parameter to identify the end of
     the text to be matched in the input partial query.
    </p><p>
     Use the <code>q</code> request parameter to specify zero or more
     string queries with which to constrain the returned suggestions. These
     constraints act as filters on the returned suggestions. Use the string
     query grammar to express these constraints; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/string-query.xml%2346466'>Searching Using String Queries</a> in the <em>Search Developer's Guide</em>.
    </p><p>
     Suggestions are generated from suggestion sources defined through
     query options. You can use named constraints, collections, value (range)
     lexicons, or word lexicons as suggestion sources. However, word lexicons 
     are not recommended; collection and value lexicons usually yield the best
     performance. For details, See the <code>default-suggestion-source</code> 
     and <code>suggestion-source</code> query options.
    </p><p>
     Query options named in the <code>options</code> request parameter must
     be pre-installed using the <code>/config/query</code> service.
     If no query options are specified, MarkLogic Server uses the configured 
     default options. If no default options are configured, MarkLogic Server 
     uses the default Search API options. To specify options on the fly,
     use <code>POST /v1/suggest</code>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2382587'>Generating Search Term Completion Suggestions</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following query options are installed with the name "opt-suggest":

<options xmlns="http://marklogic.com/appservices/search">
 <default-suggestion-source>
   <range type="xs:string" facet="true">
      <element ns="" name="name"/>
   </range>
 </default-suggestion-source>
</options>

Then the following command generates search suggestions for the query
text "doc", using the above options:

$ curl --anyauth --user user:password -X GET \
    -H "Accept: application/xml" -i \
    'http://localhost:8000/v1/suggest?partial-q=doc&options=opt-suggest'

==> The values in the element <name/> that begin with the text "doc", as XML.
    MarkLogic Server returns a response similar to the following:

HTTP/1.1 200 OK
Content-type: application/xml
Server: MarkLogic
Content-Length: 256
Connection: Keep-Alive
Keep-Alive: timeout=5

<search:suggestions xmlns:search="http://marklogic.com/appservices/search">
  <search:suggestion>document-insert</search:suggestion>
  <search:suggestion>document-load</search:suggestion>
  <search:suggestion>document-query</search:suggestion>
</search:suggestions>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following query options are installed with the name "opt-suggest":

<options xmlns="http://marklogic.com/appservices/search">
 <default-suggestion-source>
   <range type="xs:string" facet="true">
      <element ns="" name="name"/>
   </range>
 </default-suggestion-source>
</options>

$ curl --anyauth --user user:password -X GET \
    -H "Accept: application/json" -i \
    'http://localhost:8000/v1/suggest?partial-q=doc&options=opt-suggest'

==> The values in the element <name/> that begin with the text "doc", as JSON.
    MarkLogic Server returns a response similar to the following:

HTTP/1.1 200 OK
Content-type: application/json
Server: MarkLogic
Content-Length: 68
Connection: Keep-Alive
Keep-Alive: timeout=5

{"suggestions":[ "document-insert", "document-load", "document-query" ] }
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/suggest" http-verb="POST"  lib="rest-client" 
                 category="Client API" subcategory="Search"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve a list of suggested constraint prefixes and/or constraint
    values that match (complete) the input query text, similar to the
    XQuery function <code>search:suggest</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="partial-q?" type="string">
      The partial search term for which suggestions should be retrieved.
      Default: The empty string ("").
    </apidoc:param>
    <apidoc:param name="q*" type="string">
      A string query that constrains the returned suggestions. All
      occurrences of this query are AND'd together with any queries in
      the POST body.
    </apidoc:param>
    <apidoc:param name="limit?" type="string">
      The maximum number of suggestions to return. Default: 10.
    </apidoc:param>
    <apidoc:param name="cursor-position?" type="string">
      The position of the cursor within the <code>partial-q</code> query
      text. That is, in making suggestions, the last position in the
      input string that should be considered for completion. Default: The
      length of the input string, so that the whole input query text string
      is considered.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service. See the
      Usage Notes for details on how these options are combined with
      options in the POST body.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      You can use this parameter in conjunction with or instead of the
      request Content-type and Accept headers to indicate the input
      and/or output content type. The Content-type header takes precedence 
      over <code>format</code> in most cases. The <code>format</code> 
      parameter takes precedence over the Accept header in most cases. 
      For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>. 
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-type" type="request">
      The MIME type of the data in the request. Allowed values:
      <code>application/json</code> or <code>application/xml</code>.
      For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or <code>Accept</code> header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
     On success, MarkLogic Server responds with a 200 status and a list of
     suggested completions in the response body. Results are returned as
     either XML or JSON, depending up on the <code>format</code> request
     parameter or the Accept header setting. See the examples below for
     details on the response data.
  </apidoc:response>
  <apidoc:usage>
    <p>
     You can use this service to generate a list of search term completions 
     as a user enters text into a search box. Specify the input string in
     the <code>partial-q</code> parameter. If the user is typing into the
     middle of a previously entered search string, use the 
     <code>cursor-position</code> request parameter to identify the end of
     the text to be matched in the input partial query.
    </p><p>
     The request body must contain a combined query (a serialized representation
     of a <code>search:search</code>), expressed as either XML or JSON. 
     For details, see
     <a href="#POST:/v1/search#combined-query"><code>POST /v1/search</code></a> and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2369918'>Specifying Dynamic Query Options with Combined Query</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     Use the combined query in the request body and/or the <code>q</code>
     request parameter to specify zero or more queries with which to 
     constrain the returned suggestions. These constraints act as filters on 
     the returned suggestions. Use the string query grammar to construct the
     value of the <code>q</code> parameter; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/string-query.xml%2346466'>Searching Using String Queries</a> in the <em>Search Developer's Guide</em>.
    </p><p>
     If a request includes both <code>q</code> parameters and a combined
     query, they are combined to constrain the results.
    </p><p>
     Suggestions are generated from suggestion sources defined through
     query options. You can use named constraints, collections, value (range)
     lexicons, or word lexicons as suggestion sources. However, word lexicons 
     are not recommended; collection and value lexicons usually yield the best
     performance. For details, See the <code>default-suggestion-source</code> 
     and <code>suggestion-source</code> query options.
    </p><p>
     Supply query options with the <code>options</code> request parameter
     or in the combined query in the request body. If no query options are 
     specified in either the request parameter or the request body, MarkLogic 
     Server uses the configured default options. If no default options are 
     configured, MarkLogic Server uses the default Search API options. 
    </p><p>
     If query options are supplied in both the <code>options</code> request
     parameter and the request body, the options are merged together. In cases
     of conflict, an option definition in the combined query overrides the
     one in the persistent options. Constraints defined in both option sources 
     are preserved; in the event of a constraint name collision, the constraint
     defined in the request body takes precedence.
    </p><p>
     Query options named in the <code>options</code> request parameter must be
     pre-installed using the <code>/config/query</code> service.  For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The <code>format</code> parameter always overrides the Accept header and
     can be used as a fallback for the Content-type header. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
     If you not use the <code>format</code>
     parameter or an Accept header, the response data is XML.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2382587'>Generating Search Term Completion Suggestions</a> in the <em>REST Application Developer's Guide</em>
     and the XQuery function <code>search:suggest</code>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat combined-query.xml
<search xmlns="http://marklogic.com/appservices/search" >
  <qtext>document</qtext>
  <query>
    <container-query>
      <element ns="" name="category"/>
      <term-query><text>xdmp</text></term-query>
    </container-query>
  </query>
  <options xmlns="http://marklogic.com/appservices/search">
    <default-suggestion-source>
      <range type="xs:string" facet="true">
        <element ns="" name="name"/>
      </range>
    </default-suggestion-source>
  </options>
</search>
    
$ curl --anyauth --user user:password -X POST -d @./combined-query.xml \
    -H "Content-type: application/xml" -H "Accept: application/xml" -i \
    'http://localhost:8000/v1/suggest?partial-q=doc&options=opt-suggest'

==> The values in the element <name/> that begin with the text "doc", 
    occurring in documents containing the query text "document" and
    a <category/> element containing the term "xdmp". MarkLogic Server
    returns a response similar to the following:

HTTP/1.1 200 OK
Content-type: application/xml
Server: MarkLogic
Content-Length: 256
Connection: Keep-Alive
Keep-Alive: timeout=5

<search:suggestions xmlns:search="http://marklogic.com/appservices/search">
  <search:suggestion>document-insert</search:suggestion>
  <search:suggestion>document-load</search:suggestion>
</search:suggestions>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat combined-query.json
{ "search": {
    "qtext": [ "document" ],
    "query": {
      "container-query": {
        "element": {
          "ns": "",
          "name": "category"
        },
        "term-query": {
          "text": [ "xdmp" ]
        }
      }
    },
    "options": {
      "default-suggestion-source": {
        "range": {
          "type": "xs:string",
          "facet": true,
          "element": {
            "ns": "",
            "name": "name"
          }
        }
      }
    }
} }

$ curl --anyauth --user user:password -X POST -d @./combined-query.json \
    -H "Content-type: application/json" -H "Accept: application/json" -i \
    'http://localhost:8000/v1/suggest?partial-q=doc&options=opt-suggest'

==> The values in the element <name/> that begin with the text "doc", 
    occurring in documents containing the query text "document" and
    a <category/> element containing the term "xdmp". MarkLogic Server
    returns a response similar to the following:

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 51
Connection: Keep-Alive
Keep-Alive: timeout=5

{"suggestions":["document-insert","document-load"]}
  ]]></pre></apidoc:example>
</apidoc:function>

<!-- ************ Alerting ************ -->

<apidoc:function name="/v1/alert/rules" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Alerting"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve the definition of all alert rules previously installed in this 
    REST API instance using the <code>/v1/alert/{name}</code> service.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The expected content type of the results. This is equivalent to specifying
      the format in the Accept header. The <code>format</code> parameter
      overrides the Accept header if both are present. Accepted values:
      <code>xml</code> and <code>json</code>. Default: <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or <code>Accept</code> header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     On success, MarkLogic Server responds with a 200 status. The data in
     the response body is definitions of all installed rules. Results can
     be returned as either XML or JSON, depending up on the <code>format</code>
     request parameter or the Accept header setting. For details on the
     format of rule definitions, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2358743'>Defining an Alerting Rule</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     If the Alerting API is not enabled, MarkLogic Server returns status
     403.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     Alerting applications require a valid alerting license key. The license 
     key is required to use the reverse index and to use the Alerting API.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/xml" \
    'http://localhost:8000/v1/alert/rules'

==> The definitions of all installed rules, as XML. MarkLogic Server
    responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: application/xml; charset=utf-8
Server: MarkLogic
Content-Length: 542
Connection: Keep-Alive
Keep-Alive: timeout=5

<rapi:rules xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:rule>
    <rapi:name>example</rapi:name>
    <rapi:description>An example rule.</rapi:description>
    <search:search xmlns:search="http://marklogic.com/appservices/search">
      <search:qtext>xdmp</search:qtext>
      <search:options>
        <search:term>
          <search:term-option>case-sensitive</search:term-option>
        </search:term>
      </search:options>
    </search:search>
    <rapi:rule-metadata>
      <author>me</author>
    </rapi:rule-metadata>
  </rapi:rule>
</rapi:rules>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/json" \
    'http://localhost:8000/v1/alert/rules'

==> The definitions of all installed rules, as JSON. MarkLogic Server
    responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: application/json; charset=utf-8
Server: MarkLogic
Content-Length: 190
Connection: Keep-Alive
Keep-Alive: timeout=5

{ "rules": [
    { "rule": {
        "name": "example",
        "description": "An example rule.",
        "search": {
          "qtext": [ "xdmp" ],
          "options": {
            "term": { "term-option": [ "case-sensitive" ] }
          }
        },
        "rule-metadata": { "author": "me" }
    } }
] }
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/alert/rules/{name}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Alerting"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve the alerting rule definition installed with the given name.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The expected content type of the results. This is equivalent to specifying
      the format in the Accept header. The <code>format</code> parameter
      overrides the Accept header if both are present. Accepted value:
      <code>xml</code> and <code>json</code>. Default: <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or <code>Accept</code> header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     On success, MarkLogic Server responds with a 200 status and the requested
     rule definition in the response body.  Results are returned as
     either XML or JSON, depending up on the <code>format</code> request
     parameter or the Accept header setting.
    </p><p>
     If no rule matching <code>{name}</code> is installed, MarkLogic Server
     returns status code 404.
    </p><p>
     If the Alerting API is not enabled, MarkLogic Server returns status
     403.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     Alerting applications require a valid alerting license key. The license 
     key is required to use the reverse index and to use the Alerting API.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     For more information on the alerting features of the REST API, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2359466'>Alerting</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/xml" \
    http://localhost:8000/v1/alert/rules/example

==> The definition of the rule installed under the name "example", in XML.
    MarkLogic Server responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: application/xml; charset=utf-8
Server: MarkLogic
Content-Length: 499
Connection: Keep-Alive
Keep-Alive: timeout=5

<rapi:rule xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:name>example</rapi:name>
  <rapi:description>An example rule.</rapi:description>
  <search:search xmlns:search="http://marklogic.com/appservices/search">
    <search:qtext>xdmp</search:qtext>
    <search:options>
      <search:term>
        <search:term-option>case-sensitive</search:term-option>
      </search:term>
    </search:options>
  </search:search>
  <rapi:rule-metadata>
    <author>me</author>
  </rapi:rule-metadata>
</rapi:rule>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/json" \
    http://localhost:8000/v1/alert/rules/example

==> The definition of the rule installed under the name "example", in JSON.
    MarkLogic Server responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: application/json; charset=utf-8
Server: MarkLogic
Content-Length: 178
Connection: Keep-Alive
Keep-Alive: timeout=5

{ "rule": {
    "name": "example",
    "description": "An example rule.",
    "search": {
      "qtext": [ "xdmp" ],
      "options": {
        "term": { "term-option": [ "case-sensitive" ] }
      }
    },
    "rule-metadata": { "author": "me" }
} }
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/alert/rules/{name}" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Alerting"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Install an alerting rule under the given name.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The content type of the data in the request body. The <code>format</code>
      parameter value is only used if the Content-type header is not 
      set or is not set to a MIME type mapped to XML or JSON.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-type" type="request">
      The MIME type of the data in the request body, either
      <code>application/json</code> or <code>application/xml</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     Upon success, MarkLogic Server returns status 201 (Created) or
     204 (Updated), depending on whether or not the named rule already exists.
    </p><p>
     If the payload is invalid, MarkLogic Server responds with status 400
     by default. If no rule matching <code>{name}</code> is installed, 
     MarkLogic Server returns status code 404.
    </p><p>
     If the Alerting API is not enabled, MarkLogic Server returns status 403.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     Alerting applications require a valid alerting license key. The license 
     key is required to use the reverse index and to use the Alerting API.
    </p><p>
     After installing one or more rules, use the <code>/alert/match</code>
     service to poll for documents that match rules. This allows you to 
     create an alerting application using a pull model. To use a push model,
     you must use an XQuery implementation in MarkLogic Server, as described in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/alerts.xml%2386523'>Creating Alerting Applications</a> in the <em>Search Developer's Guide</em>.
    </p><p>
     For more information, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2358743'>Defining an Alerting Rule</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./rule.xml
<rapi:rule xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:name>example</rapi:name>
  <rapi:description>An example rule.</rapi:description>
  <search:search xmlns:search="http://marklogic.com/appservices/search">
    <search:qtext>xdmp</search:qtext>
    <search:options>
      <search:term>
        <search:term-option>case-sensitive</search:term-option>
      </search:term>
    </search:options>
  </search:search>
  <rapi:rule-metadata>
    <author>me</author>
  </rapi:rule-metadata>
</rapi:rule>

$ curl --anyauth --user user:password -X PUT -d @./rule.xml -i \
    -H "Content-type: application/xml" \
    http://localhost:8000/v1/alert/rules/example

==> The rule defined in the file ./rule.xml is installed under the
    name "example". MarkLogic Server responds with output similar
    to the following:

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X PUT -d @./rule.xml -i \
    -H "Content-type: application/xml" \
    http://localhost:8000/v1/alert/rules/json-example

==> The rule defined in the file ./rule.xml is installed under the
    name "example". MarkLogic Server responds with output similar
    to the following:

HTTP/1.1 201 Created
Location:
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5

$ cat ./rule.json
{ "rule": {
  "name" : "json-example",
  "search" : {
    "qtext" : "xdmp",
    "options" : { "term" : { "term-option" : "case-sensitive" } }
  },
  "description": "A JSON example rule.",
  "rule-metadata" : { "author" : "me" }
}}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/alert/rules/{name}" http-verb="HEAD" 
                  lib="rest-client" 
                 category="Client API" subcategory="Alerting"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Test for the existence of a rule with the given name.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
  </apidoc:headers>
  <apidoc:response>
    <p>
     If a rule with the given name was previously installed using
     <code>PUT /v1/alert/rules/{name}</code>, MarkLogic Server returns
     status 200. If no such rule exists, status 404 is returned.
    </p><p>
     If the Alerting API is not enabled, MarkLogic Server returns status
     403.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     Alerting applications require a valid alerting license key. The license 
     key is required to use the reverse index and to use the Alerting API.
    </p><p>
     For more information, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2359466'>Alerting</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X HEAD -i \
    'http://localhost:8000/v1/alert/rules/json-example'

==> If the rule exists, MarkLogic Server responds with status code 200.
    If the rule does not exist, MarkLogic Server responds with status 404.
    A unsuccessful test returns output similar to the following:

HTTP/1.1 404 Not Found
Content-type: application/xml
Server: MarkLogic
Content-Length: 365
Connection: Keep-Alive
Keep-Alive: timeout=5

<rapi:error xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:status-code>404</rapi:status-code>
  <rapi:status>Not Found</rapi:status>
  <rapi:message-code>RESTAPI-NODOCUMENT</rapi:message-code>
  <rapi:message>RESTAPI-NODOCUMENT: (err:FOER0000) Resource or document 
   does not exist:  category: alert-rules message: Rule named 'example' 
   not found
  </rapi:message>
</rapi:error>
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/alert/rules/{name}" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Alerting"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Delete an alerting rule previously installed using
    <code>PUT /v1/alert/rules/{name}</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
  </apidoc:headers>
  <apidoc:response>
    <p>
     MarkLogic Server responds with status 204 (Deleted), even if
     there is no rule installed with the given name.
    </p><p>
     If the Alerting API is not enabled, MarkLogic Server returns status 403.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     Alerting applications require a valid alerting license key. The license 
     key is required to use the reverse index and to use the Alerting API.
    </p><p>
     For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2359466'>Alerting</a> in the <em>REST Application Developer's Guide</em> and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/alerts.xml%2386523'>Creating Alerting Applications</a> in the <em>Search Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    'http://localhost:8000/v1/alert/rules/example'

==> The rule installed under the name "example" is deleted. MarkLogic
    Server responds with output similar to the following:

HTTP/1.1 204 Deleted
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/alert/match" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Alerting"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve a list of rules (including the rule metadata) that match
    documents identified by a query or a list of URIs.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri*" type="string">
      Specifies the URI of a document to check for rule matches. This
      parameter can be specified mutiple times. You cannot use this parameter
      with the <code>q</code> or <code>structuredQuery</code> parameters.
      For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2350340'>Identifying Input Documents Using URIs</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="q?" type="string">
      A string query. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2339806'>Identifying Input Documents Using a Query</a> in the <em>REST Application Developer's Guide</em>.
      You cannot use this parameter with the <code>uri</code> parameter.
    </apidoc:param>
    <apidoc:param name="structuredQuery?" type="string">
      A structured query with which to select documents to compare to the rules.
      The query must be a serialized representation of a 
      <code>search:query</code> element or a JSON equivalent. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2339806'>Identifying Input Documents Using a Query</a> in the <em>REST Application Developer's Guide</em>.
      You cannot use this parameter with the <code>uri</code> parameter.
    </apidoc:param>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service.
    </apidoc:param>
    <apidoc:param name="rule*" type="string">
      The name of an alerting rule previously installed using
      <code>PUT /v1/alert/rules/{name}</code>. This options may be
      given multiple times. If no rule is supplied, all installed rules
      are considered.
    </apidoc:param>
    <apidoc:param name="start?" type="string">
      The index of the first result returned by the document selection query 
      to be considered when matching rules. This parameter and the 
      <code>pageLength</code> parameter are used to limit the document search 
      exactly as with <code>/search</code>, prior to applying search matches. 
      Default: 1. You cannot use this parameter with the <code>uri</code>
      parameter.
    </apidoc:param>
    <apidoc:param name="pageLength?" type="string">
      The maximum number of documents to return from the document selection
      query. This parameter and the <code>start</code>
      parameter limit the document selection query results exactly as with
      <code>/search</code>. This limits the number of documents tested for
      rule matches. Default: 10, or the length configured by the query options.
      You cannot use this parameter with the <code>uri</code> parameter.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      The expected content type of the results. This is equivalent to specifying
      the format in the Accept header. The <code>format</code> parameter
      overrides the Accept header if both are present. Accepted value:
      <code>xml</code> and <code>json</code>. Default: <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or <code>Accept</code> header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
     Upon success, MarkLogic Server returns a status 200 and a list of
     matching rules in the request body. For rule definition syntax, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2358743'>Defining an Alerting Rule</a> in the <em>REST Application Developer's Guide</em>.
  </apidoc:response>
  <apidoc:usage>
    <p>
     Alerting applications require a valid alerting license key. The license 
     key is required to use the reverse index and to use the Alerting API.
    </p><p>
     For best performance, enable "fast reverse searches" on the database.
     Also, if selecting documents using a query, the query should either
     return a small number of documents or the number of results returned by
     the query should be limited using the <code>start</code> and/or 
     <code>pageLength</code> request parameters.
    </p><p>
     Select the documents to consider for rule matches either by specifying
     a document selection query using the <code>q</code> and/or
     <code>structuredQuery</code> parameters, or by specifying one or more
     document URIs using the <code>uri</code> parameter. Additional methods
     are available using <code>POST /v1/alert/match</code>.
     If you specify both a string query and a structured 
     query, they are AND'd together to form the final search query.
    </p><p>
     When the set of documents to check for rule matches is determined by
     a query, you can specify query options using the <code>options</code>
     parameter. The options must have been previously installed using the
     <code>/config/query</code> service.
    </p><p>
     To specify a query in the request body instead of using request
     parameters, or to specify query options without pre-installing them,
     use <code>POST /v1/alerts/match</code>.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2317764'>Testing for Matches to Alerting Rules</a> in the <em>REST Application Developer's Guide</em> and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/alerts.xml%2386523'>Creating Alerting Applications</a> in the <em>Search Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/xml" \
    'http://localhost:8000/v1/alert/match?q=xdmp AND load'

==> The definitions of any rules matching the documents selected by
    the string query "xdmp AND load". MarkLogic Server responds with
    output similar to the following:

HTTP/1.1 200 OK
Content-type: application/xml; charset=utf-8
Server: MarkLogic
Content-Length: 1033
Connection: Keep-Alive
Keep-Alive: timeout=5

<rapi:rules xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:rule>
    <rapi:name>example</rapi:name>
    <rapi:description>An example rule.</rapi:description>
    <search:search xmlns:search="http://marklogic.com/appservices/search">
      <search:qtext>xdmp</search:qtext>
      <search:options>
        <search:term>
          <search:term-option>case-sensitive</search:term-option>
        </search:term>
      </search:options>
    </search:search>
    <rapi:rule-metadata>
      <author>me</author>
    </rapi:rule-metadata>
  </rapi:rule>
</rapi:rules>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/json" \
    'http://localhost:8000/v1/alert/match?q=xdmp AND load'

==> The definitions of any rules matching the documents selected by
    the string query "xdmp AND load". MarkLogic Server responds with
    output similar to the following:

HTTP/1.1 200 OK
Content-type: application/json; charset=utf-8
Server: MarkLogic
Content-Length: 378
Connection: Keep-Alive
Keep-Alive: timeout=5

{ "rules": [
    { "rule": {
        "name": "example",
        "description": "An example rule.",
        "search": {
          "qtext": [ "xdmp" ],
          "options": {
            "term": { "term-option": [ "case-sensitive" ] }
          }
        },
        "rule-metadata": {
          "author": "me"
        }
    } }
] }
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/alert/match" http-verb="POST" 
                  lib="rest-client" 
                 category="Client API" subcategory="Alerting"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve a list of rules (including the rule metadata) that match
    either documents in the database identified by a document selection 
    query defined in the request body or a transient document supplied in the 
    request body.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="options?" type="string">
      The name of query options previously created via a PUT or POST
      request to the <code>/v1/config/query</code> service. You can only use
      this parameter if the request body contains a structured or combined
      query.
    </apidoc:param>
    <apidoc:param name="start?" type="string">
      The index of the first result returned by the document selection query 
      to be considered when matching rules. This parameter and the 
      <code>pageLength</code> parameter are used to limit the document search 
      exactly as with <code>/search</code>, prior to applying search matches. 
      Default: 1. You can only use this parameter if the request body contains
      a structured or combined query.
    </apidoc:param>
    <apidoc:param name="pageLength?" type="string">
      The maximum number of documents to return from the document selection
      query. This parameter and the <code>start</code>
      parameter limit the document selection query results exactly as with
      <code>/search</code>. This limits the number of documents tested for
      rule matches. Default: 10, or the length configured by the query options.
      You can only use this parameter if the request body contains a structured
      or combined query.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      You can use this parameter in conjunction with or instead of the
      request Content-type and Accept headers to indicate the input
      and/or output content type. The Content-type header takes precedence 
      over <code>format</code> in most cases. The <code>format</code> 
      parameter takes precedence over the Accept header
      in most cases. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>. 
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="request">
      The MIME type of the data in the POST body. Accepted values:
      <code>application/json</code> or <code>application/XML</code>. 
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or <code>Accept</code> header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
     Upon success, MarkLogic Server returns a status 200 and a list of
     matching rules in the request body. The response body contains XML or
     JSON rule definitions.
  </apidoc:response>
  <apidoc:usage>
    <p>
     Alerting applications require a valid alerting license key. The license 
     key is required to use the reverse index and to use the Alerting API.
    </p><p>
     For best performance, enable "fast reverse searches" on the database.
     Also, if selecting documents using a query, the query should either
     return a small number of documents or the number of results returned by
     the query should be limited using the <code>start</code> and/or 
     <code>pageLength</code> request parameters.
    </p><p>
     Select the documents to consider for rule matches either by specifying
     a document selection query in the request body, or by supplying a 
     single transient document in the request body. The latter allows you
     compare a document to stored rules before inserting it into the database.
     For other forms of rule matching, use <code>GET /v1/alert/match</code>.
    </p><p>
     To select documents using a query, construct a request body containing
     either a structured query (<code>search:query</code>) or a combined 
     query and options (<code>search:search</code>), as described in
     <a href="#POST:/v1/search#combined-query"><code>POST /v1/search</code></a>. You can
     specify document selection query using either JSON or XML; set the 
     Content-Type header appropriately.
    </p><p>
     When the set of documents to check for rule matches is determined by
     a query, you can use the <code>start</code> and <code>pageLength</code>
     parameters to constrain the query results to compare to the rules.
    </p><p>
     To test a transient document for rule matches, supply an XML or JSON
     document in the request body and set the Content-Type header to either
     <code>application/xml</code> or <code>application/json</code>.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/alerting.xml%2317764'>Testing for Matches to Alerting Rules</a> in the <em>REST Application Developer's Guide</em> and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/alerts.xml%2386523'>Creating Alerting Applications</a> in the <em>Search Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat match-body.xml
<search xmlns="http://marklogic.com/appservices/search">
  <qtext>load</qtext>
  <options>
    <term>
      <term-option>case-sensitive</term-option>
    </term>
  </options>
</search>

$ curl --anyauth --user user:password -X POST -d @./match-body.xml -i \
    -H "Content-type: application/xml" -H "Accept: application/xml" \
    'http://localhost:8000/v1/alert/match

==> The definitions of rules that match the documents selected by the
    combined query in the request body. MarkLogic Server responds with
    output similar to the following.

HTTP/1.1 200 OK
Content-type: application/xml; charset=utf-8
Server: MarkLogic
Content-Length: 1033
Connection: Keep-Alive
Keep-Alive: timeout=5

<rapi:rules xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:rule>
    <rapi:name>example</rapi:name>
    <rapi:description>An example rule.</rapi:description>
    <search:search xmlns:search="http://marklogic.com/appservices/search">
      <search:qtext>xdmp</search:qtext>
      <search:options>
        <search:term>
          <search:term-option>case-sensitive</search:term-option>
        </search:term>
      </search:options>
    </search:search>
    <rapi:rule-metadata>
      <author>me</author>
    </rapi:rule-metadata>
  </rapi:rule>
</rapi:rules>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./transient.xml
<function>
  <prefix>xdmp</prefix>
  <name>document-delete</name>
</function>

$ curl --anyauth --user user:password -X POST -d @./match-body.xml -i \
    -H "Content-type: application/xml" -H "Accept: application/xml" \
    'http://localhost:8000/v1/alert/match

==> The definitions of rules that match the transient XML document in
    the request body. The results are as JSON, as indicated by the
    Accept header.  MarkLogic Server responds with output similar to the 
    following.

HTTP/1.1 200 OK
Content-type: application/json; charset=utf-8
Server: MarkLogic
Content-Length: 378
Connection: Keep-Alive
Keep-Alive: timeout=5

{ "rules": [
    { "rule": {
        "name": "example",
        "description": "An example rule.",
        "search": {
          "qtext": [ "xdmp" ],
          "options": {
            "term": { "term-option": [ "case-sensitive" ] }
          }
        },
        "rule-metadata": {
          "author": "me"
        }
    } }
] }
  ]]></pre></apidoc:example>
</apidoc:function>

<!-- ************ Query Configuration ************ -->

<apidoc:function name="/v1/config/query" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve a list of all the named query options available for use
    with the service. For example, the names of query options previously 
    stored using POST requests to the <code>/config/query</code> service.
    The results include the name and URI of all named query options.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      Specifies the content type of the response, as an alternative to using
      the Accept header. Accepted values: <code>json</code> and 
      <code>xml</code> (default). This value takes precedence over the Accept 
      headers. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or Accept header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns a status 200 (OK) and the
    response body contains the options data. If no query options are
    installed, MarkLogic Server returns an empty &lt;query-options&gt;
    node (XML) or an empty array (JSON).
  </apidoc:response>
  <apidoc:usage>
    <p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
  http://localhost:8000/v1/config/query

==> A list of the names of installed options, as XML. Assuming two named
    query options, "scene" and "title" were previously installed:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Content-type: text/xml; charset=UTF-8
Server: MarkLogic
Content-Length: 318
Connection: close

<rapi:query-options xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:options>
    <rapi:name>default</rapi:name>
    <rapi:uri>/v1/config/query/default</rapi:uri>
  </rapi:options>
  <rapi:options>
    <rapi:name>title</rapi:name>
    <rapi:uri>/v1/config/query/title</rapi:uri>
  </rapi:options>
  <rapi:options>
    <rapi:name>scene</rapi:name>
    <rapi:uri>/v1/config/query/scene</rapi:uri>
  </rapi:options>
</rapi:query-options>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
  -H "Accept: application/json" 'http://localhost:8000/v1/config/query'

==> A list of the names of installed options, as JSON. Assuming two named
    query options, "scene" and "title" were previously installed:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Content-type: text/plain; charset=UTF-8
Server: MarkLogic
Content-Length: 318
Connection: close

[
  {
    "name": "default",
    "uri": "/v1/config/query/default"
  },
  {
    "name": "title",
    "uri": "/v1/config/query/title"
  },
  {
    "name": "scene",
    "uri": "/v1/config/query/scene"
  }
]
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/query" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove all named query options.
  </apidoc:summary>
  <apidoc:response>
    Upon successful removal, MarkLogic returns status 204 (Deleted).
  </apidoc:response>
  <apidoc:usage>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
  http://localhost:8000/v1/config/query

==> All installed options are removed. The following headers are returned:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 204 Deleted
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/query/(default|{name})" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve the query options whose name matches the <em>name</em> in the
    request URI, or retrieve the default query options.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      Specifies the content type of the response, as an alternative to using
      the Accept header. Accepted values: <code>json</code> and 
      <code>xml</code> (default). This value takes precedence over the Accept 
      headers.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the information in the response.
      Accepted types: <code>application/json</code> or 
      <code>application/xml</code>. Ignored if the request includes a
      <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or Accept header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     Upon success, MarkLogic Server responds with a status 200 (OK) and
     returns the requested information in the response body, XML or JSON.
    </p><p>
     If the named configuration does not exist, MarkLogic Server
     returns a 404 status.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     The response body contains a list of <code>search:options</code> nodes,
     expressed in either XML or JSON, depending upon the <code>format</code>
     parameter or Accept header setting. For details on the options, see
     <a href="#PUT:/v1/config/query/(default|{name})#query-options"><code>PUT /v1/config/query/(default|{name})</code></a>.
    </p><p>
     The returned configuration does not include configuration
     inherited at runtime from the default or global query options.
    </p><p>
     The XML or JSON structure returned by this method is suitable for
     passing to a PUT or POST request to <code>/config/query</code>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
  http://localhost:8000/v1/config/query/title

==> The query options previously saved under the name "title".
    For example:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 172
Connection: close

<options xmlns="http://marklogic.com/appservices/search">
  <constraint name="title">
    <word>
      <element ns="" name="TITLE"/>
    </word>
  </constraint>
</options>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/json" \
  'http://localhost:8000/v1/config/query/tuples'

==> The query options previously saved under the name "tuples".
    For example:

Content-type: application/xml
Server: MarkLogic
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 271
Connection: close

{
  "options": {
    "tuples": [
      {
        "name": "speaker-title",
        "range": [
          {
            "type": "xs:string",
            "element": {
              "ns": "",
              "name": "SPEAKER"
            }
          },
          {
            "type": "xs:string",
            "path-index": {
              "text": "/PLAY/ACT/SCENE/TITLE"
            }
          }
        ]
      }
    ],
    "constraint": [
      {
        "name": "title",
        "word": {
          "element": {
            "ns": "",
            "name": "TITLE"
          }
        }
      }
    ]
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/query/(default|{name})" http-verb="POST" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create or append to named query options.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header.  The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type" type="request">
      The MIME type of the data in the POST body, either
      <code>application/json</code> or <code>application/xml</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     Upon success, MarkLogic Server returns status 201 (Created) or
     204 (Updated).
    </p><p>
     If the payload is invalid, MarkLogic Server responds with status 400
     by default. However, validation may be disabled. For details, see 
     <code>/config/properties</code>.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     The POST body must be a valid <code>search:options</code> node, expressed
     in either XML or JSON, depending upon the request Content-Type header or
     <code>format</code> parameter. For options information, see
     <a href="#PUT:/v1/config/query/(default|{name})#query-options"><code>PUT /v1/config/query/(default|{name})</code></a>.
    </p><p>
     If the named options do not exist, new ones are created.
     If the named options exist, the options in the POST body are added
     to the existing definition.
    </p><p>
     If <code>{name}</code> is <code>default</code>, default query
     options are installed or updated. 
    </p><p>
     Named query options are versioned by MarkLogic server. The version
     identifier returned in the response ETag header may be
     used in subsequent conditional GET requests to the 
     <code>/config/query/{name}</code> service to restrict requests to
     particular option versions.
    </p><p>
      For a summary of available options, see 
      <code>PUT /v1/config/query/(default|{name})</code>. For details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixa.xml%2312592'>Appendix A: JSON Query Options Reference</a> in the <em>REST Application Developer's Guide</em>
      or
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixb.xml%2312592'>Appendix B: XML Query Options Reference</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat > options
<options xmlns="http://marklogic.com/appservices/search">
  <constraint name="title">
    <word>
      <element ns="" name="TITLE" />
    </word>
  </constraint>
</options>

$ curl --anyauth --user user:password -X POST -d@'./options' -i \
  -H "Content-type:application/xml" \
  http://localhost:8000/v1/config/query/title

==> Install options named "title" which constrains searches
    to words in the TITLE element. The request returns headers of
    the form:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 201 Created
Location:
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/query/(default|{name})" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create or replace named query options.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header.  The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-type" type="request">
      The MIME type of the data in the request body, either
      <code>application/json</code> or <code>application/xml</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     Upon success, MarkLogic Server returns status 201 (Created) or
     204 (Updated).
    </p><p>
     If the payload is invalid, MarkLogic Server responds with status 400
     by default. However, validation may be disabled. For details, see 
     <code>/config/properties</code>.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The request body must be a valid <code>search:options</code> node, 
     expressed in either XML or JSON, depending upon the request Content-Type 
     header or <code>format</code> parameter. See the Usage Notes, below.
    </p><p>
      By default, options are validated. Options validation can be disabled 
      using the <code>/config/properties</code> service.
    </p><p>
     If the named options do not exist, they are created.
     If the named options exist, the options in the request body replace
     the existing query options.
    </p><p>
     If <code>{name}</code> is <code>default</code>, the default search
     options are modified. 
    </p><p id="query-options">
     Query options are expressed as a multi-level JSON or XML structure. 
     The following list is brief summary of the top level option XML elements
     or JSON objects. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/search-dev-guide/query-options.xml%2343171'>Search Customization Using Query Options</a> in the <em>Search Developer's Guide</em>,
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixa.xml%2312592'>Appendix A: JSON Query Options Reference</a> in the <em>REST Application Developer's Guide</em>,
     or
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixb.xml%2312592'>Appendix B: XML Query Options Reference</a> in the <em>REST Application Developer's Guide</em>.
      <blockquote>
        <dl>
          <dt>additional-query</dt>
          <dd>
            Additional serialized queries that are AND'd with any string
            or structured query supplied to a request.
          </dd>
          <dt>concurrency-level</dt>
          <dd>
            The maximum number of threads used to resolve facets.
          </dd>
          <dt>constraint</dt>
          <dd>
            Constraints used to control the search and faceting.
          </dd>
          <dt>debug</dt>
          <dd>
            Activate debugging mode.
          </dd>
          <dt>default-suggestion-source</dt>
          <dd>
            Define content to be used as the default source of search 
            suggestions.
          </dd>
          <dt>extract-metadata</dt>
          <dd>
            Specify data to return in the <code>metadata</code> section of
            the response output.
          </dd>
          <dt>forest</dt>
          <dd>
            One or more forest ids.
          </dd>
          <dt>fragment-scope</dt>
          <dd>
            The global fragment scope over which to search, either properties
            or documents.
          </dd>
          <dt>grammar</dt>
          <dd>
            Specify a custom search grammar. The default grammar defines
            "Google-style" parsing.
          </dd>
          <dt>operator</dt>
          <dd>
            A list of state elements, each representing a unique runtime
            configuration option.
          </dd>
          <dt>page-length</dt>
          <dd>
            The number of results per page. The default is 10.
          </dd>
          <dt>quality-weight</dt>
          <dd>
            A weighting factor to use in the query. The default is 1.0.
          </dd>
          <dt>return-aggregates</dt>
          <dd>
            Whether to include results from builtin or user-defined
            aggregate functions in the search response. Default: true.
          </dd>
          <dt>return-constraints</dt>
          <dd>
            Whether to include the original constraint definitions in the
            results. Default: false.
          </dd>
          <dt>return-facets</dt>
          <dd>
            Whether to include resolved facets in the results. Default: true.
          </dd>
          <dt>return-frequencies</dt>
          <dd>
            Whether to include value frequencies in range indexes and lexicons 
            in the results. Default: true.
          </dd>
          <dt>return-metrics</dt>
          <dd>
            Whether to include statistics in the results. Default: true.
          </dd>
          <dt>return-plan</dt>
          <dd>
            Whether to include <code>xdmp:plan</code> output in the 
            results. Default: false.
          </dd>
          <dt>return-qtext</dt>
          <dd>
            Whether to include the original query text in the results.
            Default: true.
          </dd>
          <dt>return-query</dt>
          <dd>
            Whether to include the XML query representation in the results.
            Default: false.
          </dd>
          <dt>return-results</dt>
          <dd>
            Whether to include search results in the output. Default: true.
          </dd>
          <dt>return-similar</dt>
          <dd>
            Whether to include a list of URLS of similar documents with
            each search result. Default: false.
          </dd>
          <dt>return-values</dt>
          <dd>
            Whether to include values from range indexes and lexicons in
            the results. Default: true.
          </dd>
          <dt>search-option</dt>
          <dd>
            For advanced usrs. Additional options to pass in, such as
            <code>filtered</code>, <code>unfiltered</code>, and
            <code>score-logtfidf</code>. Default: No additional options.
          </dd>
          <dt>searchable-expression</dt>
          <dd>
            An expression to search. Whatever expression is specified
            is return from the search.
          </dd>
          <dt>sort-order</dt>
          <dd>
            Set the default sort order.
          </dd>
          <dt>suggestion-source</dt>
          <dd>
            A constraint source to override a named constraint when using
            <code>search:suggest</code>.
          </dd>
          <dt>term</dt>
          <dd>
            Specifies handling of empty searches and controls option
            for how individual are represented when parsing the search.
          </dd>
          <dt>transform-results</dt>
          <dd>
            Specifies a function for processing search results to create
            snippet output.
          </dd>
          <dt>tuples</dt>
          <dd>
            Specifies constraints for finding value range index and
            lexicon co-ocurrences.
          </dd>
          <dt>values</dt>
          <dd>
            Specifies constraints for finding values in range indexes and
            lexicons.
          </dd>
        </dl>
      </blockquote>
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -T './options2' -i \
  -H "Content-type:application/xml" \
  http://localhost:8000/v1/config/query/scene

==> MarkLogic Server creates or updates the query options named "scene".
    The response includes the following headers:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 100 Continue

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/query/(default|{name})" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove the named (or default) query options from the App Server.
  </apidoc:summary>
  <apidoc:response>
    Upon success, MarkLogic Server returns a 204 (Deleted) status.
  </apidoc:response>
  <apidoc:usage>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
  http://localhost:8000/v1/config/query/scene

==> MarkLogic Server removes the options installed under the
    name "scene". The response includes the following headers:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 204 Deleted
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/query/(default|{name})/{child-element}"
                 http-verb="GET"  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve the setting for a particular option in named query options.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      Specifies the content type of the response, as an alternative to using
      the Accept header. Accepted values: <code>json</code> and 
      <code>xml</code> (default). This value takes precedence over the Accept 
      headers.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the information in the response.
      Accepted types: <code>application/json</code> or 
      <code>application/xml</code>. Ignored if the request includes a
      <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response, either
      <code>application/json</code> or <code>application/xml</code>,
      depending upon the MIME type requested through the <code>format</code>
      parameter or Accept header on the request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with a 200 staus and returns
    the requested information in the response body, in the format requested.
  </apidoc:response>
  <apidoc:usage>
    <p>
     The <code>{element-name}</code> component of the request URI must be
     the localname of a child element of <code>search:options</code>. For
     information on query options, see
     <a href="#PUT:/v1/config/query/(default|{name})#query-options"><code>PUT /v1/config/query/(default|{name})</code></a>.
    </p><p>
     The response body contains a <code>search:options</code> node, expressed
     as either XML or JSON, depending on the setting of the <code>format</code>
     parameter or Accept header. The returned options node contains only
     the request child element(s). For information about the structure and
     contents of query options, see
     <a href="#PUT:/v1/config/query/(default|{name})#query-options"><code>PUT /v1/config/query/(default|{name})</code></a>.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following options are installed under the name "my-options":

<options xmlns="http://marklogic.com/appservices/search">
  <values name="speaker">
    <range type="xs:string">
      <element ns="" name="SPEAKER"/>
    </range>
  </values>
  <tuples name="speaker-title">
    <range type="xs:string">
      <element ns="" name="SPEAKER"/>
    </range>
    <range type="xs:string">
      <path-index>/PLAY/ACT/SCENE/TITLE</path-index>
    </range>
  </tuples>
</options>

$ curl --anyauth --user user:password -i -X GET \
    http://localhost:8000/v1/config/query/my-options/values

==> MarkLogic Server returns the following headers and the requested
    subset of my-options. Results are in the default format, XML.

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 187
Connection: close

<options xmlns="http://marklogic.com/appservices/search">
  <values name="speaker">
    <range type="xs:string">
      <element ns="" name="SPEAKER"/>
    </range>
  </values>
</options>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
Assume the following options are installed under the name "my-options":

{
  "options": {
    "values": [
      {
        "name": "speaker",
        "range": {
          "type": "xs:string",
          "element": {
            "ns": "",
            "name": "SPEAKER"
          }
        }
      }
    ],
    "tuples": [
      {
        "name": "speaker-title",
        "range": [
          {
            "type": "xs:string",
            "element": {
              "ns": "",
              "name": "SPEAKER"
            }
          },
          {
            "type": "xs:string",
            "path-index": {
              "text": "/PLAY/ACT/SCENE/TITLE"
            }
          }
        ]
      }
    ]
  }
}

$ curl --anyauth --user user:password -i -X GET -H "Accept: application/json" \
    'http://localhost:8000/v1/config/query/my-options/values'

==> MarkLogic Server returns the following headers and the requested
    subset of my-options, as JSON.

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 112
Connection: close

{
  "options": {
    "values": [
      {
        "name": "speaker",
        "range": {
          "type": "xs:string",
          "element": {
            "ns": "",
            "name": "SPEAKER"
          }
        }
      }
    ]
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/query/(default|{name})/{child-element}"
                 http-verb="POST"  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Add options to existing named query options, or create new named
    query options if <code>{name}</code> does not already exist.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header. The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type" type="request">
      The MIME type of the data in the request body. Accepted values:
      <code>application/json</code> or <code>application/xml</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     Upon success, MarkLogic Server returns status 201 (Created) or 
     204 (Updated).
    </p><p>
     If the payload is invalid or applying the payload results in invalid
     query options, MarkLogic Server responds with status 400 (Bad Request)
     by default. Options validation can be disabled. For details, see 
     see the <code>validate-options</code> in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2343814'>Instance Configuration Properties</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     The POST body must be a valid <code>search:options</code> node, expressed
     in either XML or JSON, depending upon the request Content-Type header or
     <code>format</code> parameter. 
    </p><p>
      For a summary of available options, see 
     <a href="#PUT:/v1/config/query/(default|{name})#query-options"><code>PUT /v1/config/query/(default|{name})</code></a>.
      For details see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixa.xml%2312592'>Appendix A: JSON Query Options Reference</a> in the <em>REST Application Developer's Guide</em>
      or
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixb.xml%2312592'>Appendix B: XML Query Options Reference</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     Multiple option elements (settings) may be included in the options node
     if <em>{child-element}</em> is an element that can occur multiple times
     in query options. For example, multiple search constraints 
     (<code>&lt;constraint/&gt;</code>) may be set in a single request. 
     However, all options in the payload must be of the same type.
    </p><p>
     If no query options are installed under <em>{name}</em>, they are
     created. If the named query options exist, the options in the POST
     body are appended. If options validation is enabled (the default)
     and adding the new options would result in invalid query options,
     the query options remain unchanged, and a 400 status is returned.
     Options validation can be disabled. For details, see 
     <code>validate-options</code> in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2343814'>Instance Configuration Properties</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     If <code>{name}</code> is <code>default</code>, the default search
     options are modified. 
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat added-constraint.xml
<options xmlns="http://marklogic.com/appservices/search">
  <constraint name="title">
    <word>
      <element ns="" name="TITLE" />
    </word>
  </constraint>
</options>

$ curl --anyauth --user user:password -i -X POST -d@"added-constraint.xml" \
    -H "Content-type: application/xml" \
    http://localhost:8000/v1/config/query/my-options/constraint

==> The "title" constraint is added to the "my-options" query options. If
    the query options already contain other <constraint/> elements, they 
    are unchanged.  MarkLogic Server returns the following headers:

HTTP/1.1 201 Created
Location:
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat added-constraint.json
{
  "options": {
    "constraint": [
      {
        "name": "title",
        "word": {
          "element": {
            "ns": "",
            "name": "TITLE"
          }
        }
      }
    ]
  }
}

$ curl --anyauth --user user:password -i -X POST -d@"added-constraint.json" \
    -H "Content-type: application/json" \
    http://localhost:8000/v1/config/query/my-options/constraint

==> The "title" constraint is added to the "my-options" query options. If
    the query options already contain other <constraint/> elements, they 
    are unchanged.  MarkLogic Server returns the following headers:

HTTP/1.1 201 Created
Location:
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/query/(default|{name})/{child-element}"
                 http-verb="PUT"  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Replace options in existing named query options, or create new named
    query options if <code>{name}</code> does not already exist.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header. The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type" type="request">
      The MIME type of the data in the request body. Accepted values:
      <code>application/json</code> or <code>application/xml</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     Upon success, MarkLogic Server responds with
     status 201 (Created) or 204 (Updated).
    </p><p>
     If the payload is invalid or applying the payload results in invalid
     query options, MarkLogic Server responds with status 400 (Bad Request)
     by default. Options validation can be disabled. For details, see 
     see the <code>validate-options</code> in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2343814'>Instance Configuration Properties</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:response>
  <apidoc:usage>
    <p>
     The request payload should be a valid <code>search:options</code> node, 
     expressed in either XML or JSON, depending upon the request Content-Type 
     header or format parameter. For a summary of available options, see 
     <a href="#PUT:/v1/config/query/(default|{name})#query-options"><code>PUT /v1/config/query/(default|{name})</code></a>.
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixa.xml%2312592'>Appendix A: JSON Query Options Reference</a> in the <em>REST Application Developer's Guide</em>
     or
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixb.xml%2312592'>Appendix B: XML Query Options Reference</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     If no query options are installed under <em>{name}</em>, they are
     created. If the named query options exist, the options in the request
     body replace all existing option elements with the same name.
     For example, if the query options contains three 
     <code>&lt;constraint/&gt;</code> options and the request body includes 
     only one <code>&lt;constraint/&gt;</code>, the three existing constraints
     are removed and replaced with the one in the request body.
    </p><p>
     If options validation is enabled (the default) and the new options 
     would result in invalid query options, the query options remain 
     unchanged, and a 400 status is returned. Options validation can be 
     disabled. For details, see 
     <code>validate-options</code> in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2343814'>Instance Configuration Properties</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The request body can contain multiple option elements (settings) 
     if <em>{child-element}</em> is an element that can occur multiple times
     in query options. For example, multiple search constraints 
     (<code>&lt;constraint/&gt;</code>) can be set in a single request. 
     However, all options in the payload must be of the same type.
    </p><p>
     If the named query options do not exist, create new named query options.
     If the named query options exist, the options in the request body replace
     any existing options of the same name. For example, if the query options
     contains 3 constraint options and the PUT request includes only one 
     constraint, all 3 constraints are removed and replaced with the single
     constraint from the request.
    </p><p>
     If <code>{name}</code> is <code>default</code>, the default search
     options are modified. 
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat added-constraint.xml
<options xmlns="http://marklogic.com/appservices/search">
  <constraint name="title">
    <word>
      <element ns="" name="TITLE" />
    </word>
  </constraint>
</options>

$ curl --anyauth --user user:password -i -X PUT -d@"added-constraint.xml" \
    -H "Content-type: application/xml" \
    http://localhost:8000/v1/config/query/my-options/constraint

==> The "title" constraint is added to the "my-options" query options. If
    the query options already contain other <constraint/> elements, they 
    are removed.  MarkLogic Server returns the following headers:

HTTP/1.1 204 Updated
Location:
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat added-constraint.json
{ "options": {
    "constraint": [ {
        "name": "title",
        "word": {
          "element": {
            "ns": "",
            "name": "TITLE"
          }
        }
    } ]
} }

$ curl --anyauth --user user:password -i -X PUT -d@"added-constraint.json" \
    -H "Content-type: application/json" \
    http://localhost:8000/v1/config/query/my-options/constraint

==> The "title" constraint is added to the "my-options" query options. If
    the query options already contain other <constraint/> elements, they 
    are removed.  MarkLogic Server returns the following headers:

HTTP/1.1 204 Updated
Location:
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/query/(default|{name})/{child-element}"
                 http-verb="DELETE"  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove an option setting from the named query options.
  </apidoc:summary>
  <apidoc:response>
     MarkLogic Server returns status 204 Deleted status.
  </apidoc:response>
  <apidoc:usage>
    <p>
     <code>{child-element}</code> should be the name of a child element of
     a <code>search:options</code> node. For an option summary, see
     <a href="#PUT:/v1/config/query/(default|{name})#query-options"><code>PUT /v1/config/query/(default|{name})</code></a>.
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixa.xml%2312592'>Appendix A: JSON Query Options Reference</a> in the <em>REST Application Developer's Guide</em>
     or
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/appendixb.xml%2312592'>Appendix B: XML Query Options Reference</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     If <code>{child-element}</code> is unrecognized, this request does nothing.
     If the named query options contain multiple occurrences of the
     child element, MarkLogic Server deletes all occurrences. For example,
     <code>DELETE /v1/config/query/my-options/constraint</code> deletes all
     <code>&lt;constraint/&gt;</code> elements of "my-options".
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2348838'>Configuring Query Options</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  ]]></pre></apidoc:example>
</apidoc:function>


<!-- ************ Properties Configuration ************ -->

<apidoc:function name="/v1/config/properties" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve a list of all MarkLogic REST API instance configuration properties 
    names and settings.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      Specifies the content type of the response, as an alternative to using
      the Accept header. Accepted values: <code>json</code> and 
      <code>xml</code> (default). This value takes precedence over the Accept 
      headers.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the content returned in the response body, one of
      <code>application/xml</code> or <code>application/json</code>,
      depending on the type requested by the <code>format</code> value
      or Accept header.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns a 200 status and provides the
    requested information in the response body.
  </apidoc:response>
  <apidoc:usage>
    <p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2352686'>Retrieving Configuration Information</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -H "Accept: application/xml" -i \
    http://localhost:8000/v1/config/properties

==> The instance configuration properties in the response body, as XML.
    For example:

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 87
Connection: close

<rapi:properties xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:content-versions>none</rapi:content-versions>
  <rapi:debug>false</rapi:debug>
  <rapi:document-transform-all>true</rapi:document-transform-all>
  <rapi:document-transform-out/>
  <rapi:update-policy>merge-metadata</rapi:update-policy>
  <rapi:validate-options>true</rapi:validate-options>
  <rapi:validate-queries>false</rapi:validate-queries>
</rapi:properties>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -H "Accept: application/json" -i \
    http://localhost:8000/v1/config/properties?format=json

==> The instance configuration properties in the response body, as JSON.
    For example:

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 43
Connection: close

{
  "content-version":"none",
  "debug":false, 
  "document-transform-all":true, 
  "document-transform-out":"", 
  "update-policy":"merge-metadata", 
  "validate-options":true, 
  "validate-queries":false 
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/properties" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Set or modify MarkLogic REST API instance configuration properties.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header. The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body, one of
      <code>application/xml</code> or <code>application/json</code>. 
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with a 204 (Updated)
    status.
  </apidoc:response>
  <apidoc:usage>
    Only the properties included in the request body are modified.
    For a list of property names, see <a href="#GET:/v1/config/properties/{property-name}#config-properties">
    GET /v1/config/properties/{property-name}</a>.
    <p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2361169'>Configuring Instance Properties</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./settings
<properties xmlns="http://marklogic.com/rest-api">
  <debug>false</debug>
</properties>

$ curl --anyauth --user user:password -X POST -d@'./settings' -i \
  "Content-Type: application/xml" \
  http://localhost:8000/v1/config/properties

==> MarkLogic Server updates the settings for the properties named
    in the settings file. 

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 5
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ./settings
{"validate-options":"false"}

$ curl --anyauth --user user:password -X PUT -d@'./settings' -i \
  "Content-Type: application/json" \
  http://localhost:8000/v1/config/properties

==> MarkLogic Server updates the settings for the properties named
    in the settings file. 

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 5
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/properties" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Reset all MarkLogic REST API instance configuration properties to their default values.
  </apidoc:summary>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 204 (Reset).
  </apidoc:response>
  <apidoc:usage>
    <p>All properties are reset to their default values.</p>
    <p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2361169'>Configuring Instance Properties</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8000/v1/config/properties

==> All configuration properties are reset to default values. 
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/properties/{property-name}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve the value of the MarkLogic REST API instance configuration 
    property named by <code>{property-name}</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      Specifies the content type of the response, as an alternative to using
      the Accept header. Accepted values: <code>json</code> and 
      <code>xml</code> (default). This value takes precedence over the Accept 
      headers.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the content returned in the response body, one of
      <code>application/xml</code> or <code>application/json</code>,
      depending on the type requested by the <code>format</code> value
      or Accept header.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns a 200 status, with the requested
    data in the response body. If the requested property does not exist,
    MarkLogic Server returns status 404 (Not Found).
  </apidoc:response>
  <apidoc:usage>
    <p>
     The expected response content type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p>
    <p id="config-properties">
     The following properties are available for configuration:
    </p>
    <table>
      <tr>
        <th>Propety Name</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>content-versions</td>
        <td>Deprecated. Use <code>update-policy</code> instead.</td>
      </tr>
      <tr>
        <td>debug</td>
        <td>Controls debugging output. Allowed values: true, false.
         Default: false.
        </td>
      </tr>
      <tr>
        <td>document-transform-all</td>
        <td>Whether or not to apply a default read transform to every 
         document read, regardless of user. When false, a default transform
         does not modify documents read by a user with <code>rest-writer</code>
         or <code>rest-admin</code> role (or equivalent privileges. Use
         <code>document-transform-out</code> to specify a default read
         transformation. Default: true.
        </td>
      </tr>
      <tr>
        <td>document-transform-out</td>
        <td>The name of a default content transformation to apply when
         retrieving documents from the database using /documents. Default:
         no transformation.
        </td>
      </tr>
      <tr>
        <td>update-policy</td>
        <td>Determines the behavior of conditional GET, PUT, POST, and DELETE 
         on <code>/documents</code> and metadata handling on updates. Allowed 
         Values: <code>merge-metadata</code> (default), 
         <code>version-required</code>, <code>version-optional</code>,
         <code>overwrite-metadata</code>. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2342535'>Understanding Optimistic Locking</a> in the <em>REST Application Developer's Guide</em>
         and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/documents.xml%2362701'>Client-Side Cache Management Using Content Versioning</a> in the <em>REST Application Developer's Guide</em>.
        </td>
      </tr>
      <tr>
        <td>validate-options</td>
        <td>Whether or not to validate query options when they are created
         or updated. Allowed values: true, false. Default: true.</td>
      </tr>
      <tr>
        <td>validate-queries</td>
        <td>Whether or not to validate a query before searching.
         Allowed values: true, false. Default: false.</td>
      </tr>
    </table>
    <p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2361169'>Configuring Instance Properties</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
    http://localhost:8000/v1/config/properties/debug

==> MarkLogic Server returns the setting of the configuration property 
    "debug", as XML. For example:

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 74
Connection: close

<rapi:debug xmlns:rapi="http://marklogic.com/rest-api">
  false
</rapi:debug>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/json" \
    'http://localhost:8000/v1/config/properties/debug'

==> MarkLogic Server returns the setting of the configuration property 
    "debug", as JSON. For example:

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 15
Connection: close

{"debug":false}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/properties/(property-name)" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Set the value of the MarkLogic REST API instance configuration property named by 
    <code>{property-name}</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header. The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body, one of
      <code>application/xml</code> or <code>application/json</code>. 
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with status 204 (Updated).
  </apidoc:response>
  <apidoc:usage>
    For a list of property names, see <a href="#GET:/v1/config/properties/{property-name}#config-properties">
    GET /v1/config/properties/{property-name}</a>.
    <p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2361169'>Configuring Instance Properties</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat setting
<rapi:debug xmlns:rapi="http://marklogic.com/rest-api">
  true
</rapi:debug>

$ curl --anyauth --user user:password -T ./setting -i \
    -H "Content-type: application/xml" \
    http://localhost:8000/v1/config/properties/debug

==> The "debug" property is set to true. MarkLogc Server returns
    the following headers:

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat setting
{ "debug" : "true" }

$ curl --anyauth --user user:password -T ./setting -i \
    -H "Content-type: application/json" \
    http://localhost:8000/v1/config/properties/debug

==> The "debug" property is set to true. MarkLogc Server returns
    the following headers:

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/properties/{property-name}" 
                 http-verb="DELETE"  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Reset the MarkLogic REST API instance configuration property <code>{property-name}</code>
    to its default value.
  </apidoc:summary>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 204 (Reset).
  </apidoc:response>
  <apidoc:usage>
    For a list of property names, see <a href="#GET:/v1/config/properties/{property-name}#config-properties">
    GET /v1/config/properties/{property-name}</a>.
    <p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/service.xml%2361169'>Configuring Instance Properties</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE \
    http://localhost:8000/v1/config/properties/debug

==> The "debug" configuration property is reset to its default value.
  ]]></pre></apidoc:example>
</apidoc:function>


<!-- ************ Transform Configuration ************ -->

<apidoc:function name="/v1/config/transforms" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve metadata about all transforms installed using the
    <code>/v1/config/transforms/{name}</code> service.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      Specifies the content type of the response, as an alternative to using
      the Accept header. Accepted values: <code>json</code> and 
      <code>xml</code> (default). This value takes precedence over the Accept 
      headers.
    </apidoc:param>
    <apidoc:param name="refresh?" type="string">
      Whether or not to refresh metadata before generating the response.
      Default: <code>true</code>. 
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept" type="request">
     The expected MIME type of the information in the response.
     Accepted types: <code>application/json</code> or 
     <code>application/xml</code>. Ignored if the request includes a
     <code>format</code> parameter value.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 200 (OK) and returns
    the requested information in the response body.
  </apidoc:response>
  <apidoc:usage>
    <p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/transforms.xml%2385402'>Discovering Transformations</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     When <code>refresh</code> is true (the default), transform metadata
     is rebuilt from the most recent installation of all transforms. When 
     set to false, the metadata in the response reflects the contents as of 
     the last refresh, and may be out of synch if there has been a 
     subsequent update to the extension. You should only need to set 
     <code>refresh</code> to false if you find this request is taking too long.
     Transform metadata is only used for informational purposes, so 
     neither the acessibility nor the output of a transform is affected by
     out of date metadata. The implementation is always up to date.
    </p><p>
     When <code>refresh</code> is true (the default), extension metadata
     is rebuilt from the most recent installation. When set to false, the 
     metadata in the response reflects the contents as of the last refresh
     or App Server restart, and may be out of synch if there has been a 
     subsequent update to the extension. You should only need to set 
     <code>refresh</code> to false if you find this request is taking too long.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X GET -H "Accept: application/xml" \
    http://localhost:8004/v1/config/transforms

==> A list of installed transforms and their metadata, as XML. For example:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Content-type: application/xml
Server: MarkLogic
Content-Length: 101
Connection: close

<?xml version="1.0" encoding="UTF-8"?>
<rapi:transforms xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:transform>
    <rapi:name>example</rapi:name>
    <rapi:title>example transform</rapi:title>
    <rapi:version/>
    <rapi:provider-name/>
    <rapi:description/>
    <rapi:transform-parameters>
      <rapi:parameter>
        <rapi:parameter-name>style?</rapi:parameter-name>
        <rapi:parameter-type>xs:string</rapi:parameter-type>
      </rapi:parameter>
      <rapi:parameter>
        <rapi:parameter-name>tag</rapi:parameter-name>
        <rapi:parameter-type>xs:string</rapi:parameter-type>
      </rapi:parameter>
    </rapi:transform-parameters>
    <rapi:transform-source>/v1/transforms/example</rapi:transform-source>
  </rapi:transform>
</rapi:transforms>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X GET -H "Accept: application/json" \
    'http://localhost:8004/v1/config/transforms'

==> A list of installed transforms and their metadata, as JSON. For example:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Content-type: application/json
Server: MarkLogic
Content-Length: 331
Connection: close

{
  "transforms": {
    "transform": [
      {
        "name": "example",
        "title": "example transform",
        "version": "",
        "provider-name": "",
        "description": "example transform",
        "transform-parameters": {
          "parameter": [
            {
              "parameter-name": "style",
              "parameter-type": "xs:string?"
            },
            {
              "parameter-name": "tag",
              "parameter-type": "xs:string"
            }
          ]
        },
        "transform-source": "/v1/transforms/example"
      }
    ]
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/transforms/{name}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve the XQuery, XSLT, or JavaScript implementation installed for the 
    named transform.
  </apidoc:summary>
  <apidoc:headers>
    <apidoc:header name="Accept?" type="request">
      The MIME type of the data expected in the response. One of
      <code>application/xslt+xml</code>, <code>application/xquery</code>,
      or <code>application/vnd.marklogic-javascript</code>.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response. One of
      <code>application/xslt+xml</code>, <code>application/xquery</code>,
      or <code>application/vnd.marklogic-javascript</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with status 200 (OK) and returns
    the transform implementation in the response body.
  </apidoc:response>
  <apidoc:usage>
    <p>
     For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/transforms.xml%2319039'>Retrieving the Implementation of a Transformation</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     To install a transform, use <code>PUT /v1/config/transforms/{name}</code>.
     To retrieve a list of available transforms use
    <code>GET /v1/config/transforms</code>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i \
    -H "Accept: application/xquery" \
    http://localhost:8004/v1/config/transforms/example

==> The XQuery library module implementing the "example" transform.
    For example:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Content-type: application/xquery
Server: MarkLogic
Content-Length: 508
Connection: close

xquery version "1.0-ml";
module namespace example="http://marklogic.com/rest-api/transform/example";
declare function example:transform(
...
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/transforms/{name}" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create or update the named transform.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="title?" type="string">
      Title metadata for the transform. This free-form string is returned
      by <code>GET /v1/config/transforms</code>.
    </apidoc:param>
    <apidoc:param name="provider?" type="string">
      Provider metadata for the transform. This free-form string is returned
      by <code>GET /v1/config/transforms</code>.
    </apidoc:param>
    <apidoc:param name="version?" type="string">
      Version metadata for the transform. This free-form string is returned
      by <code>GET /v1/config/transforms</code>.
    </apidoc:param>
    <apidoc:param name="description?" type="string">
      Description metadata for the transform. This free-form string is returned
      by <code>GET /v1/config/transforms</code>.
    </apidoc:param>
    <apidoc:param name="trans:{name}*" type="string">
      The name, type, and cardinality of a transform-specific parameter.
      <em>{name}</em> is the parameter name. The parameter value is an 
      XQuery SequenceType, including cardinality (*, ?, etc.) such as appears 
      in the type declaration of an XQuery function parameter.
    </apidoc:param>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header. The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>xslt</code> or <code>xquery</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type" type="request">
      The MIME type of the data in the request body, one of
      <code>application/xslt+xml</code>, <code>application/xquery</code>,
      or <code>application/vnd.marklogic-javascript</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with status 204 (Transform
    Created).
  </apidoc:response>
  <apidoc:usage>
    <p>
     Once installed, the transform can be used with other MarkLogic 
     REST API services that accept a <code>transform</code> parameter.
    </p><p>
     It is recommended that the request always include a Content-type
     header, even though it is not strictly required.
    </p><p>
     If the named transform is already installed, MarkLogic Server replaces
     the content and metadata with the new information from this request.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/transforms.xml%2360984'>Working With Content Transformations</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X PUT -d@"./transform.xqy" -i \
    -H "Content-type: application/xquery" \
    'http://localhost:8004/v1/config/transforms/example?title=example transform'

==> Install an XQuery transform named "example" with the description 
    "example transform" and the implementation contained in transform.xqy.
    MarkLogic Server responds with headers of the form:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Created
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 4
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/transforms/{name}" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove the named transform.
  </apidoc:summary>
  <apidoc:response>
    Upon successful removal, MarkLogic Server returns status 204 (Transform
    Deleted).
  </apidoc:response>
  <apidoc:usage>
     For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/transforms.xml%2360984'>Working With Content Transformations</a> in the <em>REST Application Developer's Guide</em>.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8004/v1/config/transforms/example

==> The transform named "example" is uninstalled. MarkLogic Server
    responds with headers of the form:

Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Deleted
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>


<!-- ************ Namespace Configuration ************ -->

<apidoc:function name="/v1/config/namespaces" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    List all namespace bindings configured for use in queries,
    ordered alphabetically by prefix.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      The format of the content returned by by the request, either 
      <code>xml</code> or <code>json</code>. The format parameter overrides
      any format specified in the Accept header. 
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response, either
      <code>application/json</code> or <code>application/XML</code> (the
      default). If the <code>format</code> parameter is set, the Accept
      header is ignored in favor of the <code>format</code> parameter.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the content returned in the response body, one of
      <code>application/xml</code> or <code>application/json</code>,
      depending on the type requested by the <code>format</code> value
      or Accept header.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>
     Upon success, MarkLogic Server returns status 200 (OK) and the
     response body contains the requested information.
    </p><p>
     When requesting XML results, the response body contains data of the
     following form for each namespace binding:
    </p>
    <pre xml:space="preserve"><![CDATA[
  <namespace xmlns="http://marklogic.com/sdmp/group">
    <prefix>the-prefix</prefix>
    <namespace-uri>the-uri</namespace-uri>
  </namespace>
    ]]></pre>
    <p>
     When requesting JSON results, the response body contains data of the
     following form for each namespace binding:
    </p>
    <pre xml:space="preserve"><![CDATA[
  { "prefix" : "the-prefix", "uri" : "the-uri" }
    ]]></pre>
  </apidoc:response>
  <apidoc:usage>
    <p>
 For details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2339144'>Using Namespace Bindings</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/xml" \
     'http://localhost:8004/v1/config/namespaces'

==> MarkLogic server responds with a 200 status and the requested
    namespace binding information as XML. For example, the following
    data is returned for a single binding of the prefix "bill" to
    http://makrlogic.com/examples/shakespeare:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 225
Connection: close

<rapi:namespace-bindings xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:namespace>
    <rapi:prefix>bill</rapi:prefix>
    <rapi:uri>http://marklogic.com/examples/shakespeare</rapi:uri>
  </rapi:namespace>
</rapi:namespace-bindings>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/json" \
     http://localhost:8004/v1/config/namespaces

==> MarkLogic server responds with a 200 status and the requested
    namespace binding information as JSON. For example, the following
    data is returned for a single binding of the prefix "bill" to
    http://makrlogic.com/examples/shakespeare:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 92
Connection: close

{"namespace-bindings":[
  {
    "prefix":"bill",
    "uri":"http://marklogic.com/examples/shakespeare"
  }
]}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/namespaces" http-verb="POST" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create or append to namespace bindings that can be used in 
    subsequent query operations.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header. The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body, either
      <code>application/xml</code> or <code>application/json</code>. 
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with a status 201 (Content
    Created). MarkLogic Server responds with a status 400 (Bad Request)
    if the request contains a bad binding or attempts to replace an
    existing binding with a new value.
  </apidoc:response>
  <apidoc:usage>
    <p>
 For details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2339144'>Using Namespace Bindings</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     This method appends to existing namespace bindings. To replace a
     binding, use the PUT method.
    </p><p>
     If a binding already exists for the prefix and this request does not
     bind the prefix to the same namespace URI, MarkLogic server responds
     with status 400 (Bad Request). To change the namespace associated with
     prefix, use <code>PUT /v1/config/namespaces/{prefix}</code>.
    </p><p>
     The request body must have the following format when sending XML:
    </p>
    <pre xml:space="preserve"><![CDATA[
  <rapi:namespace-bindings xmlns="http://marklogic.com/rest-api">
    <rapi:prefix>the-prefix</rapi:prefix>
    <rapi:uri>the-uri</rapi:uri>
  </rapi:namespace-bindings>
    ]]></pre>
    <p>
     The request body must have the following format when sending JSON:
    </p>
    <pre xml:space="preserve"><![CDATA[
  { "prefix" : "the-prefix", "uri" : "the-uri" }
    ]]></pre>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ns-xml
<namespace-bindings xmlns="http://marklogic.com/rest-api">
  <namespace>
    <prefix>bill</prefix>
    <uri>http://marklogic.com/examples/shakespeare</uri>
  </namespace>
</namespace-bindings>

$ curl --anyauth --user user:password -X POST -d@'./ns-xml' -i \
    -H "Content-type: application/xml" \
    http://localhost:8000/v1/config/namespaces

==> MarkLogic Server creates or appends the namespace binding between
    the prefix "bill" and the namespace URI 
    "http://marklogic.com/examples/shakespeare. MarkLogic Server
    returns the following headers:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 201 Created
Location:
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ns-json
{
  "namespace-bindings": [
    {
      "prefix": "will",
      "uri": "http://marklogic.com/examples/shakespeare"
    }
  ]
}

$ curl --anyauth --user user:password -X POST -d@'./ns-json' -i \
    -H "Content-type: application/json" \
    http://localhost:8000/v1/config/namespaces

==> MarkLogic Server creates or appends the namespace binding between
    the prefix "will" and the namespace URI 
    "http://marklogic.com/examples/shakespeare. MarkLogic Server
    returns the following headers.

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 201 Created
Location:
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/namespaces" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create or replace namespace bindings that can be used in subsequent
    query operations.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header. The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body, either
      <code>application/xml</code> or <code>application/json</code>. 
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with a status 204 (Content
    Updated). MarkLogic Server responds with a status 400 (Bad Request)
    if the request contains a bad binding.
  </apidoc:response>
  <apidoc:usage>
    <p>
     Use this request for creating or replacing bindings. All existing
     bindings are replaced by the bindings in the request body. To add
     new bindings without changing existing bindings, use the POST method.
     To replace only one binding, use 
     <code>PUT /v1/config/namespaces/{prefix}</code>.
    </p><p>
 For details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2339144'>Using Namespace Bindings</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The content type can be specified using either the <code>format</code> 
     parameter or <code>Content-type</code> header. One or the
     other must be supplied. If both are supplied and are different,
     the Content-type header takes precedence in most cases. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The request body must have the following format when sending XML:
    </p>
    <pre xml:space="preserve"><![CDATA[
  <rapi:namespace-bindings xmlns="http://marklogic.com/rest-api">
    <rapi:prefix>the-prefix</rapi:prefix>
    <rapi:uri>the-uri</rapi:uri>
  </rapi:namespace-bindings>
    ]]></pre>
    <p>
     The request body must have the following format when sending JSON:
    </p>
    <pre xml:space="preserve"><![CDATA[
  { "prefix" : "the-prefix", "uri" : "the-uri" }
    ]]></pre>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ns-xml
<namespace-bindings xmlns="http://marklogic.com/rest-api">
  <namespace>
    <prefix>bill</prefix>
    <uri>http://marklogic.com/examples/shakespeare</uri>
  </namespace>
</namespace-bindings>

$ curl --anyauth --user user:password -X PUT -d@'./ns-xml' -i \
    -H "Content-type: application/xml" \
    http://localhost:8000/v1/config/namespaces

==> MarkLogic Server replaces any existing namespace bindings with the
    single binding between the prefix "bill" and the namespace URI
    "http://marklogic.com/examples/shakespeare. MarkLogic Server
    returns the following headers.

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Updated
Location:
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ns-json
{
  "namespace-bindings": [
    {
      "prefix": "will",
      "uri": "http://marklogic.com/examples/shakespeare"
    }
  ]
}

$ curl --anyauth --user user:password -X PUT -d@'./ns-json' -i \
    -H "Content-type: application/json" \
    http://localhost:8000/v1/config/namespaces

==> MarkLogic Server replaces any existing namespace bindings with the
    single binding between the prefix "will" and the namespace URI
    "http://marklogic.com/examples/shakespeare. MarkLogic Server
    returns the following headers.

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Updated
Location:
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/namespaces" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove all installed namespace bindings.
  </apidoc:summary>
  <apidoc:response>
    MarkLogic Server responds with 204 (Deleted).
  </apidoc:response>
  <apidoc:usage>
    To remove a specific binding, use 
    <code>DELETE /v1/config/namespaces/{prefix}</code>.
    <p>
 For details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2339144'>Using Namespace Bindings</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8000/v1/config/namespaces

==> MarkLogic Server removes all namespace bindings for the REST
    service on port 8000. MarkLogic Server returns the following headers:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Deleted
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/namespaces/{prefix}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Retrieve the namespace URI associated with the REST service
    namespace binding prefix <code>{prefix}</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      The expected format of the response, either <code>xml</code> or
      <code>json</code>. Overrides the format specified in the Accept header.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response, either
      <code>application/json</code> or <code>application/XML</code> (the
      default). If the <code>format</code> parameter is set, the Accept
      header is ignored in favor of the <code>format</code> parameter.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the content returned in the response body, either
      <code>application/xml</code> or <code>application/json</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
     Upon success, MarkLogic Server returns status 200 and returns the
     requested information in the response body, as either XML or JSON.
     If no namespace binding exists for <code>{prefix}</code>, MarkLogic
     server returns 404 (Not Found).
    <p>
     The response body has the following format when requesting XML:
    </p>
    <pre xml:space="preserve"><![CDATA[
  <namespace xmlns="http://marklogic.com/rest-api">
    <prefix>the-prefix</prefix>
    <namespace-uri>the-uri</namespace-uri>
  </namespace>
    ]]></pre>
    <p>
     The response body has the following format when requesting JSON:
    </p>
    <pre xml:space="preserve"><![CDATA[
  { "prefix" : "the-prefix", "uri" : "the-uri" }
    ]]></pre>
  </apidoc:response>
  <apidoc:usage>
    <p>
 For details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2339144'>Using Namespace Bindings</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X GET -H "Accept: application/xml" \
    'http://localhost:8004/v1/config/namespaces/will'

==> MarkLogic Server responds with status 200 and returns the namespace
    binding information for prefix "will", as XML. For example:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 170
Connection: close

<rapi:namespace xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:prefix>will</rapi:prefix>
  <rapi:uri>http://marklogic.com/examples/shakespeare</rapi:uri>
</rapi:namespace>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -i -H "Accept: application/json" \
    'http://localhost:8004/v1/config/namespaces/will'

==> MarkLogic Server responds with status 200 and returns the namespace
    binding information for prefix "will", as JSON. For example:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 200 OK
Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 67
Connection: close

{
  "prefix":"will",
  "uri":"http://marklogic.com/examples/shakespeare"
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/namespaces/{prefix}" http-verb="PUT" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create or modify a namespace binding.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      You can use this parameter as a fallback to the request Content-type
      header. The Content-type header takes precedence 
      over <code>format</code> in most cases; for details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2322986'>Controlling Input and Output Content Type</a> in the <em>REST Application Developer's Guide</em>.
      Accepted values: <code>json</code> or <code>xml</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type?" type="request">
      The MIME type of the data in the request body, either
      <code>application/xml</code> or <code>application/json</code>. 
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    MarkLogic Server responds with status 201 (Created) if a new
    prefix binding is created as a result of this request. MarkLogic Server 
    responds with status 204 (Updated) if an existing prefix binding
    is updated as a result of this request.
  </apidoc:response>
  <apidoc:usage>
    <p>
 For details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2339144'>Using Namespace Bindings</a> in the <em>REST Application Developer's Guide</em>.
    </p><p>
    The request body must have the following format when sending XML:
    </p>
    <pre xml:space="preserve"><![CDATA[
  <namespace xmlns="http://marklogic.com/sdmp/group">
    <prefix>the-prefix</prefix>
    <namespace-uri>the-uri</namespace-uri>
  </namespace>
    ]]></pre>
    <p>
     The request body must have the following format when sending JSON:
    </p>
    <pre xml:space="preserve"><![CDATA[
  { "prefix" : "the-prefix", "uri" : "the-uri" }
    ]]></pre>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ns-xml
<namespace xmlns="http://marklogic.com/group">
  <prefix>bill</prefix>
  <namespace-uri>http://marklogic.com/examples/shakespeare</uri>
<namespace>

$ curl --anyauth --user user:password -T './ns-xml' -i \
  -H "Content-type: application/xml" \
  http://localhost:8000/v1/config/namespaces/bill

==> Create or update a namespace binding between the prefix "bill" and the
    namespace URI http://marklogic.com/examples/shakespeare. MarkLogic
    Server returns the following headers:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 100 Continue

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ cat ns-json
{ "prefix" : "will", "uri" : "http://marklogic.com/examples/shakespeare" }

$ curl --anyauth --user user:password -T './ns-json' -i \
  -H "Content-type: application/json" \
  http://localhost:8000/v1/config/namespaces/will

==> Create or update a namespace binding between the prefix "will" and the
    namespace URI http://marklogic.com/examples/shakespeare. MarkLogic
    Server returns the following headers:

Server: MarkLogic
Content-Type: text/plain; charset=UTF-8
Content-Length: 31
Connection: close

HTTP/1.1 100 Continue

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/namespaces/{prefix}" http-verb="DELETE" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove the namespace binding for <code>{prefix}</code>.
  </apidoc:summary>
  <apidoc:response>
    Upon success, MarkLogic Server responds with status 204 (Content 
    Deleted). MarkLogic Server responds with status 204 even if no
    binding exists for <code>{prefix}</code>.
  </apidoc:response>
  <apidoc:usage>
 For details, see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2339144'>Using Namespace Bindings</a> in the <em>REST Application Developer's Guide</em>.
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-admin</code> role, or the 
    following privileges:
    <p><code>http://marklogic.com/xdmp/privileges/rest-admin</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X DELETE -i \
    http://localhost:8004/v1/config/namespaces/bill

==> MarkLogic Server removes the namespace binding between the prefix
    "bill" and the associated URI and responds with status 204.  
    MarkLogic server responds with headers of the form:

Server: MarkLogic
Content-Type: text/xml; charset=UTF-8
Content-Length: 211
Connection: close

HTTP/1.1 204 Deleted
Server: MarkLogic
Content-Length: 0
Connection: close
  ]]></pre></apidoc:example>
</apidoc:function>


<!-- ************ Index Configuration ************ -->

<apidoc:function name="/v1/config/indexes" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Request a report on whether or not the database configuration includes
    index configurations that satisfy all installed query options.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      The format of the content returned by by the request, either 
      <code>xml</code> (default), <code>json</code>, or <code>html</code>. The 
      format parameter overrides any format specified in the Accept header. 
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response. Accepted values:
      <code>application/json</code>, <code>application/html</code>, or
      <code>text/XML</code> (the default). If the <code>format</code> 
      parameter is set, the Accept header is ignored in favor of the 
      <code>format</code> parameter.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the content returned in the response body, one of
      <code>application/xml</code>, <code>application/json</code>, or
      <code>text/html</code>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    <p>Upon success, MarkLogic Server responds with status 200 and the
    index report in the response body.</p>
  </apidoc:response>
  <apidoc:usage>
     Use this service to determine whether the database attached to 
     your REST API instance includes all the indexes required
     to support the installed query options (created using the
     /config/query service).
    <p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2353303'>Checking Index Availability</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -H "Accept: application/xml" \
     http://localhost:8004/v1/config/indexes

==> MarkLogic server responds with a 200 status and the requested
    report, as XML. For example, this report shows one missing
    path range index:

<rapi:index-summaries xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:index-count>2</rapi:index-count>
  <rapi:complete>false</rapi:complete>
  <rapi:index-summary>
    <rapi:name>/v1/config/query/default</rapi:name>
    <rapi:complete>true</rapi:complete>
  </rapi:index-summary>
  <rapi:index-summary>
    <rapi:name>/v1/config/query/tuples</rapi:name>
    <rapi:complete>false</rapi:complete>
    <range type="xs:string" xmlns="http://marklogic.com/appservices/search">
      <path-index>/PLAY/ACT/SCENE/TITLE</path-index>
    </range>
  </rapi:index-summary>
</rapi:index-summaries>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -H "Accept: application/json" \
     http://localhost:8004/v1/config/indexes

==> MarkLogic server responds with a 200 status and the requested
    report, as JSON. For example, this report shows one missing
    path range index:

{
  "index-summaries": {
    "index-summary": [
      {
        "name": "/v1/config/query/default",
        "complete": "true"
      },
      {
        "name": "/v1/config/query/tuples",
        "complete": "false",
        "range": {
          "type": "xs:string",
          "path-index": "/PLAY/ACT/SCENE/TITLE"
        }
      }
    ],
    "index-count": "2",
    "complete": "false"
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/config/indexes/{name}" http-verb="GET" 
                  lib="rest-client" 
                 category="Client API" subcategory="Configuration"
                 bucket="REST Resources API"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Request a report on whether or not the database configuration includes
    index configurations that satisfy these named query options.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="format?" type="string">
      The format of the content returned by by the request, either 
      <code>xml</code> (default), <code>json</code>, or <code>html</code>. The 
      format parameter overrides any format specified in the Accept header. 
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response. Accepted values:
      <code>application/json</code>, <code>application/html</code>, or
      <code>text/XML</code> (the
      default). If the <code>format</code> parameter is set, the Accept
      header is ignored in favor of the <code>format</code> parameter.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the content returned in the response body, one of
      <code>application/xml</code>, <code>application/json</code>, or
      <code>text/html</code>.
      depending on the type requested by the <code>format</code> value
      or Accept header.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server responds with status 200 and the
    index report in the response body.
  </apidoc:response>
  <apidoc:usage>
     Use this service to determine whether the database attached to 
     your REST API instance includes all the indexes required
     to support the named query options (created using the
     /config/query service).
    <p>
     The expected response type can be specified using either the
     <code>format</code> parameter or <code>Accept</code> header. One or
     the other must be supplied. If both are supplied and are different,
     the <code>format</code> parameter takes precedence.
    </p><p>
     For more details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/search.xml%2353303'>Checking Index Availability</a> in the <em>REST Application Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET \
     -H "Accept: application/xml" \
     http://localhost:8004/v1/config/index/tuples

==> MarkLogic server responds with a 200 status and the requested
    report, as XML. For example, this report shows one missing
    path range index:

<rapi:index-summaries xmlns:rapi="http://marklogic.com/rest-api">
  <rapi:index-count>1</rapi:index-count>
  <rapi:complete>false</rapi:complete>
  <rapi:index-summary>
    <rapi:name>/v1/config/query/tuples</rapi:name>
    <rapi:complete>false</rapi:complete>
    <range type="xs:string" xmlns="http://marklogic.com/appservices/search">
      <path-index>/PLAY/ACT/SCENE/TITLE</path-index>
    </range>
  </rapi:index-summary>
</rapi:index-summaries>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -X GET -H "Accept: application/json" \
     http://localhost:8004/v1/config/index/tuples

==> MarkLogic server responds with a 200 status and the requested
    report, as JSON. For example, this report shows one missing
    path range index:

{
  "index-summaries": {
    "index-summary": [
      {
        "name": "/v1/config/query/tuples",
        "complete": "false",
        "range": {
          "type": "xs:string",
          "path-index": "/PLAY/ACT/SCENE/TITLE"
        }
      }
    ],
    "index-count": "1",
    "complete": "false"
  }
}
  ]]></pre></apidoc:example>
</apidoc:function>


<!-- ************ Semantics ************ -->


<apidoc:function name="/v1/graphs" http-verb="GET"  lib="rest-client" 
                 category="Client API" bucket="REST Resources API" 
                 subcategory="Semantics"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   Retrieve a graph or a list of available graph URIs.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="graph?" type="string">
      The URI of the named graph to retrieve. You cannot use this parameter
      with the <code>default</code> parameter.
    </apidoc:param>
    <apidoc:param name="default?" type="string">
      Indicates the request should return the default graph. This parameter
      accepts no value. You cannot use this parameter with the 
      <code>graph</code> parameter.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response. When retrieving a list
      of available graphs (no request parameters), you can specify
      <code>text/plain</code>, <code>text/html</code>, or 
      <code>text/uri-list</code> (default). When retrieving a named
      graph or the default graph, you can specify any of the MIME
      types listed in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/loading.xml%2370682'>Supported RDF Triple Serializations</a> in the <em>Semantics Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data in the response body, corresponding to
      the MIME type in the Accept header.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
     Upon success, MarkLogic Server returns status 200 (OK). If a named graph
     or the default graph is requested, the response body contains the graph
     data. If neither the <code>graph</code> nor <code>default</code> request
     parameters are present, the response body contains a list of available
     graph URIs. If you request triples in an unsupported format, MarkLogic 
     Server returns status 406 (Not Acceptable).
  </apidoc:response>
  <apidoc:usage>
    This interface implements the GET method of the W3C Graph Store HTTP 
    Protocol; for details, see 
    <a href="http://www.w3.org/TR/sparql11-http-rdf-update/">http://www.w3.org/TR/sparql11-http-rdf-update/</a>.
    <p>
      The collection lexicon must be enabled on the database before using
      the REST graph store interfaces or using the GRAPH '?g' construct in 
      SPARQL queries. You can enable the collection lexicon from the Admin
      Interface.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X GET \
    'http://localhost:8000/v1/graphs'

==> Retrieve a list of graphs in the database. Since no Accept
    is given, results are returned as text/uri-list. MarkLogic Server
    responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: text/uri-list; charset=UTF-8
Server: MarkLogic
Content-Length: 61
Connection: Keep-Alive
Keep-Alive: timeout=5

/my/named/graph
http://marklogic.com/semantics#default-graph

If you request output as text/html, MarkLogic Server returns
data in the response body similar to the following:

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Graphs</title>
  </head>
  <body>
    <ul>
      <li>/my/named/graph</li>
      <li>http://marklogic.com/semantics#default-graph</li>
    </ul>
  </body>
</html>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X GET -H "Accept: text/turtle"
    'http://localhost:8000/v1/graphs?graph=/my/named/graph'

==> Retrieve the graph with URI /my/named/graph, in Turtle format. 
    MarkLogic Server responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: text/turtle; charset=UTF-8
Server: MarkLogic
Content-Length: 6680
Connection: Keep-Alive
Keep-Alive: timeout=5

@prefix xs: <http://www.w3.org/2001/XMLSchema#> .
<http://dbpedia.org/resource/Abraham_Lincoln> <http://dbpedia.org/ontology/birthDate> "1809-02-12"^^xs:date .
<http://dbpedia.org/resource/Alan_Turing> <http://dbpedia.org/ontology/birthDate> "1912-06-23"^^xs:date .
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/graphs" http-verb="HEAD" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Semantics"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Returns the same headers as an equivalent GET on the 
    <code>/graphs</code> service. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="graph?" type="string">
      Specify the URI of a named graph. You cannot use this 
      parameter with the <code>default</code> parameter.
    </apidoc:param>
    <apidoc:param name="default?" type="string">
      Indicates the request should act on the default graph. This parameter
      accepts no value. You cannot use this parameter with the 
      <code>graph</code> parameter.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response.
    </apidoc:header>
    <apidoc:header name="Content-Type" type="response">
      The MIME type of the data that would be returned by a GET request.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 200 (OK) and the same headers 
    that are returned by an equivalent GET on the /documents service.
  </apidoc:response>
  <apidoc:usage>
    Use this method to determine what headers an equivalent GET will return.
    This interface implements the HEAD method of the W3C Graph Store HTTP 
    Protocol; for details, see 
    <a href="http://www.w3.org/TR/sparql11-http-rdf-update/">http://www.w3.org/TR/sparql11-http-rdf-update/</a>.
    <p>
      The collection lexicon must be enabled on the database before using
      the REST graph store interfaces or using the GRAPH '?g' construct in 
      SPARQL queries. You can enable the collection lexicon from the Admin
      Interface.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X HEAD -H "Accept: text/turtle" \
    http://localhost:8000/v1/graphs?graph=/my/named/graph

HTTP/1.1 200 OK
Content-type: text/turtle; charset=UTF-8
Server: MarkLogic
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/graphs" http-verb="PUT" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Semantics"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Create or replace triples in a named graph or the default graph.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="graph?" type="string">
      The URI of the named graph to modify. You cannot use this parameter
      with the <code>default</code> parameter.
    </apidoc:param>
    <apidoc:param name="default?" type="string">
      Indicates the request should modify the default graph. This parameter
      accepts no value. You cannot use this parameter with the 
      <code>graph</code> parameter.
    </apidoc:param>
    <apidoc:param name="repair" type="string">
      If set to true, triples in the request body that cannot be parsed
      are skipped, and parsable triples are inserted. If set to false,
      triples in the request body that cannot be parsed cause all the data
      in the request to be rejected. Default: <code>false</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type" type="request">
      The MIME type of the data in the request body. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/loading.xml%2370682'>Supported RDF Triple Serializations</a> in the <em>Semantics Developer's Guide</em>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 201 (Created) or status
    200 (OK). If there are errors in the payload, the response body contains
    further information about the errors. If the request body is in an
    unsupported format, MarkLogic Server returns status 415 (Unsupported
    Media Type).
  </apidoc:response>
  <apidoc:usage>
    <p>
     A PUT request is functionally equivalent to a DELETE followed by a POST.
     Supplying an empty graph is equivalent to deleting the graph.
    </p><p>
     This interface implements the PUT method of the W3C Graph Store HTTP 
     Protocol; for details, see 
     <a href="http://www.w3.org/TR/sparql11-http-rdf-update/">http://www.w3.org/TR/sparql11-http-rdf-update/</a>.
     Additional capabilities for loading triples are available through the 
     XQuery API and the <code>mlcp</code> command line tool. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/loading.xml%2384491'>Loading Triples</a> in the <em>Semantics Developer's Guide</em>.
    </p>
    <p>Files submitted to this endpoint are limited in size based on the 
	    format of the documents, which is 512MB for XML files (for
	    example, rdf .rdf files) and 64MB for text documents (for example, 
	    turtle .ttl files). </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
    <p>
      The collection lexicon must be enabled on the database before using
      the REST graph store interfaces or using the GRAPH '?g' construct in 
      SPARQL queries. You can enable the collection lexicon from the Admin
      Interface.
    </p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
NOTE: Be sure to use --data-binary rather than -d if extracting
the request body from a file with curl, as shown below.

$ curl --anyauth --user user:password -i -X PUT --data-binary @./example.ttl \
    -H "Content-type: text/turtle" \
    http://localhost:8000/v1/graphs?default

==> The Turtle data in example.ttl is created as the default graph.
    MarkLogic Server responds with output similar to the following:

HTTP/1.1 201 Created
Location:
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/graphs" http-verb="POST" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Semantics"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Merge triples into a named graph or the default graph.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="graph?" type="string">
      The URI of the named graph to modify. You cannot use this parameter
      with the <code>default</code> parameter.
    </apidoc:param>
    <apidoc:param name="default?" type="string">
      Indicates the request should modify the default graph. This parameter
      accepts no value. You cannot use this parameter with the 
      <code>graph</code> parameter.
    </apidoc:param>
    <apidoc:param name="repair" type="string">
      If set to true, triples in the request body that cannot be parsed
      are skipped, and parsable triples are inserted. If set to false,
      triples in the request body that cannot be parsed cause all the data
      in the request to be rejected. Default: <code>false</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Content-Type" type="request">
      The MIME type of the data in the request body. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/loading.xml%2370682'>Supported RDF Triple Serializations</a> in the <em>Semantics Developer's Guide</em>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
    Upon success, MarkLogic Server returns status 201 (Created) or status
    204 (Updated). If there are errors in the payload, the response body contains
    further information about the errors. If the request body is in an
    unsupported format, MarkLogic Server returns status 415 (Unsupported
    Media Type).
  </apidoc:response>
  <apidoc:usage>
    <p>
     Supplying an empty graph is a no-op.
    </p><p>
     This interface implements the POST method of the W3C Graph Store HTTP 
     Protocol; for details, see 
     <a href="http://www.w3.org/TR/sparql11-http-rdf-update/">http://www.w3.org/TR/sparql11-http-rdf-update/</a>.
     Additional capabilities are available through the 
     XQuery API and the <code>mlcp</code> command line tool. For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/updating.xml%2350917'>Updating Triples</a> in the <em>Semantics Developer's Guide</em>.
    </p><p>
      The collection lexicon must be enabled on the database before using
      the REST graph store interfaces or using the GRAPH '?g' construct in 
      SPARQL queries. You can enable the collection lexicon from the Admin
      Interface.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
NOTE: Be sure to use --data-binary rather than -d if extracting
the request body from a file with curl, as shown below.

$ curl --anyauth --user user:password -i -X POST \
    --data-binary @./example.nq -H "Content-type: application/n-quads" \
    http://localhost:8000/v1/graphs?default

==> The N-Quad data in example.nq is merged into the default graph.
    MarkLogic Server responds with output similar to the following:

HTTP/1.1 201 Created
Location:
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
NOTE: Be sure to use --data-binary rather than -d if extracting
the request body from a file with curl, as shown below.

$ curl --anyauth --user user:password -i -X POST \
    --data-binary @./example.ttl -H "Content-type: text/turtle" \
    http://localhost:8000/v1/graphs?graph=/my/named/graph

==> The Turtle data in example.ttl is merged into the named graph
    with the URI /my/named/graph. MarkLogic Server responds with 
    output similar to the following:

HTTP/1.1 201 Created
Location:
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/graphs" http-verb="DELETE" 
                  lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Semantics"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
    Remove triples in a named graph or the default graph.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
    <apidoc:param name="graph" type="string">
      The name of the graph to modify. You cannot use this parameter
      in conjunction with the <code>default</code> parameter.
    </apidoc:param>
    <apidoc:param name="default" type="string">
      Indicates the request should modify the default graph. You cannot
      use this parameter in conjunction with the <code>graph</code> parameter.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
  </apidoc:headers>
  <apidoc:response>
    MarkLogic Server returns status 204 (Updated).
  </apidoc:response>
  <apidoc:usage>
    <p>
     This interface implements the DELETE method of the W3C Graph Store HTTP 
     Protocol; for details, see 
     <a href="http://www.w3.org/TR/sparql11-http-rdf-update/">http://www.w3.org/TR/sparql11-http-rdf-update/</a>. This implementation differs from the
     standard in that it returns status 204 even if the target graph does
     not exist.
    </p><p>
     This operation only updates triples documents. That is, documents
     with a <code>sem:triples</code> root element, such as those created
     using PUT or POST on <code>/graphs</code>. It has no effect on triples 
     embedded in regular XML documents. If you delete a graph that contains 
     both embedded triples and triples stored in triples documents, the 
     embedded triples, and therefore the graph, remain even after this 
     operation returns success.
    </p><p>
     For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/updating.xml%2332341'>Deleting Triples</a> in the <em>Semantics Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-writer</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-writer</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X DELETE \
    http://localhost:8000/v1/graphs?graph=/my/named/graph

HTTP/1.1 204 Updated
Server: MarkLogic
Content-Length: 0
Connection: Keep-Alive
Keep-Alive: timeout=5
  ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/graphs/sparql" http-verb="GET"  
                 lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Semantics"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   Perform a SPARQL query on the database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="query" type="string">
      A URL-encoded SPARQL query operation. 
    </apidoc:param>	
    <apidoc:param name="default-graph-uri*" type="string">
      The URI of the graph or graphs to use as the default graph.
    </apidoc:param>
    <apidoc:param name="named-graph-uri*" type="string">
      The URI of a named graph or graphs to include in the query
	  operation.
    </apidoc:param>	
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>	
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the response when performing a query. The 
	 response MIME type depends on the type of information generated by 
	 the query. For details, 
 see <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/semantic-searches.xml%2383694'>Response Output Formats</a> in the <em>Semantics Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response body when performing a query. 
	  The MIME type depends on the type of information generated by the query. 
	  For details, see 
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/semantic-searches.xml%2383694'>Response Output Formats</a> in the <em>Semantics Developer's Guide</em>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
     Upon success, MarkLogic Server returns status 200 (OK) and the
     response body contains the query result. If your request results in
     an unsupported format, MarkLogic Server returns status 406 
     (Not Acceptable).
  </apidoc:response>
  <apidoc:usage>
    <p>
     When you use the <code>query</code> request parameter, this interface 
	 implements the GET method of the W3C SPARQL Protocol for query; for details, 
	 see <a href="http://www.w3.org/TR/2013/REC-sparql11-protocol-20130321/#query-operation">http://www.w3.org/TR/2013/REC-sparql11-protocol-20130321#query-operation</a>. 
    </p>
	<p>
     You can specify the RDF Dataset against which to execute the query 
     using the <code>named-graph-uri</code> and
     <code>default-graph-uri</code> request parameters, or within the 
	 query itself. If the dataset is specified in both the request 
	 parameters and the query, the dataset defined by the request parameters 
	 is used. If neither is specified, all graphs are included in the operation.
    </p>
	<p>
      The collection lexicon must be enabled on the database before using
      the REST graph store interfaces or using the GRAPH '?g' construct in 
      SPARQL queries. You can enable the collection lexicon from the Admin
      Interface.
    </p><p>
      The response MIME type depends on the type of SPARQL query and the 
	  Accept header MIME type. The four types of SPARQL query (SELECT, 
	  CONSTRUCT, DESCRIBE, ASK) return data in different formats.
      For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/semantic-searches.xml%2383694'>Response Output Formats</a> in the <em>Semantics Developer's Guide</em>.
    </p><p>
     For more details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/semantic-searches.xml%2331872'>Querying Triples with REST API</a> in the <em>Semantics Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    Using SPARQL query with REST requires the <code>rest-reader</code> role, or
	the following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>	
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X GET \
    -H "Accept: application/sparql-results+json" \
    http://localhost:8000/v1/graphs/sparql?query=your-urlencoded-query

==> Run the SPARQL query passed as the URL encoded value of the
    query request parameter. MarkLogic Server responds with output
    similar to the following:

HTTP/1.1 200 OK
Content-type: application/sparql-results+json
Server: MarkLogic
Content-Length: 126
Connection: Keep-Alive
Keep-Alive: timeout=5

{
  "head": {
    "vars": [ "s" ]
  },
  "results": {
    "bindings": [ {
      "s": {
        "type": "uri",
        "value": "http://dbpedia.org/resource/Alfonso_Arau"
      }
    } ]
  }
}

If you set the Accept header to application/sparql-results+xml, 
MarkLogic Server returns data similar to the following:

<sparql xmlns="http://www.w3.org/2005/sparql-results#">
  <head>
    <variable name="s"/>
  </head>
  <results>
    <result>
      <binding name="s">
        <uri>http://dbpedia.org/resource/Alfonso_Arau</uri>
      </binding>
    </result>
  </results>
</sparql>
  ]]></pre></apidoc:example></apidoc:function>

<apidoc:function name="/v1/graphs/sparql" http-verb="POST"  
                 lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Semantics"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   Perform a SPARQL query or SPARQL Update on one or more graphs. These two 
   operations are mutually exclusive.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="query" type="string">
      A URL-encoded SPARQL query operation. You should only use this parameter 
	  when you put request parameters in the request body and use 
      <code>application/x-www-form-urlencoded</code> as the request
      content type.
    </apidoc:param>
	<apidoc:param name="update" type="string">
	 A URL-encoded SPARQL update operation. You should only use this 
	 parameter when you put request parameters in the request body and 
	 use <code>application/x-www-form-urlencoded</code> as the request content 
	 type.
	</apidoc:param>
    <apidoc:param name="default-graph-uri*" type="string">
      The URI of the graph or graphs to use as the default graph. 
    </apidoc:param>
    <apidoc:param name="named-graph-uri*" type="string">
      The URI of a named graph or graphs to include in the query or update 
	  operation.
    </apidoc:param>
	<apidoc:param name="using-graph-uri*">
	 The URI of the graph or graphs to address as part of a SPARQL update 
	 operation. 
	</apidoc:param>
	<apidoc:param name="using-named-graph-uri*">
	 The URI of a named graph or graphs to address as part of a SPARQL update 
	 operation. 
	</apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
	<apidoc:param name="default-permissions">
	 The permissions to use when creating a new graph. If not supplied, the 
	 user's default permissions will be used. This parameter is ignored if the 
	 operation is not creating a graph.
	</apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
     The expected MIME type of the response when performing a query. The 
	 response MIME type depends on the type of information generated by 
	 the query. For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/semantic-searches.xml%2383694'>Response Output Formats</a> in the <em>Semantics Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="request">
      The MIME type of the query in the request body. Allowed values:
      <code>application/x-www-form-urlencoded</code>,
      <code>application/sparql-query</code>,
	  <code>application/sparql-update</code>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response body when performing a query. 
	  The MIME type depends on the type of information generated by the query. 
	  For details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/semantic-searches.xml%2383694'>Response Output Formats</a> in the <em>Semantics Developer's Guide</em>.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
     Upon success, MarkLogic Server returns status 200 (OK) and the
     response body contains the query result. The response body will be
	 empty for an update. If your request results in an unsupported format, 
	 MarkLogic Server returns status 406 (Not Acceptable).
  </apidoc:response>
  <apidoc:usage>
    <p>
     When you use the <code>query</code> request parameter, this interface 
	 implements the POST method of the W3C SPARQL Protocol for query; for details, 
	 see <a href="http://www.w3.org/TR/2013/REC-sparql11-protocol-20130321/#query-operation">http://www.w3.org/TR/2013/REC-sparql11-protocol-20130321#query-operation</a>. 
    </p><p>
     When you use the <code>update</code> request parameter, this interface 
	 implements the POST method of the W3C SPARQL Protocol for update; for details, 
	 see <a href="http://www.w3.org/TR/2013/REC-sparql11-protocol-20130321/#update-operation">http://www.w3.org/TR/2013/REC-sparql11-protocol-20130321#update-operation</a>. 
    </p><p>
     If you use <code>application/x-www-form-urlencoded</code> for the
     request body content type, all request parameters should be placed in the
	 body, with their values URL-encoded. Separate parameters with an
     ampersand. For a query, specify your SPARQL query using the <code>query</code> 
     request parameter. For an update, specify your SPARQL update using the 
	 <code>update</code> request parameter.
    </p><p>
     If you use <code>application/sparql-query</code>
     for the request body content type, the body must contain only an
     unencoded SPARQL query, and you cannot specify a <code>query</code>
     request parameter. If you use <code>application/sparql-update</code> 
	 for the request body content type, the body must contain only an 
	 unencoded SPARQL update, and you cannot specify an update request query 
	 parameter. 
    </p><p>
     You can specify the RDF Dataset against which to execute the query or 
	 update using the <code>named-graph-uri</code> and 
	 <code>default-graph-uri</code> request parameters, or within the query or
	 update. If the dataset is specified in both the request parameters and the
     query or update, the dataset defined by the request parameters
     is used. If neither is specified, all graphs are included in the operation.
    </p><p>
	Including the <code>using-graph-uri</code> or <code>using-named-graph-uri</code>
	parameters when using REST to send a SPARQL 1.1 Update request that contains 
	an operation that uses the <code>USING</code>, <code>USING NAMED</code>, 
	or <code>WITH</code> clause will cause an error. 
	</p><p>
     The collection lexicon must be enabled on the database before using
     the REST graph store interfaces or using the GRAPH '?g' construct in 
     SPARQL queries. You can enable the collection lexicon from the Admin
     Interface.
    </p><p>
      The response MIME type depends on the type of SPARQL query or SPARQL
      Update and the Accept header MIME type. The four types of SPARQL query
      (SELECT, CONSTRUCT, DESCRIBE, ASK) return data in different formats.
      See
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/semantic-searches.xml%2383694'>Response Output Formats</a> in the <em>Semantics Developer's Guide</em>.
      </p><p>For more about using SPARQL query and SPARQL update, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/semantic-searches.xml%2331872'>Querying Triples with REST API</a> in the <em>Semantics Developer's Guide</em>
      and
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/sparql-update.xml%2383527'>Using SPARQL Update with REST</a> in the <em>Semantics Developer's Guide</em>.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
NOTE: Be sure to use --data-binary rather than -d if extracting
the request body from a file with curl, as shown below.

$ cat mexico.sparql
SELECT ?s WHERE {
  ?s 
  <http://dbpedia.org/ontology/birthPlace> 
  <http://dbpedia.org/resource/Mexico> 
}
LIMIT 5

$ curl --anyauth --user user:password -i -X POST
    --data-binary @./mexico.sparql
    -H "Content-type: application/sparql-query"
    -H "Accept: application/sparql-results+xml"
    http://localhost:8000/v1/graphs/sparql

==> Run a SPARQL query, placing the unencoded query in the POST body.
    MarkLogic Server responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: application/sparql-results+xml
Server: MarkLogic
Content-Length: 213
Connection: Keep-Alive
Keep-Alive: timeout=5

<sparql xmlns="http://www.w3.org/2005/sparql-results#">
  <head>
    <variable name="s"/>
  </head>
  <results>
    <result>
	  <binding name="s">
	    <uri>http://dbpedia.org/resource/Aaron_Herrera</uri>
	  </binding>
	</result>
    <result>
	  <binding name="s">
	    <uri><http://dbpedia.org/resource/Abel_Ramirez></uri>
	  </binding>
	</result>
    <result>
	  <binding name="s">
	    <uri>http://dbpedia.org/resource/Abel_Salazar_(actor)</uri>
	  </binding>
	</result>
    <result>
	  <binding name="s">
	    <uri>http://dbpedia.org/resource/Abigail_Elizalde</uri>
	  </binding>
	</result>
    <result>
	  <binding name="s">
	    <uri>http://dbpedia.org/resource/Abismo_Negro</uri>
	  </binding>
	</result>
  </results>
</sparql>

The following is the equivalent result returned as 
application/sparql-results+json:

{
  "head":{
    "vars":["s"]
	}, 
	"results":{
	  "bindings":[{
	    "s":{
		  "type":"uri", 
		  "value":"http://dbpedia.org/resource/Aaron_Herrera"
		  }}, 
		  {
		"s":{
		  "type":"uri", 
		  "value":"<http://dbpedia.org/resource/Abel_Ramirez>"
		  }}, 
		  {
		"s":{
		  "type":"uri", 
		  "value":"http://dbpedia.org/resource/Abel_Salazar_(actor)"
		  }},
		  {
		"s":{
		  "type":"uri", "value":"http://dbpedia.org/resource/Abigail_Elizalde"
		  }}, 
		  {
		"s":{
		  "type":"uri", 
		  "value":"http://dbpedia.org/resource/Abismo_Negro"
		  }}
		]
	}
}
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$  curl --anyauth --user user:password -i -X POST
   --data  "query=SELECT%20%3Fs%20WHERE%20%7B%0A%20
   %20%3Fs%20%0A%20%20%3Chttp%3A%2F%2Fdbpedia.org 
   %2Fontology%2FbirthPlace%3E%20%0A%20%20%3Chttp
   %3A%2F%2Fdbpedia.org%2Fresource%2FMexico%3E%20
   %0A%7D" -H "Content-type:application/x-www-form-urlencoded"
   -H "Accept:application/sparql-results+xml"
   http://localhost:8004/v1/graphs/sparql

==> Run a SPARQL query, passing a URL-encoded query as form data.
    MarkLogic Server responds with triples similar to the following:

HTTP/1.1 200 OK
Content-type: application/sparql-results+xml
Server: MarkLogic
Content-Length: 241432
Connection: Keep-Alive
Keep-Alive: timeout=5

<sparql xmlns="http://www.w3.org/2005/sparql-results#"><head><variable name="s"/>
</head><results>
<result><binding name="s"><uri>http://dbpedia.org/resource/Aaron_Herrera
</uri></binding></result>
<result><binding name="s"><uri><http://dbpedia.org/resource/Abel_Ramirez></uri>
</binding></result>
<result><binding name="s"><uri>http://dbpedia.org/resource/Abel_Salazar_(actor)</uri>
</binding></result>
<result><binding name="s"><uri>http://dbpedia.org/resource/Abigail_Elizalde</uri>
</binding></result>
<result><binding name="s"><uri>http://dbpedia.org/resource/Abismo_Negro</uri>
</binding></result>
</sparql> ]]></pre></apidoc:example>
<apidoc:example><pre xml:space="preserve"><![CDATA[
(: Example using curl with SPARQL Update :)

Note: Put the SPARQL Update into the body of the request. 

curl --anyauth --user admin:admin -i -X POST
-H "Content-type:application/x-www-form-urlencoded"
-H "Accept:application/sparql-results+xml"
--data-urlencode update='PREFIX dc: <http://purl.org/dc/elements/1.1/>
INSERT DATA{ GRAPH <C1> {<http://example/book1/> dc:title "C book"} }'
'http://localhost:8321/v1/graphs/sparql'

=>
The SPARQL Update is passed as the URL-encoded value of the request parameter. 
MarkLogic Server responds with triples similar to the following:

HTTP/1.1 200 OK
Content-type: application/sparql-results+xml; charset=UTF-8
Server: MarkLogic
Content-Length: 82
Connection: Keep-Alive
Keep-Alive: timeout=5

<sparql xmlns="http://www.w3.org/2005/sparql-results#"><head/><results/></sparql>
	]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="/v1/graphs/things" http-verb="GET"  
                 lib="rest-client" category="Client API" 
                 bucket="REST Resources API" subcategory="Semantics"
                 xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   Retrieve a list of all graph nodes in the database, or a specified
   set of nodes.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="iri*" type="string">
      IRIs about which to return information.
    </apidoc:param>
    <apidoc:param name="database?" type="string">
      Perform this operation on the named content database instead of 
      the default content database associated with the REST API instance.
      Using an alternative database requires the "eval-in" privilege; for
      details, see
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/rest-dev/intro.xml%2359939'>Security Requirements</a> in the <em>REST Application Developer's Guide</em>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:headers>
    <apidoc:header name="Accept*" type="request">
      The expected MIME type of the response. With no parameters, the
      only supported MIME type is <code>text/html</code>. When the
      <code>iri</code> parameter is used, you can specify any of 
      the MIME types listed in
 <a href='#display.xqy?fname=http://pubs/6.0doc/xml/semantics/loading.xml%2370682'>Supported RDF Triple Serializations</a> in the <em>Semantics Developer's Guide</em>.
    </apidoc:header>
    <apidoc:header name="Content-type" type="response">
      The MIME type of the data in the response body. The MIME type 
      corresponds to the type requested by the Accept header.
    </apidoc:header>
  </apidoc:headers>
  <apidoc:response>
     Upon success, MarkLogic Server returns status 200 (OK) and the
     response body contains the requested data. If your request results in
     an unsupported format, MarkLogic Server returns status 406 
     (Not Acceptable). If a specified IRI does not exist, MarkLogic server
     returns status 404 (Not Found).
  </apidoc:response>
  <apidoc:usage>
    <p>
     With no request parameters, this method returns a list of nodes in
     the database, both blank and named. If you specify one or more
     IRI's using <code>iri</code>, information is returned about just
     those nodes. The information is in CBD triple format.
    </p><p>
     This operation returns a maximum of 10,000 items.
    </p><p>
     The collection lexicon must be enabled on the database before using
     the REST graph store interfaces or using the GRAPH '?g' construct in 
     SPARQL queries. You can enable the collection lexicon from the Admin
     Interface.
    </p>
  </apidoc:usage>
  <apidoc:privilege>
    This operation requires the <code>rest-reader</code> role, or the 
    following privilege:
    <p><code>http://marklogic.com/xdmp/privileges/rest-reader</code></p>
  </apidoc:privilege>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X GET -H "Accept: text/html" \
    http://localhost:8000/v1/graphs/things

==> The list of all graph nodes is returned as XML. MarkLogic Server
    responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: text/html; charset=UTF-8
Server: MarkLogic
Content-Length: 1071
Connection: Keep-Alive
Keep-Alive: timeout=5

<html xmlns="http://www.w3.org/1999/xhtml">
<title>Subjects</title>
<body>
  <h2>Subjects</h2>
  <p>
    <a href="/v1/graphs/things?iri=http%3a//dbpedia.org/resource/Abraham_Lincoln">&lt;http://dbpedia.org/resource/Abraham_Lincoln&gt;</a>
  </p>
  <p>
    <a href="/v1/graphs/things?iri=http%3a//dbpedia.org/resource/Alan_Turing">&lt;http://dbpedia.org/resource/Alan_Turing&gt;</a>
  </p>
  <p>
    <a href="/v1/graphs/things?iri=http%3a//dbpedia.org/resource/Aleister_Crowley">&lt;http://dbpedia.org/resource/Aleister_Crowley&gt;</a>
  </p>
  <p>
    <a href="/v1/graphs/things?iri=http%3a//dbpedia.org/resource/Alexander_Mackenzie">&lt;http://dbpedia.org/resource/Alexander_Mackenzie&gt;</a>
  </p>
  <p>
    <a href="/v1/graphs/things?iri=http%3a//dbpedia.org/resource/Alfonso_Arau">&lt;http://dbpedia.org/resource/Alfonso_Arau&gt;</a>
  </p>
  <p>
    <a href="/v1/graphs/things?iri=http%3a//dbpedia.org/resource/Alfred_Lawson">&lt;http://dbpedia.org/resource/Alfred_Lawson&gt;</a>
  </p>
  <p>
    <a href="/v1/graphs/things?iri=http%3a//dbpedia.org/resource/Aristotle">&lt;http://dbpedia.org/resource/Aristotle&gt;</a>
  </p>
</body>
</html>
  ]]></pre></apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
$ curl --anyauth --user user:password -i -X GET -H "Accept: text/turtle" \
    http://localhost:8000/v1/graphs/things?iri=http://dbpedia.org/resource/Aleister_Crowley

==> Retrieve the nodes selected by the IRI 
    http://dbpedia.org/resources/Aleister_Crowley in Turtle format.
    MarkLogicServer responds with output similar to the following:

HTTP/1.1 200 OK
Content-type: text/turtle; charset=UTF-8
Server: MarkLogic
Content-Length: 1095
Connection: Keep-Alive
Keep-Alive: timeout=5

@prefix xs: <http://www.w3.org/2001/XMLSchema#> .
<http://dbpedia.org/resource/Aleister_Crowley> <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Hastings> .
<http://dbpedia.org/resource/Aleister_Crowley> <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Royal_Leamington_Spa> .
<http://dbpedia.org/resource/Aleister_Crowley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person> .
<http://dbpedia.org/resource/Aleister_Crowley> <http://xmlns.com/foaf/0.1/givenName> "Aleister" .
<http://dbpedia.org/resource/Aleister_Crowley> <http://xmlns.com/foaf/0.1/name> "Aleister Crowley" .
<http://dbpedia.org/resource/Aleister_Crowley> <http://xmlns.com/foaf/0.1/surname> "Crowley" .
<http://dbpedia.org/resource/Aleister_Crowley> <http://purl.org/dc/elements/1.1/description> "poet, mountaineer, occultist" .
<http://dbpedia.org/resource/Aleister_Crowley> <http://dbpedia.org/ontology/birthDate> "1875-10-12"^^xs:date .
<http://dbpedia.org/resource/Aleister_Crowley> <http://dbpedia.org/ontology/deathDate> "1947-12-01"^^xs:date .
  ]]></pre></apidoc:example>
</apidoc:function>

</apidoc:module>
