<apidoc:module name="GeoJSON" subcategory="GeoJSON" bucket="XQuery Library Modules" category="Geospatial Supporting Functions" 
  xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
  xmlns="http://www.w3.org/1999/xhtml" lib="geojson"
>
<apidoc:summary access="public" subcategory="GeoJSON" 
	bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
<p>The GeoJSON module provides support for geospatial queries using GeoJSON. 
</p>
<p>To use the GeoJSON module as part of your own XQuery module, include the
following line in your XQuery prolog:
</p>
<p><code>import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";</code></p>
<p>The library namespace prefix <code>geojson</code> is <em>not</em> predefined
in the server.</p>
</apidoc:summary>

<apidoc:function name="point" type="geojosn" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
  Create a cts:point value from a GeoJSON "Point" type geometry object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="point" type="object-node()">
    A GeoJSON Point node.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:point </apidoc:return>
  <apidoc:usage>The GeoJSON Point node includes additional
  information that is not retained in the cts:point value.  In particular, the
  altitude part of the point value will be dropped.  Therefore two GeoJSON 
  points at the same latitude and longitude with different altitude will
  nevertheless have equal cts:point values.</apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:point(
    object-node { "type" : "Point", "coordinates" : array-node {100.00, 0.0} }
  )
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="multi-point" type="geojosn" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a set of cts:point values from a GeoJSON "MultiPoint" type 
	  geometry object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="multi-point" type="object-node()">
    A GeoJSON MultiPoint node.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:point* </apidoc:return>
  <apidoc:usage>The GeoJSON MultiPoint node includes additional
  information that is not retained in the cts:point values.  In particular, the
  altitude part of each point value will be dropped.</apidoc:usage>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:multi-point( object-node { 
    "type" : "Point", 
    "coordinates" : array-node { array-node {100.0, 0.0}, 
                                 array-node {101.0, 1.0} }
  )
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="box" type="geojson" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
  Create a cts:box value from GeoJSON bbox property.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="box" type="object-node()">
    A GeoJSON node that has a bbox property.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:box </apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:box(object-node { 
    "type": "Feature",
    "bbox": array-node {-180.0, -90.0, 180.0, 90.0},
    "geometry": object-node {
      "type": "Polygon",
      "coordinates": array-node { array-node {
        array-node {-180.0, 10.0}, 
        array-node {20.0, 90.0}, 
        array-node {180.0, -5.0},
        array-node {-30.0, -90.0}
      }}
    }
  })

  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="circle" type="geojson" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
    Create a cts:circle value from a radius and a GeoJSON "Point" type 
    geometry object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="radius" type="xs:double">
    The radius of the circle, in miles.
    </apidoc:param>
    <apidoc:param name="center" type="object-node()">
    A GeoJSON Point node representing the center of the circle.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:circle </apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:circle(1,
    object-node { "type" : "Point", "coordinates" : array-node {100.00, 0.0} }
  )
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="linestring" type="geojson" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a cts:linestring value from a GeoJSON "LineString" type 
	  geometry object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="linestring" type="object-node()">
    A GeoJSON LineString node.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:linestring </apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:linestring(
    object-node { 
      "type": "LineString",
      "coordinates": array-node { array-node {100.0, 0.0}, array-node {101.0, 1.0} }
    }
  )
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="multi-linestring" type="geojson" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a set of cts:linestring values from a GeoJSON 
	  "MultiLineString" type geometry object.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="multi-linestring" type="object-node()">
    A GeoJSON MultiLineString node.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:linestring* </apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:multi-linestring(
    object-node { 
      "type": "LineString",
      "coordinates": array-node {
        array-node { array-node {100.0, 0.0}, array-node {101.0, 1.0} },
        array-node { array-node {102.0, 2.0}, array-node {103.0, 3.0} }
      }
    }
  )
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="polygon" type="geojson" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
  Create a cts:polygon value from a GeoJSON "Polygon" type geometry object or 
  a sequence of GeoJSON "Point" type geometry objects.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="polygon-or-points" type="object-node()+">
    A sequence of Point node representing the vertices of the 
    polygon or a Polygon node itself. 
    Note that if it is a Polygon node, the return from this function
    represents the exterior polygon.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:polygon </apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:polygon((
    object-node { "type" : "Point", "coordinates" : array-node {100.0, 0.0} },
    object-node { "type" : "Point", "coordinates" : array-node {101.0, 0.0} },
    object-node { "type" : "Point", "coordinates" : array-node {101.0, 1.0} },
    object-node { "type" : "Point", "coordinates" : array-node {100.0, 1.0} },
    object-node { "type" : "Point", "coordinates" : array-node {100.0, 0.0} }
  ))
  ]]></pre>
  </apidoc:example>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:polygon(object-node {
    "type": "Polygon",
    "coordinates": array-node {
      array-node { 
        array-node {100.0, 0.0}, 
        array-node {101.0, 0.0}, 
        array-node {101.0, 1.0}, 
        array-node {100.0, 1.0},
        array-node {100.0, 0.0}
      },
      array-node { 
        array-node {100.2, 0.2}, 
        array-node {100.8, 0.2}, 
        array-node {100.8, 0.8}, 
        array-node {100.2, 0.8}, 
        array-node {100.2, 0.2} 
      }
     }
   })
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="interior-polygon" type="geojson" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a sequence of cts:polygon values from a GeoJSON "Polygon" 
	  type geometry object.  The returned polygons represent the 
	  interior polygons, if any.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="polygon" type="object-node()">
    A GeoJSON Polygon node representing the polygon.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:polygon* </apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:interior-polygon(object-node {
    "type": "Polygon",
    "coordinates": array-node {
      array-node { 
        array-node {100.0, 0.0}, 
        array-node {101.0, 0.0}, 
        array-node {101.0, 1.0}, 
        array-node {100.0, 1.0},
        array-node {100.0, 0.0}
      },
      array-node { 
        array-node {100.2, 0.2}, 
        array-node {100.8, 0.2}, 
        array-node {100.8, 0.8}, 
        array-node {100.2, 0.8}, 
        array-node {100.2, 0.2} 
      }
     }
   })
  ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="complex-polygon" type="kml" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
	  Create a <code>cts:complex-polygon</code> value from a 
	  GeoJSON "Polygon" type geometry object. The polygon returned 
	  represents the combination of 
	  the exterior polygon and the interior polygons.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="complex-polygon" type="node()">
    A Polygon node representing the complex polygon.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:complex-polygon </apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml";
  import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

  geojson:complex-polygon(object-node {
    "type": "Polygon",
    "coordinates": array-node {
      array-node { 
        array-node {100.0, 0.0}, 
        array-node {101.0, 0.0}, 
        array-node {101.0, 1.0}, 
        array-node {100.0, 1.0},
        array-node {100.0, 0.0}
      },
      array-node { 
        array-node {100.2, 0.2}, 
        array-node {100.8, 0.2}, 
        array-node {100.8, 0.8}, 
        array-node {100.2, 0.8}, 
        array-node {100.2, 0.2} 
      }
     }
   })
   ]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="geospatial-query" type="geojson" lib="geojson" 
	subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
  Returns a cts:query matching points within given regions.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="regions" type="cts:region*">
	    One or more geographic boxes, circles, polygons, linestrings 
	    or points. Where multiple boxes, circles, polygons, linestrings 
	    or points are specified, the query matches if any box, circle, 
	    polygon, linestring or point matches.
    </apidoc:param>
    <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p>Options include:</p>
      <blockquote>
        <dl>
        <dt>"coordinate-system=wgs84"</dt>
        <dd>Use the WGS84 coordinate system.</dd>
        <!--
        <dt>"unit=miles"</dt>
        <dd>Distance (for circles) is measured in miles.</dd>
        -->
        <dt>"boundaries-included"</dt>
	<dd>Points on boxes' and circles' boundaries are counted as matching.  
		This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
	<dd>Points on boxes' and circles' boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
	<dd>Points on boxes' latitude boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
	<dd>Points on boxes' longitude boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
	<dd>Points on the boxes' southern boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
	<dd>Points on the boxes' western boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
	<dd>Points on the boxes' northern boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
	<dd>Points on the boxes' eastern boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
      </dl></blockquote>
    </apidoc:param>
    <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>cts:query</apidoc:return>
<apidoc:usage>
<p>Point values and boundary specifications of boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western 
longitudes take negative values.  Longitudes will be wrapped to the range 
(-180,+180) and latitudes will be clipped to the range (-90,+90).  
</p>
<p>If the northern boundary of a box is south of the southern boundary, no 
points will  match. However, longitudes wrap around the globe, so that if 
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p>Special handling occurs at the poles, as all longitudes exist at latitudes 
+90 and -90.
</p>
</apidoc:usage>
<apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

(: create a document with test data :)
xdmp:document-insert("first.json",
  object-node {  
    "type": "Feature",  
     "geometry": object-node {    
        "type": "Point",    
         "coordinates": array-node {125.6, 8.1}  },  
     "properties": object-node {    
       "name": "Test"  
      }
   });

xquery version "1.0-ml";
import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

let $q := geojson:geospatial-query(cts:box(1, 120, 35, 131), ("uncached"), 2.0)
return cts:search(fn:doc(), $q)
(:
  returns first.json
:)
]]></pre></apidoc:example>
</apidoc:function>

<apidoc:function name="geospatial-query-from-nodes" type="geojson" 
	lib="geojson" subcategory="GeoJSON" bucket="XQuery Library Modules" 
	category="Geospatial Supporting Functions">
  <apidoc:summary>
  Returns a cts:query matching points within given regions.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="regions" type="node()*">
	    One or more geographic circles, polygons, linestrings or 
	    points, represented as GeoJSON objects. Where multiple circles, 
	    polygons, linestrings or points are specified, the query matches 
	    if any circle, polygon, linestring or point matches.
    </apidoc:param>
    <apidoc:param name="options" type="xs:string*" optional="true">
    Options to this query.  The default is ().
    <p>Options include:</p>
      <blockquote>
        <dl>
        <dt>"coordinate-system=wgs84"</dt>
        <dd>Use the WGS84 coordinate system.</dd>
        <!--
        <dt>"unit=miles"</dt>
        <dd>Distance (for circles) is measured in miles.</dd>
        -->
        <dt>"boundaries-included"</dt>
	<dd>Points on boxes' and circles' boundaries are counted as matching.  
		This is the default.</dd>
        <dt>"boundaries-excluded"</dt>
	<dd>Points on boxes' and circles' boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-latitude-excluded"</dt>
	<dd>Points on boxes' latitude boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-longitude-excluded"</dt>
	<dd>Points on boxes' longitude boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-south-excluded"</dt>
	<dd>Points on the boxes' southern boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-west-excluded"</dt>
	<dd>Points on the boxes' western boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-north-excluded"</dt>
	<dd>Points on the boxes' northern boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-east-excluded"</dt>
	<dd>Points on the boxes' eastern boundaries are not counted as 
		matching.</dd>
        <dt>"boundaries-circle-excluded"</dt>
        <dd>Points on circles' boundary are not counted as matching.</dd>
      </dl></blockquote>
    </apidoc:param>
    <apidoc:param name="weight" type="xs:double?" optional="true">
    A weight for this query.  The default is 1.0.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return> cts:query </apidoc:return>
<apidoc:usage>
<p>Point values and boundary specifications of boxes are given in degrees
relative to the WGS84 coordinate system.  Southern latitudes and Western 
longitudes take negative values.  Longitudes will be wrapped to the range 
(-180,+180) and latitudes will be clipped to the range (-90,+90).  
</p>
<p>If the northern boundary of a box is south of the southern boundary, no 
points will  match. However, longitudes wrap around the globe, so that if 
the western boundary is east of the eastern boundary,
then the box crosses the anti-meridian.
</p>
<p>Special handling occurs at the poles, as all longitudes exist at latitudes 
+90 and -90.
</p>
<p>This function will take into account interior polygons, if any, and properly
construct the query to account for them.
</p>
</apidoc:usage>
<apidoc:example><pre xml:space="preserve"><![CDATA[
xquery version "1.0-ml";

(: create a document with test data :)
xdmp:document-insert("first.json",
  object-node {  
    "type": "Feature",  
     "geometry": object-node {    
        "type": "Point",    
         "coordinates": array-node {125.6, 8.1}  },  
     "properties": object-node {    
       "name": "Test"  
      }
   });

xquery version "1.0-ml";
import module namespace geojson = "http://marklogic.com/geospatial/geojson"
         at "/MarkLogic/geospatial/geojson.xqy";

let $q := geojson:geospatial-query-from-nodes(
  object-node { 
    "type": "Polygon",
    "coordinates": array-node {
      array-node { 
        array-node {35, 1}, array-node {131, 1}, array-node {131, 120}, 
        array-node {35, 120}, array-node {35, 1} 
      }
    }
   })
return cts:search(fn:doc(), $q)
(:
  returns first.json
:)
 
]]></pre>
  </apidoc:example>
</apidoc:function>
</apidoc:module>
